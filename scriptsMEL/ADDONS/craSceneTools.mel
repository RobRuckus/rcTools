/*
'Scene Tools' MEL script

Author: Carlos Rico Adega - carlos.rico.3d@gmail.com
First Release Date: January 13, 2013

Copyright © 2015 Carlos Rico Adega

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


SCRIPT NAME:

	craSceneTools.mel

	Main procedure:
	    craSceneTools;

	Main tools:
	    craChannelControl;
	    craCreateScenePlayblast;
	    craExportAllSelected;
	    craMayaFileBrowser;
	    craReferenceFileEditor;
	    craReloadScene;
	    craReloadTextures;
	    craSaveSceneVersion;
	    craSaveSceneAs;
	    craSceneFilePath;
	    craSelectionFilter;


DESCRIPTION:

	The script provides tools with the following features:

		- CharlieWales' File Browser (non-modal file browser)
		- Custom Open Scene Dialog ( thumbnails, playblast, scene note display
		    and referencing/importing options )
		- Open/Import/Reference Path
		- Reload Current/Last Opened Scene
		- Save Scene As... (avoids having to open the sometimes sluggish
		    Maya File Dialog)
		- Export All/Selected... custom dialog
		- Save Scene Version
		- Current Scene Info Window
		- Scene Thumbnails and Scene Note creation ( you can choose where to
		    store them. Relative to the current project root, relative to
		    the opened scene file path or define a custom folder )
		- Scene Info HUDS
		- Create Shot Camera at persp position
		- Playblast/Shot Window ( timeline popupMenu (RMB), window popupMenu (control+LMB),
		    if shotCamera exists it is used in the viewport by default )
		- Create Scene Playblast
		- View Scene Playblast
		- Custom Reference File Editor (many features and remote editing,
		    commandPort 7777 must be available)
		- Channel/Node Control ( lock / hide attributes, lock objects)
		- Filter/Select Node Types
		- Playback Options
		- Setup Render Resolution
		- Setup Working Units (Space, Time)
		- Reload Scene Textures
		- ChannelBox Scene Tools Buttons (doesn't work if you already have
		    your own buttons)
		- Preferences saved in optionVars
		- Autoload script at startup setup

	CharlieWales' File Browser features:

		- Access to Project folders ( images, sourceimages, playblasts, ... )
		- Access to System folders ( desktop, drives, temp folder, ... )
		- Access to some Scene Tools utils ( save scene version, reload scene,
		   scene info, playblast window, reference file editor )
		- Create folders
		- Create materials from image file(s). If you have some objects
		  seleted the last material created will be assigned to them.
		- Delete files and empty folders
		- Docked/Floating UI
		- Execute python file name as function
		- Favorite folders
		- Horizontal/Vertical layout (paneLayout)
		- Image Viewer
		- Import Alembic files
		- Import python modules (adds the path to the sys.path if needed)
		- Import/Reference multiple files with or without namespaces
		- Import wav file into scene and set to timeline audio
		- Import OBJ sequences (select files and Left-Click --> Import as OBJ Sequence)
		- Import textures to scene (create file nodes, psdFileTex nodes for Photoshop files)
		- Open Image files in system viewer
		- Open Video files in system viewer
		- Open folder in system file explorer
		- Preferences saved in optionVars ( persistent across Maya sessions )
		- Recent files and projects
		- Recent folders
		- Rename file ( <Alt + Double-Click> on a file or <Right-Click> and choose
		  'Rename file' from the menu
		- Search current folder for files. Live and on-demand. When on-demand
		  you have to press the enter button to filter the file list. In Live mode
		  the file list is automatically filtered while typing (scriptJob
		  running while in this mode)
		- Select current opened scene
		- Set project from main projects list
		- Source mel scripts
		- Thumbnails view for Maya scenes and assets (*.ma, *.mb, *.ai, *.dae, *.abc, *.3ds,
		  *.atom, *.obj, *.fbx), AVI videos and images (JPG, IFF, PNG, TGA, TIF).
		  This feature is a bit slow with folders containing more than 200-300 files.
		- View image sequence ( internal (fcheck) and external (tested with
		  DJV Imaging on windows) ). Select an image file and
		  right-click --> View Sequence (option box for setting other viewer)
		- View scene playblast
		- View selected file(s) path
		- View text file as note (mel, py, txt, xml, css , ui, nk)
		- View/Create scene thumbnails and notes


LAUNCH SCRIPT (Creates Scene Tools Menu):

       craSceneTools;


TESTED ON:

	Windows 7 x64
		- Maya 2011 x64
		- Maya 2012 x64
		- Maya 2013 x64
		- Maya 2014 x64

	Fedora 14 x64 ( Virtualbox Virtual Machine )
		- Maya 2012 x64
		- Maya 2014 x64 ( for some unknown reason when opening playblasts the viewer closes unexpectedly ??? )

	Ubuntu 12.04 x64 (Wubi)
		- Maya 2012 x64
		- Maya 2014 x64

	Mac OSX 10.8.3
		- Maya 2013 x64


CHANGE LOG:

        Version: 2.1.6
        Date: February 7, 2015
                - Fixed bug in CharlieWales' File Browser: when saving scene the file
                  filter string is cleared. Added predefined filters on right-click menu.
                  (*.abc,*.fbx,*.ma, *.mb,*.obj)
                
        Version: 2.1.5
        Date: January 27, 2015
                - Fixed bug: if 'Update Thumbnail 0 on File Save' was OFF and no 
                  thumbnail 0 existed it was not created.
                - Minor bug fixes
        
        Version: 2.1.4
        Date: January 26, 2015
                - Added option: Update Thumbnail 0 on File Save (OFF by default)
                
        Version: 2.1.3
        Date: January 23, 2015
                - CharlieWales' File Browser: Added RealFlow SD file format to the thumbnails view
                - CharlieWales' File Browser: Fixed 'Open Current Path' not working on windows
                - Added in view messages to the Reload Textures tool
                - Minor bug fixes
		
        Version: 2.1.2
        Date: December 17, 2014
                  - CharlieWales' File Browser: Fixed bug. When in thumbnail mode, right-click on icon,
                    "View Thumbnail" didn't work if the file name contained more than one dot "."
                    (ex: sceneName_v1.0.ma)
        
        Version: 2.1.1
        Date: December 16, 2014
                - Fixed issue with maya not using english language
                                
        Version: 2.1.0
        Date: December 15, 2014
                - Playblast / Shot Window: Added button to set viewport renderer (persistent option via optionVar)
                - Playblast / Shot Window: Added button show/hide viewport bar (persistent option via optionVar)
                - Playblast / Shot Window: Added button to save/restore viewport settings (persistent option via optionVar)
                - Fixed bug in "Save Scene As..." tool, changing file type did not work and thumbnail was not created
                - Minor Bug fixes
                - Minor UI changes 
                
        Version: 2.0.10
        Date: May 10, 2014
                - CharlieWales' File Browser: Added View Thumbnails Window to the thumbnails view (right-click menu)
                - CharlieWales' File Browser: Added PSD image format to the thumbnails view
                - CharlieWales' File Browser: Added TXT extension to the thumbnails view
                
        Version: 2.0.9
        Date: Frebuary 19, 2014
                - CharlieWales' File Browser: Thumbnails view mode (small/medium/big)
                - CharlieWales' File Browser: Added shortcut to the Scene Info folder [system > Scene Info Data]
                - CharlieWales' File Browser: Create thumbnails for (obj, fbx, dae, abc, sd, ai, atom, 3ds)
                - Custom Thumbnails and notes path [Scene Tools > Scene Info > optionbox]
                - Scene Info HUDS changes
                - Bug fixes

        Version: 2.0.8
        Date: October 14, 2013
                - Fixed bug caused by the Recent folders feature

	Version: 2.0.7
        Date: October 9, 2013
                - CharlieWales' File Browser: open RealFlow Scene Files (flw)
                - Windows UNC paths supported

        Version: 2.0.6
        Date: October 6, 2013
		- CharlieWales' File Browser: added Recent folders list (up to 20 folders)
		- CharlieWales' File Browser: added support for importing RealFlow SD files and BIN and RPC
		  sequences (double-click a BIN file, this requires RealFlow Plugins)
		- Small fixes to 'Save Scene As' tool
		- General bug fixing
		- Minor UI changes

	Version: 2.0.5
        Date: May 29, 2013
                - Fixed a bug introduced in 2.0.4 when fixing another bug

	Version: 2.0.4
	Date: May 28, 2013
                - Fixed a bug in CharlieWales' File Browser when going to parent folder
                  in certain situations.

	Version: 2.0.3
	Date: May 26, 2013
                - Added 'Open/Import/Reference Path...' tool. Paste a file path into
                  the field for opening, importing or referencing file. Pressing
                  Numpad ENTER opens the path and closes the UI.

	Version: 2.0.2
	Date: May 25, 2013
                - Now 'Save Scene As...' and 'Save Scene Version' add the output file
		 to the recent file list

	Version: 2.0.1
	Date: May 24, 2013
                - Fixed minor bug on Linux

	Version: 2.0.0
	Date: May 23, 2013
		- NEW!! Added CharlieWales' File Browser tool (non-modal file browser)
		- NEW!! Save Scene As... dialog (avoids having to open the sometimes sluggish Maya Save As Dialog)
		- NEW!! Export All/Selected... dialog (avoids having to open the sometimes sluggish Maya Export Dialog)
		- Playblast creation now works on Linux!!
		- Updated the Filter/Select Nodes Tool. Now lists all loaded nodeTypes.
		- Minor UI tweaks.
		- Minor bug fixes.

	Version: 1.1.6
	Date: April 10, 2013
		- Added -ignoreVersion flag to the OpenScene procedure.

	Version: 1.1.5
	Date: March 30, 2013
		- Small fix. On linux complains about not finding a menuItem, not anymore.

	Version: 1.1.4
	Date: March 23, 2013
		- Now, Reload Last Opened Scene tells you which scene is going to be reloaded.

	Version: 1.1.3
	Date: Frebuary 3, 2013
		- Fixed a bug that caused the thumbnails not being created when the scene
		  name contains more than one dot (ie:  scene-1.1.3.ma)

	Version: 1.1.2
	Date: January 31, 2013
		- Fixed a bug that caused the thumbnail number 0 always to be recreated when
		  saving a scene. Now if the thumbnail 0 exists it is not recreated.

	Version: 1.1.1
	Date: January 28, 2013
		- Fixed a bug that prevented keys from being selected in the Graph Editor
		  while the Referenced File Editor is running.

	Version: 1.1.0
	Date: January 13, 2013
		- Changed the name of the storage folder, now is *.craData*.
		  On Linux and OSX dot starting directories are not shown by default,
		  on windows the hidden attribute is set. Previous version thumbnails will
		  not work unless "PROJECT_ROOT/data/craData" folder
		  is renamed  to  "PROJECT_ROOT/data/.craData"

		- Added an option to choose where to store the thumbnails and notes data.
		  You can now choose to set it relative to the current project root (Only one
		  folder per project) or you can set it relative to the scene file
		  opened (One folder per scene location, this allows to view thumbnails
		  of files outside the current project but creates as many .craData directories
		  as different scene locations)

		 - Scene Info HUDs state mantained between maya sessions (via optionVar)

	Version: 1.0.1
	Date: January 11, 2013
		- Update Scene Info Window Note when creating note from Open Scene Dialog.

	Version: 1.0.0
	Date: January 10, 2013
		- First Release.
*/
global proc craSceneTools()
{
	global string $gPlayBackSlider;
	global string $gMainWindow;
	
	if(!`optionVar -exists craSceneToolsCustomInfoPathOV`)
		optionVar -sv craSceneToolsCustomInfoPathOV "";
	
	if(!`optionVar -exists craAddChannelBoxButtonsOV`)
		optionVar -iv craAddChannelBoxButtonsOV 0;
	
	if(!`optionVar -exists craAutoLoadSceneToolsOV`)
		optionVar -iv craAutoLoadSceneToolsOV 0;
	
	if(!`optionVar -exists craSceneInfoOptionsOV`)
		optionVar -iv craSceneInfoOptionsOV 0;
	
	if(!`optionVar -exists craSceneInfoHUDsOV`)
		optionVar -iv craSceneInfoHUDsOV 0;
	
	if(!`optionVar -exists craSceneThumbail0AutoUpdateOV`)
	        optionVar -iv craSceneThumbail0AutoUpdateOV 0;
	
	if (`menu -q -exists craSceneToolsMenu`)
		deleteUI craSceneToolsMenu;
	
	if(!`optionVar -exists "craMayaFileBrowserProjectFoldersOV"`)
		optionVar -sva "craMayaFileBrowserProjectFoldersOV" "NOT SET, SELECT A FOLDER";
	
	menu -to 1 -l "Scene Tools" -pmc "craSceneUtilsInitMenuItems" -p $gMainWindow craSceneToolsMenu;

		menuItem -l "CharlieWales' File Browser" -ann "Open CharlieWales' File Browser - option box closes UI" -c "craMayaFileBrowser";
		menuItem -l "Set CharlieWales' File Browser Projects Folders" -ob 1 -c "craMayaFileBrowserSettings";
		menuItem -d 1;
		menuItem -l "Open Scene..." -ann "Open Scene Custom Dialog"-c "OpenScene";
		menuItem -l "Open Scene Options" -ob 1 -c "OpenSceneOptions";
		menuItem -l "Open/Import/Reference Path..." -ann "Paste path to open "-c "craSceneFilePath";
		menuItem -d 1;
		menuItem -l "Reload Scene" -ann "Reloads current scene or last opened scene if none is opened" -c "craReloadScene";
		menuItem -d 1;
		menuItem -l "Save Scene As..." -c "craSaveSceneAs" -ann "Save Scene As...";
		menuItem -l "Save Scene Version" -ann "Incremental save" -c "craSaveSceneVersion";
		menuItem -d 1;
		menuItem -l "Export All/Selected..." -c "craExportAllSelected" -ann "Export Scene As...";
		menuItem -d 1;
		menuItem -l "Scene Info" -ann "Opens window with thumbnail and note preview, option box closes the UI" -c "craSceneFileInfo";
			menuItem -ob 1 -l "Scene Info" -ann "Scene Info Options" -c "craSceneFileInfoOptionsUI";
		menuItem -l "Scene Info HUDs" -cb `optionVar -q craSceneInfoOptionsOV` -ann "Toggle User, Frame, Current Scene and Current Project HUDs information " -c "craSceneInfoHUDs #1;optionVar -iv craSceneInfoHUDsOV #1" craSceneInfoHUDsMI;
		menuItem -cb `optionVar -q craSceneThumbail0AutoUpdateOV` -l "Update Thumbnail 0 on File Save" -ann "Updates thumnail 0 on file save" -c "optionVar -iv craSceneThumbail0AutoUpdateOV #1";
		menuItem -d 1;
		menuItem -l "Create shotCamera at persp" -ann "Create shotCamera at persp camera position. Option Box looks through created camera" -command "craCreateShotCamera 0";
			menuItem -ob 1 -ann "Create shotCamera at persp and look through it" -l "Create shotCamera at persp and look through it" -command "craCreateShotCamera 1";
		menuItem -l "Create Scene Playblast" -ann "Creates a scene playblast and saves it in the current project playblast folder " -c "craCreateScenePlayblast" craCreateScenePlayblastMI;
		menuItem -l "Playblast / Shot Window" -ann "Creates a UI to playblast the scene" -c "craCreateScenePlayblastWindow";
			menuItem -ob 1 -l "Playblast / Shot Window Options" -ann "Creates a UI to playblast the scene" -c "craCreateScenePlayblastOptions" craCreateScenePlayblastOptionsMI;
		menuItem -l "View Scene Playblast" -ann "Open scene playblast" -c "craViewScenePlayblast" craViewScenePlayblastMI;
		menuItem -d 1;
		menuItem -l "Reference File Editor" -ann "Opens Custom Reference File Editor" -c "craReferenceFileEditor";
		menuItem -l "Open/Close Remote Edit Port" -ann "Opens or closes the commandPort used for remote editing" -c "craSetupRemoteEdit" craSetupRemoteEditMI;
		menuItem -d 1;
		menuItem -l "Channel/Node Control" -ann "Open UI to lock and hide attributes from channel box" -c "craChannelControl";
		menuItem -d 1;
		menuItem -l "Filter/Select Nodes" -ann "Open UI to lock and hide attributes from channel box" -c "craSelectionFilter";
		menuItem -d 1;
		menuItem -l "Reload Textures" -ann "Reload selected object(s) texture(s), reload all textures if no object is selected" -c "craReloadTextures";
		menuItem -d 1;
		
		menuItem -l "Playback Options" -ann "Change various playback and timeline options" -sm 1 -to 1;
			menuItem -l "Interactive Playback" -c "InteractivePlayback;headsUpMessage -t 0.1  \"Interactive Playback\";";
			menuItem -d 1;
			menuItem -l "Real-Time" -c "craPlaybackOptions 0";
			menuItem -l "Play Every Frame" -c "craPlaybackOptions 1";
			menuItem -l "Play Every Frame, Max Real-Time" -c "craPlaybackOptions 2";
			menuItem -d 1;
			menuItem -l "Playback Once" -c "craPlaybackOptions 3" ;
			menuItem -l "Playback Oscillate" -c "craPlaybackOptions 4";
			menuItem -l "Playback Continuous" -c "craPlaybackOptions 5";
			menuItem -d 1;
			menuItem -label "Timeline Snapping" -command "global string $gPlayBackSlider; timeControl -e -snap #1 $gPlayBackSlider" -checkBox `timeControl -q -snap $gPlayBackSlider` craTimelineSnappingMI;
			menuItem -d 1;
			menuItem -label "Update All Views" -command "craPlaybackOptions 6"; 
			menuItem -label "Update Active View" -command "craPlaybackOptions 7";
			
		setParent -m ..;
		
		menuItem -l "Render Resolution" -ann "Change output file render resolution" -sm 1 -to 1 -p "craSceneToolsMenu";
			
			menuItem -l "320x240" -c "craSetRenderResolution(320,240,1.333)";
			menuItem -l "640x480" -c "craSetRenderResolution(640,480,1.333)";
			menuItem -l "DCP (1998x1080)" -c "craSetRenderResolution(1998,1080,1.850)";
			menuItem -l "HD 720" -c "craSetRenderResolution(1280,720,1.778)";
			menuItem -l "HD 1080" -c "craSetRenderResolution(1920,1080,1.778)";
			menuItem -l "NTSC (720x486)" -c "craSetRenderResolution(720,486,1.481);currentUnit -t ntsc;print \"\\n30 fps\"";
			menuItem -l "PAL (720x576)" -c "craSetRenderResolution(720,576,1.250);currentUnit -t pal;print \"\\n25 fps\"";
			menuItem -l "Widescreen PAL (1024x576)" -c "craSetRenderResolution(1024,576,1.778);currentUnit -t pal;print \"\\n25 fps\"";
			menuItem -d 1;
			menuItem -l "1k Square" -c "craSetRenderResolution(1024,1024,1)";
			menuItem -l "2k Square" -c "craSetRenderResolution(2048,2048,1)";
			menuItem -l "3k Square" -c "craSetRenderResolution(3072,3072,1)";
			menuItem -l "4k Square" -c "craSetRenderResolution(4096,4096,1)";
			menuItem -d 1;
			menuItem -l "Letter" -c "craSetRenderResolution(2550,3300,0.773)";
			menuItem -l "A4" -c "craSetRenderResolution(2480,3508,0.707)";   
		setParent ..;
		
		menuItem -l "Working Units" -ann "Change space units (measure units) and time units (frames per second)" -sm 1 -to 1 -p "craSceneToolsMenu";
			menuItem -sm 1 -to 1 -l "Space";
				menuItem -l "millimeter" -c "craSceneUnits \"millimeter\"";
				menuItem -l "centimeter" -c "craSceneUnits \"centimeter\"";
				menuItem -l "meter" -c "craSceneUnits \"meter\"";
				menuItem -d 1;
				menuItem -l "inch" -c "craSceneUnits \"in\"";
				menuItem -l "foot" -c "craSceneUnits \"ft\"";
				menuItem -l "yard" -c "craSceneUnits \"yd\"";
				
			setParent -m ..;
		
			menuItem -l "FPS" -sm 1 -to 1;
				menuItem -l "15 - game" -c "currentUnit -t game;print \"\\n15 fps\"";
				menuItem -l "24 - film" -c "currentUnit -t film;print \"\\n24 fps\"";
				menuItem -l "25 - pal" -c "currentUnit -t pal;print \"\\n25 fps\"";
				menuItem -l "30 - ntsc" -c "currentUnit -t ntsc;print \"\\n30 fps\"";
				menuItem -l "48 - show" -c "currentUnit -t show;print \"\\n48 fps\"";
				menuItem -l "50 - palf" -c "currentUnit -t palf;print \"\\n50 fps\"";
				menuItem -l "60 - ntscf" -c "currentUnit -t ntscf;print \"\\n60 fps\"";   
				menuItem -l "120" -c "currentUnit -t 120fps;print \"\\n120 fps\"";
			setParent -m ..;
		setParent -m ..;
		
			
		setParent -m ..;
		setParent ..;
		
		setParent -menu "craSceneToolsMenu";
		menuItem -d 1;
		menuItem -cb `optionVar -q craAddChannelBoxButtonsOV` -l "Add ChannelBox Tool Icons" -ann "Add Tool icons to the ChannelBox" -c "craAddChannelBoxSceneToolButtons #1;optionVar -iv craAddChannelBoxButtonsOV #1";
		menuItem -cb `optionVar -q craAutoLoadSceneToolsOV` -l "Autoload Scene Tools" -ann "Adds craSceneTools to your userSetup.mel to auto load tools on Maya Start-Up" -c "craAutoLoadSceneTools #1;optionVar -iv craAutoLoadSceneToolsOV #1;" craAutoloadSceneToolsCB;
		menuItem -d 1;
		menuItem -l "About: Carlos Rico Adega © 2015" -ann "About, option box deletes this menu" -en 1 -c "craAboutSceneTools";;
			menuItem -ob 1 -l "Delete this Menu" -c "evalDeferred (\"if (`menu -q -exists craSceneToolsMenu`) deleteUI craSceneToolsMenu;\")";
			
	setParent -m ..;
	
	craAddChannelBoxSceneToolButtons `optionVar -q craAddChannelBoxButtonsOV`;
	craSceneInfoHUDs `optionVar -q craSceneInfoHUDsOV`;
	scriptJob -e "SceneOpened" "craSceneUtilsInitMenuItems" -p craSceneToolsMenu;
}

global proc craSceneInfoHUDs(int $state)
{
	if($state)
	{
		if(`headsUpDisplay -exists craSceneHUDsProjectHUD`)
			headsUpDisplay -rem craSceneHUDsProjectHUD;
		
		if(`headsUpDisplay -exists craSceneHUDsFrameHUD`)
			headsUpDisplay -rem craSceneHUDsFrameHUD;
		
		if(`headsUpDisplay -exists craSceneHUDsSceneHUD`)
			headsUpDisplay -rem craSceneHUDsSceneHUD;
		
		if(`headsUpDisplay -exists craSceneHUDsUserHUD`)
			headsUpDisplay -rem craSceneHUDsUserHUD;

		
		if(`headsUpDisplay -exists craSceneHUDsTimecodeHUD`)
			headsUpDisplay -rem craSceneHUDsTimecodeHUD;
		
		headsUpDisplay 
			-section 6 -block 0 -blockSize "small" 
			-dfs "small"
			-ao 1
			-ba "left"
			-label "Project" 
			-labelFontSize "small" 
			-command "basenameEx(`workspace -q -rd`)" -atr
			craSceneHUDsProjectHUD;
		
		headsUpDisplay 
			-section 8 -block 1 -blockSize "small" 
			-dfs "large"
			-ba "left"
			-ao 1
			-label "Frame" 
			-labelFontSize "small" 
			-command "craHUDNumberPadding(`currentTime -q`, 4, \"0\")"
			-atr
			craSceneHUDsFrameHUD;
			
		
		headsUpDisplay 
			-section 6 -block 1 -blockSize "small" 
			-dfs "small"
			-ao 1
			-ba "left"
			-label "Scene" 
			-labelFontSize "small" 
			-command "file -q -sn -shn" -atr
			craSceneHUDsSceneHUD;
		
		headsUpDisplay 
                        -section 8 -block 0 
                        -blockSize "small" 
                        -l "Time  "
                        -atr
                        -lfs "small" -dfs "large" -c "craSceneHUDsTimecodeHUDConvert()" 
                        craSceneHUDsTimecodeHUD;
	
		// headsUpDisplay 
		// 	-section 6 -block 1 -blockSize "small" 
		// 	-dfs "large"
		//         -ao 1
		// 	-ba "left"
		// 	-label ("User : ")
		// 	-command "getenv \"USER\""
		// 	-atr
		// 	-labelFontSize "large" 
		// 	craSceneHUDsUserHUD;
                /*
                headsUpDisplay 
			-section 8 -block 0 -blockSize "small" 
			-dfs "small"
		        -ao 1
			-ba "left"
			-label ("Date")
			-command "date -f \"DD/MM/YYYY\""
			// -command "date -d"
			-atr
			-labelFontSize "small" 
			craSceneHUDsUserHUD;
		*/	
			// craTimeHUD;
	}
	else
	{
		if(`headsUpDisplay -exists craSceneHUDsProjectHUD`)
			headsUpDisplay -rem craSceneHUDsProjectHUD;
		
		if(`headsUpDisplay -exists craSceneHUDsFrameHUD`)
			headsUpDisplay -rem craSceneHUDsFrameHUD;
		
		if(`headsUpDisplay -exists craSceneHUDsSceneHUD`)
			headsUpDisplay -rem craSceneHUDsSceneHUD;
		
		if(`headsUpDisplay -exists craSceneHUDsUserHUD`)
			headsUpDisplay -rem craSceneHUDsUserHUD;

		

		if(`headsUpDisplay -exists craSceneHUDsTimecodeHUD`)
			headsUpDisplay -rem "craSceneHUDsTimecodeHUD";
		// craTimeHUD;
	}
}

global proc craReloadScene()
{
	
	if(`file -q -loc` == "unknown")
	{
		string $recentFiles[];
		if(`optionVar -exists "RecentFilesList"`)
		{
			$recentFiles = `optionVar -query "RecentFilesList"`;
		
			if(`confirmDialog -title "Reload Scene" -defaultButton "OK" -message ("Reload Last Opened Scene?\n\n" + $recentFiles[size($recentFiles)-1]) -cancelButton "Cancel" -dismissString "Cancel" -button "OK" -button "Cancel"` == "OK")
				file -f -o $recentFiles[size($recentFiles)-1];
		}
		else
			warning "No recent files.\n";
	} 
	else
	{
		if(`confirmDialog -title "Reload Scene" -defaultButton "OK" -message "Reload Current Scene?" -cancelButton "Cancel" -dismissString "Cancel" -button "OK" -button "Cancel"` == "OK")
			file -f -o `file -q -loc`;
	}
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craReferenceFileEditor start 
global proc craReferenceFileEditor()
{
	string $mySel[] = `ls -sl`;
	string $craReferencedFileRN = "";
	string $craReferencedFile = "";
	if(size($mySel))
	{
		if(`referenceQuery -inr $mySel[0]`)
		{
			$craReferencedFile = `referenceQuery -f $mySel[0]`;
			$craReferencedFileRN = `referenceQuery -rfn $craReferencedFile`;
		}
	}
	string $buffer[];
	int $numTokens = `tokenize $craReferencedFile "{" $buffer`;
	$craReferencedFile = $buffer[0];

	if (`window -exists craRefFileWin`)
		deleteUI craRefFileWin;
	
	window -s 0 -t ("Reference File Editor [" + $craReferencedFileRN + "]") -tlb 1 craRefFileWin;
	columnLayout -adj 1 craRefEditorCL;
	
	rowLayout -h 21 -nc 4 -adj 3;
		iconTextButton -h 20 -w 20 -c "ReferenceEditor" -i "refEdFileList.png" -ann "Open Reference Editor";
		iconTextButton -h 20 -w 20 -c "CreateReference" -i "createReference.png" -ann "Create Reference";
		textField-h 20  -w 500 -ed 0 -text $craReferencedFile craRefFilePath;
		iconTextButton  -bgc .4 .4 .4 -h 20 -w 20 -i "pickOtherObj.png" -ann "About" -c "craAboutSceneTools";
	setParent ..;
	
	rowLayout -h 21 -nc 7 -adj 1 craRefEditRow1RL;
		button -h 20 -w 70 -l "Remote Edit" -ann "Edit in other Maya session" -c "craRemoteEditReference";
		popupMenu;
	
		if (!`commandPort -q "127.0.0.1:7777"`) 
			menuItem -l "Open commandPort 7777" -c "craSetupRemoteEdit;if (!(`commandPort -q \"127.0.0.1:7777\"`))menuItem -e -l \"Close commandPort 7777\" craSetupRemoteEditRefMI;else menuItem -e -l \"Open commandPort 7777\" craSetupRemoteEditRefMI;" craSetupRemoteEditRefMI;
		
		else 
			menuItem -l "Close commandPort 7777" -c "craSetupRemoteEdit;if ((`commandPort -q \"127.0.0.1:7777\"`))menuItem -e -l \"Close commandPort 7777\" craSetupRemoteEditRefMI;else menuItem -e -l \"Open commandPort 7777\" craSetupRemoteEditRefMI;" craSetupRemoteEditRefMI;
		
		setParent -m ..;
		
		button -h 20 -w 70 -l "Open" -ann "Open Referenced Scene File" -c "craOpenReference";
		button -h 20 -w 70 -l "Import" -ann "Import Selected Reference" -c "craImportReference";
		button -h 20 -w 70 -l "Duplicate" -ann "Duplicate Reference. Make another reference from current selected reference" -c "craDuplicateReference";
		button -h 20 -w 70 -l "Remove" -ann "Remove current selected references" -c "craRemoveReference";
		button -h 20 -w 70 -l "Replace" -ann "Replace selected reference" -c "craReplaceReference";
		button -h 20 -w 150 -label "---- no reference node ----" -ann "Select reference node" craRefFileRN_BTN;
	setParent ..;
	
	rowLayout -h 21 -nc 6 -adj 6 craRefEditRow2RL;
		button -h 20 -w 70 -l "Reload" -ann "Reload current selected reference" -c "craReloadReference" craReloadRefBTN;
		popupMenu;
				menuItem -l "Reload All Reference Instances" -c "craReloadAllReferenceInstances";
				menuItem -d 1;
				menuItem -l "Reload All References" -c "craReloadAllReferences";
			setParent -m;
		
		button -h 20 -w 70 -l "Load" -ann "Load unloaded references" -c "craUnloadedReferences" craLoadRefBTN;
		button -h 20 -w 70 -l "Unload" -ann "Unload selected references" -c "craUnloadReference" craUnloadRefBTN;
		button -h 20 -w 120 -l "Referenced Files" -c "craListReferences 1" craListRefsBTN;
			popupMenu;
				menuItem -l "Referenced Files (file names)" -c "craListReferences 0";
			setParent -m;
		button -h 20 -w 120 -l "Reference Edits" -c "craListRefEdits" craListRefEditsBTN;
		textField -h 20 -w 150 -ed 0 -text "" -ann "Selected object name" craSelectionTF;
	setParent ..;
		
	textField -e -it "" -insertionPosition 1 craSelectionTF;
	textField -e -it "" -insertionPosition 1 craRefFilePath;
	
	window -e -wh 614 65 craRefFileWin;
	showWindow craRefFileWin;
	scriptJob -e "SelectionChanged" "craUpdateReference" -p craRefFileWin;
	
	craUpdateReference;
}

global proc craListRefEdits()
{
	string $mySel[] = `ls -sl`;
	
	if(size($mySel))
	{
		if(`referenceQuery -inr $mySel[0]`)
			referenceEditsWindow `referenceQuery -f $mySel[0]` false;
		else
			error "No referenced object selected.";
	}
	else
		error "No object selected.";
	
	select -r $mySel;
}

global proc craDuplicateReference()
{
	string $mySel[] = `ls -sl`;
	if(size($mySel))
	{
		if(`referenceQuery -inr $mySel[0]`)
			file -f -namespace (basenameEx(`textField -q -text craRefFilePath`)) -r `textField -q -text craRefFilePath`;
	}
		
	select -r $mySel;
}

global proc craRemoteEditReference()
{
	if(`textField -q -text craRefFilePath` != "")
	{
		python("import socket\nmaya = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nmaya.connect((\"127.0.0.1\", 7777))\nmaya.send('file -f -o \"" + `textField -q -text craRefFilePath` + "\"')\nmaya.close()");
	} 
	else 
		error "No file selected";
}

global proc craReplaceReference()
{
	string $mySel[] = `ls -sl`;
	string $craReplaceRefFile = `fileDialog -dm "*.ma;*.mb"`;
	if($craReplaceRefFile != "")
		file -loadReference `referenceQuery -rfn $mySel[0]` -f $craReplaceRefFile;
}

global proc craUnloadReference()
{
	string $sel[] = `ls -sl`;
	for($i in $sel){
		if(`objExists $i`)
			file -unloadReference `referenceQuery -rfn $i`;
	}
	
	if (`window -exists craUnloadedReferencesWin`)
		craUnloadedReferences;
}

global proc craOpenReference()
{
	string $mySel[] = `ls -sl`;
	if(`textField -q -text craRefFilePath` != "")
		file -f -o `referenceQuery -f $mySel[0]`;
	else
		warning "No referenced asset selected";
}

global proc craImportReference()
{
	string $mySel[] = `ls -sl`;
	if(`textField -q -text craRefFilePath` != "")
		file -referenceNode `referenceQuery -rfn $mySel[0]` -importReference `referenceQuery -f $mySel[0]`;
	else
		OpenScene;
	select -r $mySel;
}

global proc craReloadReference()
{
	string $mySel[] = `ls -sl`;
	for($i in $mySel){
		file -loadReference `referenceQuery -rfn $i`;
	}
	select -r $mySel;
}

global proc craReloadAllReferences()
{
	string $mySel[] = `ls -sl`;
	int $reloadedReferences = 0;
	string $references[] = `ls -type "reference"`;
		
	for($refNode in $references){
		if(`gmatch $refNode "*_UNKNOWN_REF_NODE_*"` || `gmatch $refNode "*sharedReferenceNode*"`)
			continue;
		file -loadReference $refNode;
		$reloadedReferences++;
	}
	print ($reloadedReferences + " references reloaded.");
	select -r $mySel;
}


global proc craReloadAllReferenceInstances()
{
	
	string $mySel[] = `ls -sl`;
	
	int $reloadedReferences = 0;
	
	for($i in $mySel){
		string $referenceNode = `referenceQuery -rfn $i`;
		string $filename[];
		string $rawFilename = `referenceQuery -f $referenceNode`;
		tokenize $rawFilename "{" $filename;
		string $references[] = `ls -type "reference"`;
		
		for($refNode in $references)
		{
			if(`gmatch $refNode "*_UNKNOWN_REF_NODE_*"` || `gmatch $refNode "*sharedReferenceNode*"`)
				continue;
			string $referenceNode2 = `referenceQuery -rfn $refNode`;
			string $filename2[];
			string $rawFilename2 = `referenceQuery -f $referenceNode2`;
			tokenize $rawFilename2 "{" $filename2;
			
			if ($filename2[0] == $filename[0]){
				file -loadReference `referenceQuery -rfn $refNode`;
				$reloadedReferences++;
			}
		}
	}
	
	print ($reloadedReferences + " references reloaded.");
	
	select -r $mySel;
}

global proc craRemoveReference()
{
	string $sel[] = `ls -sl`;
	for($obj in $sel){
		if(`objExists $obj` && `referenceQuery -inr $obj`)
			file -removeReference `referenceQuery -f $obj`;
	}
}

global proc craUpdateReference()
{

	string $mySel[] = `ls -sl`;
	string $craReferencedFileRN = "";
	string $references[] = `ls -type "reference"`;
	string $craReferencedFile = "";
	if(size($mySel)){
		if(`referenceQuery -inr $mySel[0]`){
			$craReferencedFile = `referenceQuery -f $mySel[0]`;
			$craReferencedFileRN = `referenceQuery -rfn $craReferencedFile`;
		}
	}
	string $buffer[];
	int $numTokens = `tokenize $craReferencedFile "{" $buffer`;
	$craReferencedFile = $buffer[0];
	textField -e -text $craReferencedFile craRefFilePath;
	
	if($craReferencedFileRN != "") 
		button -e -label $craReferencedFileRN -c ("select -r `button -q -label craRefFileRN_BTN`") craRefFileRN_BTN;
	else
		button -e -label "---- no reference node ----" -c "" craRefFileRN_BTN;
	
	
	if(size($mySel)){
		if(`referenceQuery -inr $mySel[0]`){
			textField -e -text $mySel[0]  craSelectionTF;
			rowLayout -e -en 1 craRefEditRow1RL;
			button -e -en 1 craReloadRefBTN;
			button -e -en 1 craUnloadRefBTN;
			button -e -en 1 craListRefEditsBTN;
			textField -e -en 1 craSelectionTF;
		}
		else {
			textField -e -text "" craSelectionTF;
			rowLayout -e -en 0 craRefEditRow1RL;
			button -e -en 0 craReloadRefBTN;
			button -e -en 0 craUnloadRefBTN;
			button -e -en 0 craListRefEditsBTN;
			textField -e -en 0 craSelectionTF;
		}
	}
	else
	{
		textField -e -text "" craSelectionTF;
		rowLayout -e -en 0 craRefEditRow1RL;
		button -e -en 0 craReloadRefBTN;
		button -e -en 0 craUnloadRefBTN;
		button -e -en 0 craListRefEditsBTN;
		textField -e -en 0 craSelectionTF;
	}
		
	textField -e -it "" -insertionPosition 1 craSelectionTF;
	textField -e -it "" -insertionPosition 1 craRefFilePath;
	
	if(!size(`craCheckUnloadedReferences`))
		button -e -en 0 craLoadRefBTN;
	else
		button -e -en 1 craLoadRefBTN;
	
	if(!size($references))
		button -e -en 0 craListRefsBTN;
	else 
		button -e -en 1 craListRefsBTN;
	
	window -e -t ("Reference File Editor [" + $craReferencedFileRN + "]") craRefFileWin;
	
	if (!`commandPort -q "127.0.0.1:7777"`) 
		menuItem -e -l "Open commandPort 7777" -c "craSetupRemoteEdit" craSetupRemoteEditMI;
	else 
		menuItem -e -l "Close commandPort 7777" -c "craSetupRemoteEdit" craSetupRemoteEditMI;
	
}
global proc string[] craCheckUnloadedReferences()
{
	string $unloadedReferences[];
	string $refs[] =`ls -type "reference"`;
	for($i in $refs){
		if(`gmatch $i "*_UNKNOWN_REF_NODE_*"` || `gmatch $i "*sharedReferenceNode*"`)
			continue;
		if(catchQuiet(`referenceQuery -il $i`))
			continue;
		if(!`referenceQuery -il $i`){
			string $buffer[];
			string $shortName = `referenceQuery -f -shn $i`;
			tokenize $shortName "{" $buffer;
			$unloadedReferences[size($unloadedReferences)] = `referenceQuery -f $i`;
		}
	}
	
	return $unloadedReferences;
}
	
global proc craUnloadedReferences()
{
	if (`window -exists craUnloadedReferencesWin`)
		deleteUI craUnloadedReferencesWin;
	
	window -tlb 1 -w 750 -s 0 -t "Unloaded References" craUnloadedReferencesWin;
	frameLayout -lv 0 -mw 3 -mh 3;
	columnLayout -adj 1;
	columnLayout -w 750 -adj 1;
	separator;

	textScrollList -dcc "craLoadSelectedReferences 0" -h 385 -ams 1 craUnloadedReferencesTSL;
	
	string $refs[] =`ls -type "reference"`;
	for($i in $refs){
		if(`gmatch $i "*_UNKNOWN_REF_NODE_*"` || `gmatch $i "*sharedReferenceNode*"`)
			continue;
		if(catchQuiet(`referenceQuery -il $i`))
			continue;
		if(!`referenceQuery -il $i`){
			string $buffer[];
			string $shortName = `referenceQuery -f -shn $i`;
			tokenize $shortName "{" $buffer;
			textScrollList -e -a ("  " + $i + "   ---   " + $buffer[0] + "   ---   " + `referenceQuery -f $i`) craUnloadedReferencesTSL;
		}
	}
	separator -h 5 -st "none";
	rowLayout -nc 2 -adj 2;
	button -l "Load Selected References" -w 350 -c ("craLoadSelectedReferences 0");
	button -l "Load All References" -c ("craLoadSelectedReferences 1;deleteUI craUnloadedReferencesWin");
	                           
	showWindow craUnloadedReferencesWin;
}

global proc craLoadSelectedReferences( int $mode ){
	string $refs[];
	if($mode)
		$refs = `textScrollList -q -ai craUnloadedReferencesTSL`;
	else
		$refs = `textScrollList -q -si craUnloadedReferencesTSL`;
	
	if(size($refs)){
		for($ref in $refs){
			string $buffer[];
			tokenize $ref " " $buffer;
			file -lr $buffer[0]; 
			textScrollList -e -ri $ref craUnloadedReferencesTSL;
		}
	}
	
	craUpdateReference;
}


global proc string[] craListReferences(int $fullPath){
	
	string $sceneRefs[];
	
	if(size(`file -q -r`)){
		for ($i in `file -q -r`){
			string $file = $i;
			string $buffer[];
			string $buffer2[];
			int $numTokens = `tokenize $file "{" $buffer`;
			if($fullPath)
				$sceneRefs[size($sceneRefs)] = $buffer[0];
			else {
				int $numTokens2 = `tokenize $buffer[0] "/" $buffer2`;
				$sceneRefs[size($sceneRefs)] = $buffer2[size($buffer2)-1];
				print $buffer2[size($buffer2)];
			}
		}
		$sceneRefs = stringArrayRemoveDuplicates($sceneRefs);
		$sceneRefs = sort($sceneRefs);
	} else error "No References found.";
	
	if (`window -exists craListReferencesWin`)
		deleteUI craListReferencesWin;
	window -s 1 -w 650 -t ("Referenced Files (" + size($sceneRefs) + ")") craListReferencesWin;
	columnLayout -adj 1 -w 650 ;
	
	for($ref in $sceneRefs){
		if(`textScrollList -q -exists craRefsTSL`)
			textScrollList -e -ams 1 -w 648 -h 478 -append $ref craRefsTSL;
		else
			textScrollList -ams 1 -w 648 -h 478 -append $ref craRefsTSL;
	}
	
	window -e -s 0 craListReferencesWin;
	showWindow craListReferencesWin;
	return $sceneRefs;		
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craReferenceFileEditor end



/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//overrides the default behavior of the Open Scene file dialog with modified options
// OpenScene start

global proc OpenScene()
{
	string $startDir;
	
	if(dirname(`file -q -loc`) == "")
		$startDir = (`workspace -q -rd` + `workspace -q -fre "scene"`);
	else
		$startDir = dirname(`file -q -loc`);
	
	string $file[] = `fileDialog2
			-returnFilter 1
			-dialogStyle 2
			-caption "Open / Import / Reference File - Carlos Rico Adega © 2015"
			-fileMode 4
			-okCaption "Open"
			-optionsUICreate "craOptionsUISetup"
			-optionsUIInit "craOptionsUIInitValues"
			-selectionChanged "craSelectionChangedCallback"
			-optionsUICommit "craOptionsUICallback"
			-fileTypeChanged "craCurrentFileTypeOption"
			-fileFilter "All Files (*.*)(*);;Audio (*.wav)(*.wav);;FBX (*.fbx)(*.fbx);;Maya Binary (*.mb)(*.mb);;Maya Files (*.ma *.mb *.fbx *.wav *.obj) (*.ma *.mb *.fbx *.wav *.obj);;Maya Scenes (*.ma *.mb)(*.ma *.mb);;Maya ASCII (*.ma)(*.ma);;Wavefront Object (*.obj)(*.obj)"
			-selectFileFilter "Maya Files"
			-dir $startDir`;
	
	int $len = size($file);
		
	if( $len > 0 && $file[0] != "" )
	{
		string $path = fromNativePath($file[0]);
		file -f -ignoreVersion -o $path;
		addRecentFile($path, "Best Guess");
		print ("File: " + $path + "\n");
	}
		
}

global proc SaveScene()
{
	checkForUnknownNodes(); 
	FileMenu_SaveItem;
	
	string $craThumbnail = "craThumbnail";
	string $craData = ".craData";
	
	string $filename = `file -q -ns`;
	string $file = `file -q -loc`;
	string $fileDir = `craSceneToolsGetInfoPath`;
	
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craThumbnail + "/" + $filename +"/" );
	
	if(!`file -q -exists ( $finalPath + "/" + $filename + "_T0" + ".png" )`)
		craCreateSceneThumbnail 0;
	
	if(`optionVar -q craSceneThumbail0AutoUpdateOV`)
		craCreateSceneThumbnail 0;
		
	craRefreshSceneInfo;
	craRefreshPlaybastItems;
	
	if(`dockControl -exists craMayaFileBrowserDock`)
	{
		craMayaFileBrowserLoadFileList;
		craMayaFileBrowserSelectOpenedScene;
		craMayaFileBrowserViewThumbnailsUpdate;
	}
}		

global proc SaveSceneAs()
{
	checkForUnknownNodes(); 
	projectViewer SaveAs;
	
	string $craThumbnail = "craThumbnail";
	string $craData = ".craData";
	
	string $filename = `file -q -ns`;
	string $file = `file -q -loc`;
	string $fileDir = `craSceneToolsGetInfoPath`;
	
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craThumbnail + "/" + $filename +"/" );

	if(!`file -q -exists ( $finalPath + "/" + $filename + "_T0" + ".png" )`)
		craCreateSceneThumbnail 0;
	
	if(`optionVar -q craSceneThumbail0AutoUpdateOV`)
		craCreateSceneThumbnail 0;
	
	craRefreshSceneInfo;
	craRefreshPlaybastItems;
	
	if(`dockControl -exists craMayaFileBrowserDock`)
	{
		craMayaFileBrowserLoadFileList;
		craMayaFileBrowserSelectOpenedScene;
		craMayaFileBrowserViewThumbnailsUpdate;
	}
}

global proc craOptionsUISetup(string $parent)
{
	setParent $parent;
	
	formLayout -w 492 craCustomOpenSceneDialogFL;
	columnLayout -adj 1 craFilenameRL;
		frameLayout -mw 10 -mh 5 -lv 0 -bs "etchedIn";
			rowLayout -nc 2 -cw 1 70 -adj 2 craCurrentProjectNameRL;
				text -label "Project Path: " craCurrentProjectText;
				textField -ed 0 -text (toNativePath (`workspace -q -rd`)) craProjectText;
			setParent ..;
			rowLayout -nc 2 -cw 1 70 -adj 2 craFileInfoRL;
				text -label "Current File: ";
				textField -ed 0 craFilename;
			setParent ..;
		setParent ..;
	setParent ..;
	
	frameLayout -mw 2 -mh 2 -lv 0 -bs "etchedIn" craFileImageFL;
		tabLayout -w 485 -h 295 craFileImageTL;
			image -en 0 -w 480 -h 270 -image "invisibleCursor.png" "craNoSceneThumbnail";
		setParent ..;
		tabLayout -e -tabLabel "craNoSceneThumbnail" "No File Selected" craFileImageTL;
	setParent ..;
			
	columnLayout -adj 1 craSceneNoteCL;
		frameLayout -mw 10 -lv 0 -bs "etchedIn";
			rowLayout -nc 4 -adj 1;
				text -l "" ;
				text -l "Scene Note   " craNotaEscenaTXT;
				symbolButton -ann "Save Note" -image "save.png" -c "craSaveSceneNote";
				symbolButton -ann "Delete Note" -image "removeRenderable.png" -c "craDeleteSceneNote";
			setParent ..;
		setParent ..;
		separator -h 5 -style "none";
	setParent ..;
		
	scrollField -ww 1 -h 1 -fn "plainLabelFont" -ec "craSaveSceneNote" craSceneNoteSF;
	
	if(!`optionVar -exists craFileOptionsFLStateOV`)
		optionVar -iv craFileOptionsFLStateOV 0;	
	
	int $frameLayoutState = `optionVar -q craFileOptionsFLStateOV`;
	
	frameLayout 
		-cll 1
		-cl $frameLayoutState
		-mw 5
		-mh 5
		-l "File Options" 
		-cc "optionVar -iv craFileOptionsFLStateOV `frameLayout -q -cl craCustomOptionsFL`"
		-ec "optionVar -iv craFileOptionsFLStateOV `frameLayout -q -cl craCustomOptionsFL`"
	craCustomOptionsFL;
	
	rowLayout -nc 4 -adj 3;
		button  -l "Import" -c "craImportFile";
		button -l "Reference" -c "craReferenceFile";
		separator -st "none";
		frameLayout -bs "etchedIn" -h 23 -lv 0 -mw 20;
			iconTextButton -ann "Linked[In] Profile" -h 20 -st "textOnly" -l " About: Carlos Rico Adega © 2015  " -c "showHelp -absolute \"http://www.linkedin.com/pub/carlos-rico/6/58/325\"";
			popupMenu;
				menuItem -l "Free Downloads" -ann "Free downloads from CreativeCrash.com" -c "showHelp -absolute \"http://www.creativecrash.com/users/charliewales/contributions?tab=free_downloads\"";
			setParent -m ..;
		setParent ..;
	setParent ..;
	
	columnLayout -adj 1 craNamespaceCL;
		rowLayout -nc 2 -cw 1 100 -adj 2 craNamespaceRL;
			checkBox -l "Use namespace" -v 1 craUseNamespace;
			textField -ed 1 craNamespacePrefix;
		setParent ..;
	setParent ..;
	setParent ..;
	
	frameLayout -bs "etchedIn" -lv 0 -mw 1 craMoreOptionsRL;
		rowLayout -h 24 -nc 2 -adj 1;
			iconTextButton -h 20 -w 110 -style "iconAndTextHorizontal" -image "renderable_dim.png" -en 1 -bgc .4 .4 .4 -l "  No Playblast" -c "" craOpenSceneViewPlayblastBTN;
			iconTextButton -en 0 -w 26 -h 20 -bgc .4 .4 .4 -ann "Delete Scene Playblast" -i "removeRenderable.png"  -c "craOpenSceneDeletePlayblast" craOpenSceneDeletePlayblastBTN;
		setParent ..;
	setParent ..;
	
	formLayout -e
		
		-af craFilenameRL "top" 0
		-af craFilenameRL "right" 0
		-af craFilenameRL "left" 0
		
		-ac craFileImageFL "top" 5 craFilenameRL
		-af craFileImageFL "right" 0
		-af craFileImageFL "left" 0
		
		-ac craSceneNoteCL "top" 5 craFileImageFL
		-ac craSceneNoteCL "left" 5 craMoreOptionsRL
		-af craSceneNoteCL "right" 0
		
		-ac craSceneNoteSF "top" 0 craSceneNoteCL
		-ac craSceneNoteSF "bottom" 5 craCustomOptionsFL
		-af craSceneNoteSF "right" 0
		-af craSceneNoteSF "left" 0
		
		-ac craMoreOptionsRL "top" 7 craFileImageFL
		-af craMoreOptionsRL "left" 2
		
		-af craCustomOptionsFL "right" 0
		-af craCustomOptionsFL "left" 0
		-af craCustomOptionsFL "bottom" 0
	
	craCustomOpenSceneDialogFL;
	
}

global proc craOptionsUICallback(string $parent)
{
       setParent $parent;
	
       // When the UI is going away we usually save the state in optionVar's
       // int $intValue = `intSlider -query -value mbIntSlider`;
       // optionVar -intValue mbIntSliderOption $intValue;
}

global proc craOptionsUIInitValues(string $parent, string $filterType)
{
	setParent $parent;
	
	print ("Current file filter: " + $filterType + "\n");
	
	// Probably make sure optionVar's or whatever are initialized here...
	
}

global proc craCurrentFileTypeOption(string $parent, string $filterType)
{
	print ("File filter switched to: " + $filterType + "\n");
}

global proc craSelectionChangedCallback(string $parent, string $selection)
{	
	textField -e -ann `toNativePath $selection` -text `toNativePath $selection` craFilename;
	textField -e -ip 1 -text `basenameEx $selection` craNamespacePrefix;
	textField -e -text (toNativePath(`workspace -q -rd`)) craProjectText;
	string $fileDir = `craSceneToolsGetInfoPath`;
	
	string $craThumbnails[] = getFileList("-folder",($fileDir + "/.craData/craThumbnail/" + `basenameEx $selection` + "/"),"-filespec", (`basenameEx $selection` + "_T*" + ".png"));
	if(size($craThumbnails)){
		for($thumb in `tabLayout -q -ca craFileImageTL`)
			deleteUI $thumb;
		for ($i=0;$i<size($craThumbnails);$i++){
				string $craThumb = ( $fileDir + "/.craData/craThumbnail/" + `basenameEx $selection` + "/" + $craThumbnails[$i]);
				image -bgc 0 0 0 -w 480 -h 270 -p "craFileImageTL" -image ( $fileDir + "/.craData/craThumbnail/" + `basenameEx $selection` + "/" + $craThumbnails[$i]) ("craSceneThumbnail" + $i);
				string $buffer[];
				int $numTokens = `tokenize $craThumbnails[$i] "_" $buffer`;
				tabLayout -e -tabLabel ("craSceneThumbnail" + $i) ("  " + `substituteAllString $buffer[size($buffer)-1] ".png" ""` + "  ") craFileImageTL;
		}
	} else {
		for($thumb in `tabLayout -q -ca craFileImageTL`)
			deleteUI $thumb;
		image -w 480 -h 270 -en 0 -p "craFileImageTL" -image "invisibleCursor.png" craNoSceneThumbnail;
		tabLayout -e -tabLabel "craNoSceneThumbnail" "No Thumbnails Available" craFileImageTL;
	}
	
	textField -e -ip 1 craProjectText;
	textField -e -ip 1 craFilename; 
	craLoadSceneNote;
	
	
	if( file("-q","-ex", (`workspace -q -rd`+ "playblast/" + `basenameEx $selection` + ".avi"))
	|| file("-q","-ex", (`workspace -q -rd`+ "playblast/" + `basenameEx $selection` + ".mov")))
	{
		iconTextButton -e -style "iconAndTextHorizontal" -image "renderable.png" -en 1 -bgc 0.4 .8 0.4 -l " View Playblast" -c "craOpenSceneViewPlayblast" craOpenSceneViewPlayblastBTN;
		iconTextButton -e -en 1 -bgc .6 .4 .4 craOpenSceneDeletePlayblastBTN;
	}
	else
	{
		iconTextButton -e -style "iconAndTextHorizontal" -image "renderable_dim.png" -en 1 -bgc .4 .4 .4 -l "  No Playblast" -c "" craOpenSceneViewPlayblastBTN;
		iconTextButton -e -en 0 -bgc .4 .4 .4 craOpenSceneDeletePlayblastBTN;
	}
	
		
}

global proc craImportFile()
{
	if (`checkBox -q -v craUseNamespace`){
		file -f -namespace `textField -q -text craNamespacePrefix` -i `textField -q -text craFilename`;
		print ("// File " + `textField -q -text craFilename` + " imported. Namespace: " + `textField -q -text craNamespacePrefix`);
	} else {
		file -f -i `textField -q -text craFilename`;
		print ("// File " + `textField -q -text craFilename` + " imported. No namespace.");
	}
}

global proc craReferenceFile()
{
	if (`checkBox -q -v craUseNamespace`){
		file -f -namespace `textField -q -text craNamespacePrefix` -r `textField -q -text craFilename`;
		print ("// File " + `textField -q -text craFilename` + " referenced. Namespace: " + `textField -q -text craNamespacePrefix`);
	} else {
		file -f -r `textField -q -text craFilename`;
		print ("// File " + `textField -q -text craFilename` + " referenced. No namespace.");
	}
	
}

global proc craOpenSceneViewPlayblast()
{
	
	string $file;
	if( file("-q", "-exists",(`workspace -q -rd` + "playblast/" + basenameEx(`textField -q -text craFilename`) + ".avi")) )
		$file = (`workspace -q -rd` + "playblast/" + basenameEx(`textField -q -text craFilename`) + ".avi");
	else
		$file = (`workspace -q -rd` + "playblast/" + basenameEx(`textField -q -text craFilename`) + ".mov");
	print $file;
	
	if(`about -windows`)
		system ("start explorer " + `toNativePath $file`);
	if(`about -macOS`)
		system ("open " + `toNativePath $file`);
	if(`about -linux`)
		system ("xdg-open " + `toNativePath $file` + "&");
	
}

global proc craOpenSceneDeletePlayblast()
{
	//check for playblast
	string $craWorkspaceDir = `workspace -q -rd`;
	string $craFilenameNoExtension = basenameEx(`textField -q -text craFilename`);

	string $craPlayblastFiles = `workspace -q -rd` + "playblast/" + $craFilenameNoExtension;
	
	if( file("-q", "-exists", ($craPlayblastFiles + ".mov")) || file("-q", "-exists", ($craPlayblastFiles + ".avi")) )
	{
		if(`confirmDialog -title "Delete Playblast" -defaultButton "OK" -message "         Are you sure?" -cancelButton "Cancel" -dismissString "Cancel" -button "OK" -button "Cancel"` == "OK")
		{
			if( file("-q", "-exists", ($craPlayblastFiles + ".mov")) )
			{
				sysFile -delete ($craPlayblastFiles + ".mov");
				print ($craPlayblastFiles + ".mov" + " deleted.");
			}
			if( file("-q", "-exists", ($craPlayblastFiles + ".avi")) )
			{
				sysFile -delete ($craPlayblastFiles + ".avi");
				print ($craPlayblastFiles + ".avi" + " deleted.");
			}
			
			craRefreshSceneInfo;
			craRefreshPlaybastItems;
		}
	} else
		error "No scene playblast.";
}

global proc craSaveSceneNote()
{
	string $craData = "/.craData";
	string $craNote = "craNote";
	
	string $craFileName = `textField -q -tx craFilename`;
	string $fileDir = `craSceneToolsGetInfoPath`;

	
	string $filename = basenameEx(`textField -q -tx craFilename`);	
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craNote + "/");
	
	if(`filetest -d ($fileDir + $craData)`) {
		sysFile -md ($fileDir + "/.craData/craNote/");
		if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
	} else {
		sysFile -md ($fileDir + "/.craData");
		sysFile -md ($fileDir + "/.craData/craNote/");
		if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
	}
	
	if ( $filename != "" )
	{
		craWriteFileInfo;
		sysFile -md ( $finalPath );
		$craNoteFile = ( $finalPath + $filename );
		$craFileID = `fopen $craNoteFile "w"`;		
		string $craGetNoteText = `scrollField -q -tx craSceneNoteSF`;
		fprint $craFileID ( $craGetNoteText );	
		fclose $craFileID;  
		print ( "Note has been saved!" );
    
		craRefreshSceneInfo;
	}
	else
	{
		warning ( "Please select a file to write a note!" );
	}
}

global proc craLoadSceneNote()
{
	scrollField -e -cl craSceneNoteSF;
	string $craData = "/.craData";
	string $craNote = "craNote";
	string $filename = basenameEx(`textField -q -tx craFilename`);
	string $fileDir = `craSceneToolsGetInfoPath`;
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craNote + "/");
	
	string $fileNameWithPath = ( $finalPath + $filename );
	
	if ( `file -q -ex $fileNameWithPath` )
	{
		string $craNoteFile = ( $finalPath + "/" + $filename );
		int $crafileId =`fopen $craNoteFile "r"`;
		string $nextLine = `fgetline $crafileId`;
		scrollField -e -it $nextLine craSceneNoteSF;
		
		while ( size( $nextLine ) > 0 ) 
		{
		    print ( $nextLine );
		    $nextLine = `fgetline $crafileId`;
		    scrollField -e -it $nextLine craSceneNoteSF;
		}
				
		fclose $crafileId;
	}		
}

global proc craWriteFileInfo()
{	
	string $getUser = `getenv userName`;
	string $getDate = `system("date /t")`; 
	string $getTime = `system("time /t")`;
	string $line = "_______________________________________________________________";
	scrollField -e -it ( "\n" + $line + "\n" + "USER: " + $getUser + "\t    " + "DATE: " + strip($getDate) + "        TIME: " + strip($getTime) ) craSceneNoteSF;
}

global proc craDeleteSceneNote()
{
	
	string $craData = "/.craData";
	string $craNote = "craNote";
	
	string $fileDir = `craSceneToolsGetInfoPath`;

	string $selectedFile = basenameEx(`textField -q -tx craFilename`);
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craNote + "/");
		
	string $fileNameWithPath = ( $finalPath + $selectedFile );
	if ( `file -q -ex $fileNameWithPath` )
	{
		if(`confirmDialog -title "Delete Scene Note" -defaultButton "OK" -message "    Are you sure?" -cancelButton "Cancel" -dismissString "Cancel" -button "OK" -button "Cancel"` == "OK"){
			scrollField -e -cl craSceneNoteSF;
			sysFile -delete $fileNameWithPath;
			craRefreshSceneInfo;
		}
	}		
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// OpenScene end


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craSceneFileInfo start

global proc craSceneFileInfoOptionsUI()
{
	if (`window -exists craSceneFileInfoOptionsWin`)
		deleteUI craSceneFileInfoOptionsWin;

	window -t " Scene Info Options" -tlb 1 -s 0 craSceneFileInfoOptionsWin;
		frameLayout -lv 0 -bs "etchedIn" -mw 5 -mh 5 craSceneFileInfoOptionsMainFL;
			columnLayout -w 400 -adj 1 craSceneFileInfoOptionsMainCL;
				text -h 20 -l "Set thumbnails and notes storage paths relative to:";
				separator -h 10;
				
				rowLayout -nc 3;
                                        radioCollection craThumbsNotesPathsRC;
                                                radioButton -w 150 -ann (`workspace -q -rd` + "data") -label "Project Path" craSetRelativeProjectPath;
                                                radioButton -w 150 -ann (dirname(`file -q -loc`)) -label "Scene Path" craSetRelativeScenePath;
                                                radioButton -w 130 
                                                        -label "Custom Path"
                                                        -ann `optionVar -q craSceneToolsCustomInfoPathOV`
                                                        -onc "rowLayout -e -en 1 craSetCustomPathRL"
                                                        -ofc "rowLayout -e -en 0 craSetCustomPathRL"
                                                craSetCustomPath;
				setParent ..;

				separator -h 15;

				rowLayout -en 0 -nc 3 -adj 2 craSetCustomPathRL;
					text -l " Custom Path: "; 
					textField -ed 0 -text `optionVar -q craSceneToolsCustomInfoPathOV` craSceneToolsInfoCustomPathTF;
					iconTextButton -h 22 -w 22 -i "SP_DirOpenIcon.png" -ann "Choose Custom Info Path" -c "craSceneToolsSetCustomProjectsPath" craMayaFileBrowserOpenFolder;
				setParent ..;

				separator -h 10;
				rowLayout -nc 2 -adj 2;
                                        button -bgc .4 .6 .4 -w 200 -l "Save" -h 20 -c "craSetSceneFileInfoOptions";
                                        // button -bgc .4 .6 .4 -w 200 -l "Save and Close" -h 20 -c "craSetSceneFileInfoOptions";
                                        button -bgc .6 .4 .4 -l "Close" -h 20 -c "deleteUI craSceneFileInfoOptionsWin;";
				setParent ..;
			setParent ..;
		setParent ..;
		
	showWindow craSceneFileInfoOptionsWin;
	
	if(`optionVar -q craSceneInfoOptionsOV` == 1)
		radioCollection -e -select craSetRelativeScenePath craThumbsNotesPathsRC;
	else if(`optionVar -q craSceneInfoOptionsOV` == 2)
		radioCollection -e -select craSetCustomPath craThumbsNotesPathsRC;

	else
                radioCollection -e -select craSetRelativeProjectPath craThumbsNotesPathsRC;
}

global proc craSceneToolsSetCustomProjectsPath() 
{ 
	string $path[] =`fileDialog2 -caption "Select Scene Tools Info Path" -fileMode 3 -okCaption "OK"`;
	if( $path[0] != "" )
	{
                textField -e -tx (`fromNativePath $path[0]` + "/") -ann $path[0] craSceneToolsInfoCustomPathTF;
                optionVar -sv craSceneToolsCustomInfoPathOV $path[0]; 
                radioButton -e -ann `optionVar -q craSceneToolsCustomInfoPathOV` craSetCustomPath;
	}
} 

global proc craSetSceneFileInfoOptions()
{
	if(`radioButton -q -sl craSetRelativeProjectPath`)
	{
		optionVar -iv craSceneInfoOptionsOV 0;
		print ("\nScene Info Path set relative to current active Project: " + `craSceneToolsGetInfoPath` + ".craData/");
	}
	
	if(`radioButton -q -sl craSetRelativeScenePath`)
	{
		optionVar -iv craSceneInfoOptionsOV 1;
		print ("\nScene Info Path set relative to current opened scene: " + (dirname(`file -q -loc`) != "" ? (dirname(`file -q -loc`) + "/.craData/") : ""));
	}
	
	if(`radioButton -q -sl craSetCustomPath`)
	{
		optionVar -iv craSceneInfoOptionsOV 2;
		optionVar -sv craSceneToolsCustomInfoPathOV `textField -q -text craSceneToolsInfoCustomPathTF`;
		print ("\nScene Info Path set to " + `craSceneToolsGetInfoPath` + ".craData/");
	}
	
	craRefreshSceneInfo;
	
	if(`dockControl -q -exists craMayaFileBrowserDock`)
	{
		craMayaFileBrowserClearFileInfo;
		craMayaFileBrowserUpdateUI;
	}
	
	// deleteUI craSceneFileInfoOptionsWin;
}

global proc craSceneFileInfo()
{
	string $file = `file -q -loc`;
	int $floating = 0;					
	
	if(`dockControl -q -exists craSceneFileInfoDC`)
	{
		$floating = `dockControl -q -floating craSceneFileInfoDC`;
		dockControl -e -raise craSceneFileInfoDC;
		dockControl -e -visible 1 craSceneFileInfoDC;
		craRefreshSceneInfo;
	}
	else
	{
		if (`window -exists craSceneFileInfoWin`)
			deleteUI craSceneFileInfoWin;
		
		window -t "Scene Info" -tlb 0 -s 1 craSceneFileInfoWin;
		formLayout craSceneInfoFormL;
			frameLayout -lv 0 -mw 5 -mh 3 -cll 0 -cl 0 -bs "etchedIn" craSceneFileInfoFL;
				columnLayout -adj 1 craAssetFileInfoMainCL;
				rowLayout -nc 2 -adj 2;
						text -l "Project:   ";
						textField -ed 0 craProjectNamePathTF;
					setParent ..;
					rowLayout -nc 2 -adj 2;
						text -l "File Path: ";
						textField -ed 0 craSceneFileNamePathTF;
					setParent ..;
					rowLayout -nc 6 -adj 4;
						text -l "File Size:  ";
						textField -w 65 -ed 0 craSceneFileSizeTF;
						text -l "    Date:  " -ann "Creation Date";
						textField -ed 0 craSceneCreationDateTF;
						text -l "   Mod Date:  " -ann "Modification Date";
						textField -w 125 -ed 0 craSceneFileModDateTF;
					setParent ..;
				setParent ..;
			setParent ..;
				
			
		frameLayout -lv 0 -mw 5 -mh 3 -cll 0 -cl 0 -bs "etchedIn" craImageThumbFL;
			columnLayout -adj 1 craImageThumbCL;
				tabLayout -w 485 -h 295 craSceneFileInfoImageTL;
					image -en 0 -w 480 -h 270 -image "invisibleCursor.png" "craThumbnail0";
				setParent ..;
				tabLayout -e -tabLabel "craThumbnail0" "" craSceneFileInfoImageTL;
			
				rowLayout -nc 12 -adj 11;
					for( $i=0; $i<10 ;$i++ ){
						iconTextButton -bgc .4 .4 .4 -style "textOnly" -w 33 -h 15 -ann ( "Grab Screen Thumbnail " + string($i) ) -l ("T"+ string($i)) -c ("craCreateSceneThumbnail " + string($i)) ("craThumbnailBTN" + string($i));
						popupMenu -mm 0;
							menuItem -ann "Render Thumbnail" -l "Render" -c ("craRenderSceneThumbnail " + string($i) + " 1");
							menuItem -d 1;
							menuItem -ann "Delete Thumbnail" -l "Delete" -c ("craDeleteThumbnail " + string($i));
						setParent -m ..;
					}
					
					iconTextButton -mw 5 -i "renderable_dim.png" -style "iconAndTextHorizontal" -h 15 -en 1 -l "View Playblast" -c "craViewScenePlayblast" craSceneViewPlayblastBTN;
					iconTextButton -w 22 -h 15 -bgc .6 .4 .4 -ann "Delete Scene Playblast" -i "removeRenderable.png"  -c "craDeleteScenePlayblast" craSceneDeletePlayblastBTN;
				setParent ..;
			setParent ..;
		setParent ..;
			
		
		frameLayout -lv 0 -mw 5 -mh 2 -cll 0 -cl 0 -bs "etchedIn" craSceneNoteFL;
			columnLayout -adj 1 craSceneNoteCL;
				rowLayout -nc 5 -adj 4 ;
					text -l "Scene Note   " craNotaEscenaTXT;
					symbolButton -ann "Save Note" -image "save.png" -c ("craSceneInfoSaveNote \""  + `file -q -loc` + "\"");
					symbolButton -ann "Delete Note" -image "removeRenderable.png" -c ("craSceneDeleteSceneNote \""  + `file -q -loc` + "\"");
					text -l "";
				setParent ..;
			setParent ..;
		setParent ..;
		
		frameLayout -lv 0 -mw 5 -mh 5 -cll 0 -cl 0 -bs "etchedIn" craSceneNoteTextFL;
				scrollField -ww 1 -ec ("craSceneInfoSaveNote \""  + $file + "\"") -fn "plainLabelFont" craCurrentSceneNoteSF;
		setParent ..;
		
		frameLayout -lv 0 -mw 5 -mh 5 -cll 0 -cl 0 -bs "etchedIn" craCloseUIAndSJFL;
			rowLayout -nc 3 -adj 2;
				iconTextButton -w 20 -h 20 -i "refresh.png" -ann "Refresh UI" -c "craSceneUtilsInitMenuItems";
				nodeIconButton -h 20 -bgc .49 .3 .3 -l "Close UI" -style "textOnly" -ann "Closes the UI and deletes the scriptJob that reloads the UI when a new scene is opened" -c "deleteUI craSceneFileInfoDC";
				iconTextButton -w 20 -h 20 -i "pickOtherObj.png" -ann "About" -c "craAboutSceneTools";
			setParent ..;
		setParent ..;
		
		formLayout -e -w 505
			
			-af craCloseUIAndSJFL "top" 3
			-af craCloseUIAndSJFL "left" 3
			-af craCloseUIAndSJFL "right" 3
			
			-ac craSceneFileInfoFL "top" 3 craCloseUIAndSJFL
			-af craSceneFileInfoFL "right" 3
			-af craSceneFileInfoFL "left" 3
			
			-ac craImageThumbFL "top" 3 craSceneFileInfoFL
			-af craImageThumbFL "right" 3
			-af craImageThumbFL "left" 3
			
			-ac craSceneNoteFL "top" 3 craImageThumbFL 
			-af craSceneNoteFL "right" 3
			-af craSceneNoteFL "left" 3
			
			-ac craSceneNoteTextFL "top" 3 craSceneNoteFL
			-af craSceneNoteTextFL "left" 3
			-af craSceneNoteTextFL "right" 3
			-af craSceneNoteTextFL "bottom" 3
			
		craSceneInfoFormL;
		
		if(`getApplicationVersionAsFloat` == 2011)
		{
			dockControl 
				-area "right"
				-floating $floating
				-content "craSceneFileInfoWin"
				-allowedArea "left"
				-allowedArea "right"
				-l "Scene Info"
				craSceneFileInfoDC
			;
		}
		else
		{
			dockControl 
				-area "right"
				-floating $floating
				-content "craSceneFileInfoWin"
				-allowedArea "left"
				-allowedArea "right"
				-floatChangeCommand "craSceneInfoDockChange"
				-l "Scene Info" 
				craSceneFileInfoDC
			;
		}
		
		craSceneLoadSceneNote $file;
		craSceneUtilsInitMenuItems;
	}
}

global proc craSceneInfoDockChange()
{
	int $floatingState = `dockControl -q -floating craSceneFileInfoDC`;
	
	if($floatingState)
	{
		if(`getApplicationVersionAsFloat` == 2012)
			window -e -h 720 craSceneFileInfoDC;
		
		if(`getApplicationVersionAsFloat` >= 2013)
		{
			window -e -s 0 craSceneFileInfoDC;
			window -e -h 720 craSceneFileInfoDC;
			evalDeferred ("window -e -s 1 craSceneFileInfoDC");
		}
	}
}

global proc craSceneInfoSaveNote(string $file)
{
	if(`file -q -loc` != "unknown")
	{
		string $craData = "/.craData";
		string $craNote = "craNote";
		string $fileDir = `craSceneToolsGetInfoPath`;
		
		string $filename = basenameEx($file);
		string $finalPath = ( $fileDir + "/" + $craData + "/" + $craNote + "/");
		
		if(`filetest -d ($fileDir + $craData)`) {
			sysFile -md ($fileDir + "/.craData/craNote/");
			if(`about -win`)
				system( "attrib +H \"" + $fileDir + "/.craData\"" );
		} else {
			sysFile -md ($fileDir + "/.craData");
			sysFile -md ($fileDir + "/.craData/craNote/");
			if(`about -win`)
				system( "attrib +H \"" + $fileDir + "/.craData\"" );
			
		}
		
		if ( $filename != "" )
		{
			craSceneWriteFileInfo;
			sysFile -md ( $finalPath );
			$craNoteFile = ( $finalPath + $filename );
			$craFileID = `fopen $craNoteFile "w"`;		
			string $craGetNoteText = `scrollField -q -tx craCurrentSceneNoteSF`;
			fprint $craFileID ( $craGetNoteText );	
			fclose $craFileID;  
			print ( "Note has been saved!" );
		}
		else
		{
			warning ( "Please select a file to write a note!" );
		}
	}
	else
		warning ( "No scene opened!\n" );
}

global proc craSceneLoadSceneNote(string $file)
{
	scrollField -e -cl craCurrentSceneNoteSF;
	string $craData = "/.craData";
	string $craNote = "craNote";
	string $filename = basenameEx($file);
	string $fileDir = `craSceneToolsGetInfoPath`;
	
	string $finalPath = ( $fileDir + $craData + "/" + $craNote + "/");
	string $fileNameWithPath = ( $finalPath + $filename );
	
	if ( `file -q -ex $fileNameWithPath` && $filename != "")
	{
		int $craFileId =`fopen $fileNameWithPath "r"`;
		string $nextLine = `fgetline $craFileId`;
		scrollField -e -it $nextLine craCurrentSceneNoteSF;
		while ( size( $nextLine ) > 0 ) 
		{
		    print ( $nextLine );
		    $nextLine = `fgetline $craFileId`;
		    scrollField -e -it $nextLine craCurrentSceneNoteSF;
		}
		fclose $craFileId;
	}		
}

global proc craSceneWriteFileInfo()
{	
	string $getUser = `getenv userName`;
	string $getDate = `system("date /t")`; 
	string $getTime = `system("time /t")`;
	string $line = "_______________________________________________________________";
	scrollField -e -it ( "\n" + $line + "\n" + "USER: " + $getUser + "\t    " + "DATE: " + strip($getDate) + "        TIME: " + strip($getTime) ) craCurrentSceneNoteSF;
}

global proc craSceneDeleteSceneNote(string $file)
{
	string $craData = "/.craData";
	string $craNote = "craNote";
	string $fileDir = `craSceneToolsGetInfoPath`;
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craNote + "/");
		
	string $fileNameWithPath = ( $finalPath + basenameEx($file) );
	if ( `file -q -ex $fileNameWithPath` )
	{
		if(`confirmDialog -title "Delete Scene Note" -defaultButton "OK" -message "Are you sure?" -cancelButton "Cancel" -dismissString "Cancel" -button "OK" -button "Cancel"` == "OK"){
			scrollField -e -cl craCurrentSceneNoteSF;
			sysFile -delete $fileNameWithPath;
		}
	}		
}

global proc craRefreshSceneInfo()
{
	string $file = `file -q -loc`;
	string $fileDir = `craSceneToolsGetInfoPath`;

	if(`dockControl -exists craSceneFileInfoDC`)
	{
		string $craThumbnails[] = getFileList("-folder",( $fileDir + "/.craData/craThumbnail/" + `basenameEx $file` + "/"),"-filespec", (`basenameEx $file` + "_T*" + ".png"));
		if( !size($craThumbnails) )
                {
                        if(`optionVar -q craSceneInfoOptionsOV`)
                        {
                                $fileDir = `workspace -q -rd` + "data/" ;
                                $craThumbnails = getFileList("-folder",( $fileDir + "/.craData/craThumbnail/" + `basenameEx $file` + "/"),"-filespec", (`basenameEx $file` + "*_T?.png"));
                        }
                        else
                        {
                                if(`textField -q -exists craMayaFileBrowserFilePath`)
                                {
                                        $fileDir = `textField -q -tx craMayaFileBrowserFilePath`;
                                        $craThumbnails = getFileList("-folder",( $fileDir + "/.craData/craThumbnail/" + `basenameEx $file` + "/"),"-filespec", (`basenameEx $file` + "*_T?.png"));
                                }       
                        }
                }
                
		if(size($craThumbnails)){
			for($thumb in `tabLayout -q -ca craSceneFileInfoImageTL`)
				deleteUI $thumb;
			for ($i=0;$i<size($craThumbnails);$i++){
				string $thumbIndex = `substring $craThumbnails[$i] (size($craThumbnails[$i])-4) (size($craThumbnails[$i])-4)`;
				string $craThumb = ( $fileDir + "/.craData/craThumbnail/" + `basenameEx $file` + "/" + $craThumbnails[$i]);
				image -bgc 0 0 0 -w 480 -h 270 -p "craSceneFileInfoImageTL" -image ($fileDir+ "/.craData/craThumbnail/" + `basenameEx $file` + "/" + $craThumbnails[$i]) ("craThumbnail" + $thumbIndex);
				string $buffer[];
				int $numTokens = `tokenize $craThumbnails[$i] "_" $buffer`;
				tabLayout -e -tabLabel ("craThumbnail" + $thumbIndex)("  " + `substituteAllString $buffer[size($buffer)-1] ".png" ""` + "  ") craSceneFileInfoImageTL;
			}
		} else {
			for($thumb in `tabLayout -q -ca craSceneFileInfoImageTL`)
				deleteUI $thumb;
			
			image -w 480 -h 270 -en 0 -p "craSceneFileInfoImageTL" -image "invisibleCursor.png" craNoThumbnail;
			tabLayout -e -tabLabel "craNoThumbnail" "No Thumbnails Available" craSceneFileInfoImageTL;
			for($t=0;$t<10;$t++){
				iconTextButton -style "textOnly" -e -bgc 0.4 .4 0.4 ("craThumbnailBTN" + string($t));
			}
		}
		
		for($t=0;$t<10;$t++){
			iconTextButton -style "textOnly" -e -bgc 0.4 .4 0.4 ("craThumbnailBTN" + string($t));
			if( file("-q", "-exists", ( $fileDir + "/.craData/craThumbnail/" + basenameEx($file)  +"/" + basenameEx($file)  + "_T" + $t + ".png")))
				iconTextButton -style "textOnly" -e -bgc 0.4 .6 0.4 ("craThumbnailBTN" + string($t));
		}	
		
		//check for playblast
		if( file("-q","-ex", (`workspace -q -rd`+ "playblast/" + `basenameEx $file` + ".avi"))
			|| file("-q","-ex", (`workspace -q -rd`+ "playblast/" + `basenameEx $file` + ".mov")))
		{
			iconTextButton -e -image "renderable.png" -bgc 0.4 .8 0.4 -l " View Playblast" -c "craViewScenePlayblast" craSceneViewPlayblastBTN;
			iconTextButton -e -en 1 -bgc .6 .4 .4 craSceneDeletePlayblastBTN;
		}
		else
		{
			iconTextButton -e -image "renderable_dim.png" -bgc .4 .4 .4 -l "  No Playblast" -c "craCreateScenePlayblast" craSceneViewPlayblastBTN;
			iconTextButton -e -en 0 -bgc .4 .4 .4 craSceneDeletePlayblastBTN;
		}
		
		textField -e -text `workspace -q -rd` -ann `workspace -q -rd` -ed 0 craProjectNamePathTF;
		
		//file size and date
		if($file != "unknown"){
			python("import maya.cmds as mc\nimport os\ncraMayaFileBrowserFilename = \"" + `file -q -loc` + "\"\nsize = os.path.getsize(craMayaFileBrowserFilename)/(1024*1024.0)\nmc.textField('craSceneFileSizeTF', e=True, ann='%0.2f MB' % size, text='%0.2f MB' % size)");
			python("import os.path, time\nimport maya.cmds as mc\nmod_year, mod_mon, mod_day, mod_hour, mod_min, mod_sec, mod_wday, mod_yday, mod_isdst = time.gmtime(os.path.getmtime(craMayaFileBrowserFilename))\ncreat_year, creat_mon, creat_day, creat_hour, creat_min, creat_sec, creat_wday, creat_yday, creat_isdst = time.gmtime(os.path.getctime(craMayaFileBrowserFilename))\nmodTime = '%s/%s/%s  %s:%s:%s' % (str(mod_mon).zfill(2), str(mod_day).zfill(2),str(mod_year).zfill(2),str(mod_hour).zfill(2),str(mod_min).zfill(2),str(mod_sec).zfill(2))\ncreatTime = '%s/%s/%s  %s:%s:%s' % (str(creat_mon).zfill(2), str(creat_day).zfill(2), str(creat_year).zfill(2), str(creat_hour).zfill(2), str(creat_min).zfill(2), str(creat_sec).zfill(2))\nmc.textField('craSceneCreationDateTF', edit=True, ann=creatTime, text=creatTime)\nmc.textField('craSceneFileModDateTF', edit=True, ann=modTime, text=modTime)");
			textField -e -text $file -ann $file -ed 0 craSceneFileNamePathTF;
		} else {
			textField -e -text "" -ed 0 craSceneFileNamePathTF;
			textField -e -text "" -ed 0 craSceneFileSizeTF;
			textField -e -text "" -ed 0 craSceneCreationDateTF;
			textField -e -text "" -ed 0 craSceneFileModDateTF;
		}
		craSceneLoadSceneNote $file;
		dockControl -e -w 495 craSceneFileInfoDC;
		evalDeferred -lp "dockControl -e -raise craSceneFileInfoDC"; 
	}
}

global proc craCreateSceneThumbnail( int $number )
{
	if(`file -q -loc` == "unknown")	
	{
		if(`confirmDialog -m "Save Your Scene?" -t "Unsaved Scene" -b "OK" -b "Cancel" -db "OK"` == "OK")
		{
			SaveScene;
			if(`file -q -loc` == "unknown")
				error "Scene not saved.";
		}
		else
			error "Save your Scene first.";
	} 
	else
	{
		string $craData = "/.craData";
		string $craThumbnail = "craThumbnail";
		string $craNote = "craNote";
		string $currentFolder = `file -q -loc`;
		string $fileName = `file -q -ns`;
		
		string $fileDir = `craSceneToolsGetInfoPath`;
		
		if(`filetest -d ($fileDir + "/.craData")`) {
			sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
			if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
		} else {
			sysFile -md ($fileDir + "/.craData");
			sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
			if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
		}
		string $finalPath = ( $fileDir + "/" + $craData + "/" + $craThumbnail + "/" + $fileName +"/" );
		
		float $currentTime = `currentTime -query`;
		
		int $cw_imageFormat = `getAttr "defaultRenderGlobals.imageFormat"`;
		setAttr "defaultRenderGlobals.imageFormat" 32;
		
		string $craCurrentPanel = `getPanel -wf`;
		float $craCurrentOverscan = 0;
		string $craModelPanelCamera;
		int $craResGateState; 
        
		if(`modelPanel -exists $craCurrentPanel`)
		{
                        $craModelPanelCamera = `modelPanel -q -cam $craCurrentPanel`;
                        $craCurrentOverscan = `getAttr ($craModelPanelCamera + ".overscan")`;
                        setAttr ($craModelPanelCamera + ".overscan") 1;
                        $craResGateState = `camera -q -dr $craModelPanelCamera`;
                        camera -e -dr 0 $craModelPanelCamera;
		}
		
		$currentTime = `floor $currentTime`;
		int $craPlayblastStatus;
		
		if(`getApplicationVersionAsFloat` == 2011)
			//2011 ok
			$craPlayblastStatus = catchQuiet(`playblast -viewer 0 -p 100 -frame $currentTime -w 480 -h 270 -orn false -cf ( $finalPath + "/" + $fileName + "_T" + $number + ".png") -fmt "image"`);
		else if(`getApplicationVersionAsFloat` == 2012)	
			//2012 ok
			$craPlayblastStatus = catchQuiet(`playblast -viewer 0 -p 100 -st $currentTime -et $currentTime -w 480 -h 270 -orn false -f ( $finalPath + "/" + $fileName + "_T" + $number ) -compression "png" -fmt "image"`);
		else if(`getApplicationVersionAsFloat` > 2012)
			//2013 & 2014 ok
			$craPlayblastStatus = catchQuiet(`playblast -viewer 0 -p 100 -frame $currentTime -w 480 -h 270 -orn false -cf ( $finalPath + "/" + $fileName + "_T" + $number + ".png") -compression "png" -fmt "image"`);
		
		if($craPlayblastStatus)
		{
			print "No active view for playblast.\n";
			error "No active view for playblast.\n";
		}
		else
		{
			if(`getApplicationVersionAsFloat` == 2012)
				sysFile -rename ($finalPath + $fileName + "_T" + $number + ".png") ( $finalPath + $fileName + "_T" + $number + "." +  craNumberPadding($currentTime, 4, "0") + ".png");
		}
		
		if($craCurrentOverscan)
			setAttr ($craModelPanelCamera + ".overscan") $craCurrentOverscan;
	
		
		setAttr "defaultRenderGlobals.imageFormat" $cw_imageFormat;
		catchQuiet(`camera -e -dr $craResGateState $craModelPanelCamera`);
		
		if(`dockControl -q -exists craSceneFileInfoDC`)
		{
			if(`control -exists craNoThumbnail`)	
				deleteUI craNoThumbnail;
			
			if(`image -exists ("craThumbnail" + $number)`)
				deleteUI ("craThumbnail" + $number);
			
			image -w 480 -h 270 -p "craSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craThumbnail" + $number);
			
			
			int $thumbNum = size(`tabLayout -q -ca craSceneFileInfoImageTL`);
			int $tabNum = 0;
			for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
			{
				if(`image -exists ("craThumbnail" + $CurrentThumbnails)`)
					$tabNum++;
			}
			
			tabLayout -e -moveTab $thumbNum $tabNum craSceneFileInfoImageTL;
			
			tabLayout -e -tabLabel ("craThumbnail" + $number) ("  T" + $number + "  ") -st ("craThumbnail" + $number) craSceneFileInfoImageTL;
			iconTextButton -style "textOnly" -e -en 1 -bgc 0.4 .6 0.4 ("craThumbnailBTN" + string($number));
		
			tabLayout -e -st ("craThumbnail" + string($number)) craSceneFileInfoImageTL;
		}
		
		if(`dockControl -q -exists craMayaFileBrowserDock`)
		{
			if(`control -exists craMayaFileBrowserNoThumbnail`)	
				deleteUI craMayaFileBrowserNoThumbnail;
			
			if(`image -exists ("craMayaFileBrowserThumbnail" + $number)`)
				deleteUI ("craMayaFileBrowserThumbnail" + $number);
			
			image -w 480 -h 270 -p "craMayaFileBrowserSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craMayaFileBrowserThumbnail" + $number);
			
			
			int $thumbNum = size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`);
			int $tabNum = 0;
			for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
			{
				if(`image -exists ("craMayaFileBrowserThumbnail" + $CurrentThumbnails)`)
					$tabNum++;
			}
			
			tabLayout -e -moveTab $thumbNum $tabNum craMayaFileBrowserSceneFileInfoImageTL;
			
			tabLayout -e -tabLabel ("craMayaFileBrowserThumbnail" + $number) ("  T" + $number + "  ") -st ("craMayaFileBrowserThumbnail" + $number) craMayaFileBrowserSceneFileInfoImageTL;
			iconTextButton -e -en 1 -bgc 0.4 .6 0.4 ("craMayaFileBrowserThumbnailBTN" + string($number));
			craMayaFileBrowserViewThumbnailsUpdate;
		}
	}
}

global proc craSetRenderRes( float $width, float $height)
{
        setAttr "vraySettings.width" $width;
        setAttr "vraySettings.height" $height;
        setAttr "vraySettings.aspectRatio" ($width/$height);
        setAttr "defaultResolution.lockDeviceAspectRatio" 0;
        setAttr "defaultResolution.aspectLock" 0;
        setAttr "defaultResolution.width" $width;
        setAttr "defaultResolution.height" $height;
        setAttr "defaultResolution.deviceAspectRatio" ($width/$height);
}

global proc craRenderSceneThumbnail(int $number, int $mode)
{
	string $craData = "/.craData";
	string $craThumbnail = "craThumbnail";
	string $craNote = "craNote";
	string $fileName = `file -q -ns`;
	string $currentFolder = `file -q -loc`;
	string $fileDir = `craSceneToolsGetInfoPath`;
	string $currentRenderer = `currentRenderer`;
	int $closeRenderView = 1;
	if(`window -ex renderViewWindow`)
	        $closeRenderView = 0; 
	
	if(`filetest -d ($fileDir + "/.craData")`) {
		sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
		if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
	} else {
		sysFile -md ($fileDir + "/.craData");
		sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
		if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
	}
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craThumbnail + "/" + $fileName +"/" );
	
        	int $useVfb;
	int $prevWidth = `getAttr defaultResolution.width`;
	int $prevHeight = `getAttr defaultResolution.height`;
	int $prevFormat = `getAttr defaultRenderGlobals.outf`;
	float $prevDevAspectRatio = `getAttr "defaultResolution.deviceAspectRatio"`;
	float $prevPixelAspect = `getAttr "defaultResolution.pixelAspect"`;

	if ($currentRenderer == "vray")
	{
                if(`objExists vraySettings`)
                {
                        craSetRenderRes 480 270;
                        $useVfb = `getAttr "vraySettings.vfbOn"`;
                        setAttr "vraySettings.vfbOn" 0;
                }
        }

	string $shortName[];
	string $sceneName = `file -q -ns`;
	string $sceneThumbsDir = ( $fileDir + "/.craData/craThumbnail/");

	setAttr "defaultResolution.width" 480;
	setAttr "defaultResolution.height" 270;	
	setAttr "defaultResolution.deviceAspectRatio" 1.777;
	setAttr "defaultResolution.pixelAspect" 1;

	setAttr defaultRenderGlobals.outf 32;
	setAttr defaultRenderGlobals.imfkey -type "string" "";

	setAttr defaultRenderGlobals.outf 32;
	setAttr defaultRenderGlobals.imfkey -type "string" "";
	if($mode)
		RenderIntoNewWindow;
	
	renderWindowSaveImageCallback "renderView" ($finalPath + $sceneName + "_T" + $number )"PNG";
	
	setAttr defaultRenderGlobals.outf $prevFormat;
	setAttr defaultRenderGlobals.imfkey -type "string" "";
	setAttr defaultResolution.deviceAspectRatio $prevDevAspectRatio;
	setAttr defaultResolution.pixelAspect $prevPixelAspect;	
	
	setAttr "defaultResolution.width" $prevWidth;
	setAttr "defaultResolution.height" $prevHeight;
	
	if ($currentRenderer == "vray")
	{
                craSetRenderRes $prevWidth $prevWidth;
                setAttr "vraySettings.vfbOn" $useVfb;
        }
	
	if($closeRenderView)
	{
		if (`window -exists renderViewWindow`)
			evalDeferred "deleteUI renderViewWindow";
	}
	
	if(`dockControl -q -exists craSceneFileInfoDC`)
        {
                if(`control -exists craNoThumbnail`)	
                        deleteUI craNoThumbnail;
                
                if(`image -exists ("craThumbnail" + $number)`)
                        deleteUI ("craThumbnail" + $number);
                
                image -bgc 0 0 0 -w 480 -h 270 -p "craSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craThumbnail" + $number);
                int $thumbNum = size(`tabLayout -q -ca craSceneFileInfoImageTL`);
                int $tabNum = 0;
                for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
                {
                        if(`image -exists ("craThumbnail" + $CurrentThumbnails)`)
                                $tabNum++;
                }
                
                tabLayout -e -moveTab $thumbNum $tabNum craSceneFileInfoImageTL;
                
                tabLayout -e -tabLabel ("craThumbnail" + $number) ("  T" + $number + "  ") -st ("craThumbnail" + $number) craSceneFileInfoImageTL;
                iconTextButton -style "textOnly" -e -en 1 -bgc 0.4 .6 0.4 ("craThumbnailBTN" + string($number));
        
                tabLayout -e -st ("craThumbnail" + string($number)) craSceneFileInfoImageTL;
        }
		
        if(`dockControl -q -exists craMayaFileBrowserDock`)
        {
                if(`control -exists craMayaFileBrowserNoThumbnail`)	
                        deleteUI craMayaFileBrowserNoThumbnail;
                
                if(`image -exists ("craMayaFileBrowserThumbnail" + $number)`)
                        deleteUI ("craMayaFileBrowserThumbnail" + $number);
                
                image -bgc 0 0 0 -w 480 -h 270 -p "craMayaFileBrowserSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craMayaFileBrowserThumbnail" + $number);
                
                int $thumbNum = size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`);
                int $tabNum = 0;
                for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
                {
                        if(`image -exists ("craMayaFileBrowserThumbnail" + $CurrentThumbnails)`)
                                $tabNum++;
                }
                
                tabLayout -e -moveTab $thumbNum $tabNum craMayaFileBrowserSceneFileInfoImageTL;
                
                tabLayout -e -tabLabel ("craMayaFileBrowserThumbnail" + $number) ("  T" + $number + "  ") -st ("craMayaFileBrowserThumbnail" + $number) craMayaFileBrowserSceneFileInfoImageTL;
                iconTextButton -e -en 1 -bgc 0.4 .6 0.4 ("craMayaFileBrowserThumbnailBTN" + string($number));
                craMayaFileBrowserListPath;
        }
}

global proc craDeleteThumbnail(int $num)
{
	string $craData = "/.craData";
	string $craThumbnail = "craThumbnail";
	string $fileName = `file -q -ns`;
	string $currentFolder = `file -q -loc`;
	string $fileDir = `craSceneToolsGetInfoPath`;
	
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craThumbnail + "/" + $fileName + "/");
	string $fileNameWithPath = ( $finalPath + $fileName + "_T" + $num + ".png");
	if ( `file -q -ex $fileNameWithPath` )
	{
		sysFile -delete $fileNameWithPath;
		iconTextButton -style "textOnly" -e -bgc 0.4 .4 0.4 ("craThumbnailBTN" + string($num));
		if(`dockControl -q -exists craMayaFileBrowserDock` && `textField -q  -text craSceneFileNamePathTF` == `textField -q  -text craMayaFileBrowserSceneFileNamePathTF`)
		{
			deleteUI ("craMayaFileBrowserThumbnail" + string($num));
			iconTextButton -e -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($num));
		}

		deleteUI ("craThumbnail" + string($num));
		if(!size(`tabLayout -q -ca craSceneFileInfoImageTL`))
		{
			symbolButton -w 480 -h 270 -en 0 -p "craSceneFileInfoImageTL" -image "invisibleCursor.png" craNoThumbnail;
			tabLayout -e -tabLabel "craNoThumbnail" "No Thumbnails Available" craSceneFileInfoImageTL;
			if(`dockControl -q -exists craMayaFileBrowserDock`)
			{
				symbolButton -w 480 -h 270 -en 0 -p "craMayaFileBrowserSceneFileInfoImageTL" -image "invisibleCursor.png" craMayaFileBrowserNoThumbnail;
				tabLayout -e -tabLabel "craMayaFileBrowserNoThumbnail" "No Thumbnails Available" craMayaFileBrowserSceneFileInfoImageTL;
			}
		}
		if(`dockControl -q -exists craMayaFileBrowserDock` && `optionVar -q craMayaFileBrowserViewThumbsOV`)
                        craMayaFileBrowserListPath;
	}
}

global proc string craNumberPadding (string $str,int $pad,string $chr)
{
	string $return;
	
	for ($i=0;$i<$pad;$i++)
	{
		if (size($str)<=$i)
			$return += $chr;
	}
	
	return ($return + $str);
}

// craNumberPadding ("20", 4, "0")
// Result: 0020

global proc string craHUDNumberPadding (string $str,int $pad,string $chr)
{
	string $return;

	int $frames = `playbackOptions -q -max`;
	int $framesLength = (`playbackOptions -q -max` - `playbackOptions -q -min` + 1);
	// if(!$pad)
	if(size(string($frames)) > 4 && !$pad)
                $pad = size(string($frames));
	
	for ($i=0;$i<$pad;$i++)
	{
		if (size($str)<=$i)
			$return += $chr;
	}
	
	return ($return + $str + " / " + craNumberPadding ($frames, 4, "0") + " (" + string($framesLength) + " frames)");
}

global proc string craSceneHUDsTimecodeHUDConvert()
{
	string $hh,$mm,$ss,$ff;
	int $ct,$fps,$h,$m,$s,$f;
	
	$ct = `currentTime -q`;
	$fps = `currentTimeUnitToFPS`;
	$h = $ct / (60 * 60 * $fps);
	$m = ($ct % (60 * 60 * $fps)) / (60 * $fps);
	$s = ($ct % (60 * $fps)) / $fps;
	$f = $ct % $fps;
	
	$hh = craNumberPadding(string($h), 2, 0);
	$mm = craNumberPadding(string($m), 2, 0);
	$ss = craNumberPadding(string($s), 2, 0);
	$ff = craNumberPadding(string($f), 2, 0);
	
	return ($hh + ":" + $mm + ":" + $ss + ":" + $ff + " (" + $fps + " fps)");
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craSceneFileInfo end


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craCreateScenePlayblast start

global proc craCreateScenePlayblast()
{
	global string $gPlayBackSlider;
	
        string $panel = `getPanel -wf`;
        string $craCurrentRenderer;
        string $craCurrentCamera;
        
	if(!`window -q -exists craScenePlayblastWin`)
	{
		craCreateScenePlayblastWindow;
		$craCurrentCamera = `modelPanel -q -cam craPlayblastMPL`;
	}
	else
	{
		if(`file -q -loc` == "unknown")
			error "Save your Scene.";

		if(`modelPanel -exists craPlayblastMPL`)
			setFocus craPlayblastMPL;
		

		$craCurrentRenderer = `modelEditor -q -rendererName -panel "craPlayblastMPL"`;
		$craCurrentCamera = `modelPanel -q -cam craPlayblastMPL`;

		if(!file("-q", "-exists", (`workspace -q -rd` + "playblast/")))
			sysFile -makeDir (`workspace -q -rd` + "playblast/");
		
		if(`craCheckPlayblast`)
		{
			if(`confirmDialog -t "Warning" -ma "center" -m "Scene Playblast already exists, overwrite?" -b "Yes" -b "No" -db "Yes" -cb "No"` == "No")
				error "Create Scene Playblast cancelled.";
		}
		
		string $soundFileCheck = `timeControl -q -s $gPlayBackSlider`;
		
		if(`about -linux`)
		{
			if( $soundFileCheck == "")
				eval("playblast -fo -f (`workspace -q -rd` + \"playblast/\" +basenameEx(`file -q -shortName -sn`)) -format \"qt\" -compression \"png\" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 100 -quality 100");
			else
				eval("playblast -fo -f (`workspace -q -rd` + \"playblast/\" + basenameEx(`file -q -shortName -sn`)) -format \"qt\" -compression \"png\"  -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 100 -quality 100 -sound `timeControl -q -s $gPlayBackSlider`");
			craViewScenePlayblast;
		}
		else if(`about -win64` && `getApplicationVersionAsFloat` < 2013 )
		{
			if( $soundFileCheck == "")
				playblast -fo -f (`workspace -q -rd` + "playblast/" + basenameEx(`file -q -shortName -sn`)) -compression "MS-CRAM" -format "movie" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 100 -quality 100;
			else
				playblast -fo -f (`workspace -q -rd` + "playblast/" + basenameEx(`file -q -shortName -sn`)) -compression "MS-CRAM" -format "movie" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 100 -quality 100 -sound `timeControl -q -s $gPlayBackSlider`;
		}
		else
		{
			if( $soundFileCheck == "")
				playblast -compression "H.264" -fo -f (`workspace -q -rd` + "playblast/" + basenameEx(`file -q -shortName -sn`)) -format "qt" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 100 -quality 100;
			else
				playblast -compression "H.264" -fo -f (`workspace -q -rd` + "playblast/" + basenameEx(`file -q -shortName -sn`)) -format "qt" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 100 -quality 100 -sound `timeControl -q -s $gPlayBackSlider`;
		}
		
	
		if(`window -q -exists craScenePlayblastWin`)
		{
			iconTextButton -e -bgc .4 .6 .4 craCreateScenePlayblastBTN;
		}
	
		if(`dockControl -q -exists craSceneFileInfoDC`)
		{
			iconTextButton -e -en 1 -image "renderable.png" -bgc 0.4 .8 0.4 -l " View Playblast" -c "craViewScenePlayblast" craSceneViewPlayblastBTN;
			iconTextButton -e -en 1 -bgc 0.6 .4 0.4 craSceneDeletePlayblastBTN;
		} 
		
		if(`dockControl -q -exists craMayaFileBrowserDock` && `file -q -loc` == `textField -q -text craMayaFileBrowserSceneFileNamePathTF`)
		{
			iconTextButton -e -en 1 -image "renderable.png" -bgc 0.4 .8 0.4 -l " View Playblast" -c "craViewScenePlayblast" craMayaFileBrowserSceneViewPlayblastBTN;
			iconTextButton -e -en 1 -bgc .6 .4 .4 craMayaFileBrowserSceneDeletePlayblastBTN;
		}
		
		if(`dockControl -q -exists craMayaFileBrowserDock` && `optionVar -q craMayaFileBrowserViewThumbsOV`)
                        craMayaFileBrowserListPath;
		
		craSceneUtilsInitMenuItems;
		craRefreshPlaybastItems;
	}
	
	setFocus craPlayblastMPL;
	
	modelPanel -e -cam $craCurrentCamera craPlayblastMPL;
	
	setRendererInModelPanel `optionVar -q craScenePlayblastWinRendererOV` craPlayblastMPL;
}

global proc craCreateScenePlayblastWindow()
{
        if (!`optionVar -exists "craScenePlayblastWinRendererOV"`)
		optionVar -sv "craScenePlayblastWinRendererOV" "base_OpenGL_Renderer";
	
	if (!`optionVar -exists "craScenePlayblastWinPanelBarStateOV"`)
		optionVar -iv "craScenePlayblastWinPanelBarStateOV" 0;
	
	if(`window -q -exists craScenePlayblastWin`)
		deleteUI craScenePlayblastWin;
	
	window -tlb 1 -title ("Playblast / Shot Window") -mxb 0 -mnb 1 -s 0 craScenePlayblastWin;
	
	formLayout craPlayblastFormL;
                paneLayout craPlayblastPL;
                if(`modelPanel -exists craPlayblastMPL`)
                        catchQuiet ( `deleteUI -pnl craPlayblastMPL` );
                string $pane = `modelPanel -mbv 0 -p craPlayblastPL craPlayblastMPL`;
                
                modelEditor -e -da "smoothShaded" -displayTextures on -dl "default" $pane;
			
		if(size(`ls -type "camera" "shotCameraShape"`))
		      modelEditor -e -camera "shotCamera" craPlayblastMPL;
		else
		      modelEditor -e -camera "persp" craPlayblastMPL;
          
		setParent ..;
		setParent craPlayblastFormL;
	
                rowLayout -h 35 -nc 8 -adj 6 craTimelineRL;
                frameLayout -h 28 -bs "etchedIn" -lv 0 -mw 1 -mh 1 craTimelineOptionsFL;
                        iconTextButton -w 23 -h 23 -ann "Display Options" -image "out_lightList.png" -c "craCreateScenePlayblastOptions" craScenePlayblastOptionsBTN;
                setParent ..;
                frameLayout -h 28 -bs "etchedIn" -lv 0 -mw 1 -mh 1;
                        iconTextButton -w 23 -h 23 -ann "Viewport Renderer" -image "out_renderLayer.png" -c "craCreateScenePlayblastOptions";
                        string $craPanelRenderers[] = `modelEditor -q -rendererList craPlayblastMPL`;
                        string $craPanelRenderersUI[] = `modelEditor -q -rendererListUI craPlayblastMPL`;
                        popupMenu -b 1 ;
                                menuItem -l "Viewport Renderer" -en 0;
                                menuItem -d 1;
                                for($rendererNum=0; $rendererNum < size($craPanelRenderers);$rendererNum++ )
                                {
                                        if($craPanelRenderers[$rendererNum] == "stub_Renderer")
                                                continue;
                                        menuItem -l $craPanelRenderersUI[$rendererNum] -c ("setFocus craPlayblastMPL;setRendererInModelPanel " + $craPanelRenderers[$rendererNum] + " craPlayblastMPL;optionVar -sv craScenePlayblastWinRendererOV " + $craPanelRenderers[$rendererNum]);
                                        if($craPanelRenderers[$rendererNum] == "hwRender_OpenGL_Renderer")
                                                menuItem -l "HighQualityOptions" -ob 1 -c "hwRendererOptions 1 craPlayblastMPL";
                                        if($craPanelRenderers[$rendererNum] == "vp2Renderer")
                                                menuItem -l "HighQualityOptions" -ob 1 -c "createViewport20OptionsUI";
                                        if($craPanelRenderers[$rendererNum] == "ogsRenderer")
                                                menuItem -l "VP2 Options" -ob 1 -c "mpmViewport20options";
                                }
                        setParent -m ..;

                setParent ..;

                frameLayout -h 28 -bs "etchedIn" -lv 0 -mw 1 -mh 3;
                        rowLayout -nc 2;
                                iconTextButton -i "SP_DriveFDIcon.png" -ann "Save Viewport settings" -c "craPlayblastWindowSaveViewportSettings";
                                iconTextButton -i "SP_DirHomeIcon.png" -ann "Restore Viewport settings" -c "craPlayblastWindowRestoreViewportSettings";
                        setParent ..;
                setParent ..;
                
                frameLayout -h 28 -bs "etchedIn" -lv 0 -mw 2 -mh 1;
                        iconTextCheckBox 
                                -image "closeBar.png" 
                                -si "openBar.png" 
                                -w 13 -h 23 
                                -v (`optionVar -q "craScenePlayblastWinPanelBarStateOV"` ? 0 : 1) 
                                -ann "Toggle Viewport Bar" 
                                -cc "craPlayblastWinTogglePanelBar" 
                        craScenePlayblastOptionsBTN;
                setParent ..;

                        

                separator -w 1 -st "none";
                
                frameLayout -h 28 -bs "etchedIn" -lv 0 craTimelineFL;
			if(`getApplicationVersionAsFloat` == 2014)
				timePort -bgc 0.15 0.15 0.15 -h 25 craPlayblastTimePort;
			else
				timePort -bgc 0.4 0.4 0.4 -h 25 craPlayblastTimePort;
			popupMenu -p craPlayblastTimePort -mm 1;
				menuItem -l "Start" -rp "N" -c "playButtonStart" ;
				menuItem -l "Play" -rp "S" -c "playButtonForward" craPlayblastViewPlayBTN;
				menuItem -l "Step Backward" -rp "W" -c "playButtonStepBackward" ;		
				menuItem -l "Step Forward" -rp "E" -c "playButtonStepForward" ;
				menuItem -l "Previous Keyframe" -rp "NW" -c "currentTime -edit `findKeyframe -timeSlider -which previous`" ;	
				menuItem -l "Next Keyframe" -rp "NE" -c "currentTime -edit `findKeyframe -timeSlider -which next`" ;
				menuItem -l "Start Time Dragger" -rp "SW" -c "storeLastAction( \"restoreLastContext \" + `currentCtx` );setToolTo TimeDragger" ;
				menuItem -l "Stop Time Dragger" -rp "SE" -c "invokeLastAction" ;
			setParent -m ..;
		setParent ..;
		
		separator -hr 1 -w 1 -st "none";
		
		frameLayout -bs "etchedOut" -h 30 -lv 0 -mw 2 -mh 2 craTimeline2FL;
			rowLayout -h 26 -nc 10 -adj 2 craTimelineRL;
				symbolButton -w 23 -h 23 -image "timerew.png"  -c "playButtonStart" ;
				symbolButton -w 23 -h 23 -image "timeplay.png" -c "playButtonForward" craPlayblastViewPlayBTN;
				symbolButton -w 23 -h 23 -image "timeend.png" -c "playButtonStepBackward" ;		
				symbolButton -w 23 -h 23 -image "timestart.png" -c "playButtonStepForward" ;
				symbolButton -w 23 -h 23 -image "timeprev.png"  -c "currentTime -edit `findKeyframe -timeSlider -which previous`" ;	
				symbolButton -w 23 -h 23 -image "timenext.png"  -c "currentTime -edit `findKeyframe -timeSlider -which next`" ;
				separator -hr 1 -w 5 -st "none";
				iconTextButton -bgc .26 .26 .26 -st "iconOnly" -w 23 -h 23 -ann "Create Playblast" -image "LearningMovies.png" -c "craCreateScenePlayblast" craCreateScenePlayblastBTN;
				popupMenu;
					menuItem -l "View Playblast" -en `craCheckPlayblast` -c "craViewScenePlayblast" craPlayblastWinViewPlayblastMI;
					menuItem -d 1;
					menuItem -l "Delete Playblast" -en `craCheckPlayblast` -c "craDeleteScenePlayblast" craPlayblastWinDeletePlayblastMI;
				setParent -m ..;
				separator -hr 1 -w 1 -st "none";
				iconTextButton -w 23 -h 23 -ann "Select Camera" -image "Camera.png" -c "craSelectPlayBlastCameraUI" craScenePlayblastCameraBTN;
				popupMenu -p craScenePlayblastCameraBTN -pmc "craPopulateCameras" craSceneCamerasMM;
			setParent ..;
		setParent ..;
	setParent ..;
	
	setParent craPlayblastFormL;
	
	formLayout -e
		-af craPlayblastPL "top" 0
		-af craPlayblastPL "left" 0
		-af craPlayblastPL "right" 0
		-ac craPlayblastPL "bottom" 0 craTimelineRL
		
		-af craTimelineRL "left" 2
		-af craTimelineRL "right" 2
		-af craTimelineRL "bottom" 0
		
	craPlayblastFormL;
	
	if(`craCheckPlayblast`)
		iconTextButton -e -bgc .4 .6 .4 craCreateScenePlayblastBTN;
	
	catchQuiet(`condition -dependency "playingBack" -script "craPlayblackCondition" "craPlaybackIconsCondition"`);
	
	craRefreshPlaybastItems;
	craSetModelPanelFlags;
	
	setRendererInModelPanel `optionVar -q craScenePlayblastWinRendererOV` craPlayblastMPL;
	
	// frameLayout -e -cl `optionVar -q "craScenePlayblastWinPanelBarStateOV"` `modelPanel -q -barLayout craPlayblastMPL`;
	frameLayout -e -h 19 
                -vis (`optionVar -q "craScenePlayblastWinPanelBarStateOV"` ? 0 : 1)
                -cl `optionVar -q "craScenePlayblastWinPanelBarStateOV"` `modelPanel -q -barLayout craPlayblastMPL`;
	evalDeferred -lp "showWindow craScenePlayblastWin";
}

global proc craPlayblastWindowSaveViewportSettings()
{
        if(`modelEditor -ex craPlayblastMPL`)
        {
                optionVar -rm craPlayblastPanelPrefsOV;
                string $displayLights = "\"" + `modelEditor -q -displayLights craPlayblastMPL` + "\"";
                string $displayAppearance = `modelEditor -q -displayAppearance craPlayblastMPL`;
                string $useDefaultMaterial = `modelEditor -q -useDefaultMaterial craPlayblastMPL` ? "on" : "off";
                string $displayTextures = `modelEditor -q -displayTextures craPlayblastMPL` ? "on" : "off";
                string $shadows = `modelEditor -q -shadows craPlayblastMPL` ? "on" : "off";
                string $wireframeOnShaded = `modelEditor -q -wireframeOnShaded craPlayblastMPL` ? "on" : "off";
                // camera -e -depthOfField 1 `modelPanel -q -cam craPlayblastMPL`;
                string $ssaoEnable = `getAttr hardwareRenderingGlobals.ssaoEnable` ? "on" : "off";
                string $motionBlurEnable = `getAttr hardwareRenderingGlobals.motionBlurEnable`  ? "on" : "off";
                string $multiSampleEnable = `getAttr hardwareRenderingGlobals.multiSampleEnable`  ? "on" : "off";
                
                for( $viewportPref in {$displayLights, $displayAppearance, $useDefaultMaterial, $displayTextures, $shadows, $wireframeOnShaded, $ssaoEnable, $motionBlurEnable, $multiSampleEnable} )
                    optionVar -sva craPlayblastPanelPrefsOV $viewportPref;
                
                // print (stringArrayToString(`optionVar -q craPlayblastPanelPrefsOV`, " "));
                print "\nViewport settings saved";
        }
}

global proc craPlayblastWindowRestoreViewportSettings()
{
        string $craViewportPrefs[] = {"-displayLights", "-displayAppearance", "-useDefaultMaterial", "-displayTextures", "-shadows", "-wireframeOnShaded", ".ssaoEnable", ".motionBlurEnable", ".multiSampleEnable"};
        string $craViewportPrefsValues[] = `optionVar -q craPlayblastPanelPrefsOV`;
        
        for($crai=0; $crai<6;$crai++)
               eval("modelEditor -e " + $craViewportPrefs[$crai] + " " + $craViewportPrefsValues[$crai] + " craPlayblastMPL");
        
        for($crai=6; $crai<9;$crai++)
                eval("setAttr hardwareRenderingGlobals" + $craViewportPrefs[$crai] + " " + $craViewportPrefsValues[$crai]);
        print "\nViewport settings restored";
}


global proc craPlayblastWinTogglePanelBar()
{
        if( frameLayout("-q", "-cl", `modelPanel -q -barLayout craPlayblastMPL`))
        {
                optionVar -iv "craScenePlayblastWinPanelBarStateOV" 0;
                evalDeferred -lp "window -e -s 1 craScenePlayblastWin;window -e -h (`window -q -h craScenePlayblastWin` + 19) craScenePlayblastWin;";
                evalDeferred -lp "window -e -s 0 craScenePlayblastWin";
                frameLayout("-e", "-cl", 0, "-vis", 1, `modelPanel -q -barLayout craPlayblastMPL`);
                
        }
        else
        {
                optionVar -iv "craScenePlayblastWinPanelBarStateOV" 1;
                evalDeferred -lp "window -e -s 1 craScenePlayblastWin;window -e -h (`window -q -h craScenePlayblastWin` - 19) craScenePlayblastWin;";
                evalDeferred -lp "window -e -s 0 craScenePlayblastWin";
                frameLayout("-e", "-cl", 1, "-vis", 0, `modelPanel -q -barLayout craPlayblastMPL`);
        }
}

global proc craSetModelPanelFlags()
{
        craInitDisplayOptions;
 
        int $craDisplayOptions[] = `optionVar -q craPlayblastModelPanelFlagsOV`;
        
        string $craModelPanelFlags[];
        string $craVisibleObjects[];
   
        if(`getApplicationVersionAsFloat` == 2011)
	{
		$craModelPanelFlags = { "CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-manipulators", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay" };
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Manipulators", "NURBS CVs", "NURBS Hulls", "Grid", "HUD"};
	}
	if(`getApplicationVersionAsFloat` == 2012)
	{
		$craModelPanelFlags = { "CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-motionTrails", "-manipulators", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay"};
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Motion Trails", "Manipulators", "NURBS CVs", "NURBS Hulls", "Grid", "HUD"};
	}	
	if(`getApplicationVersionAsFloat` >= 2013)
	{
		$craModelPanelFlags = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-motionTrails", "-manipulators", "-clipGhosts", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay", "-imagePlane"};
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Motion Trails", "Manipulators", "Clip Ghosts", "NURBS CVs", "NURBS Hulls", "Grid", "HUD", "Image Planes"};
	}
	
	for( $i=0; $i < size($craDisplayOptions) ;$i++ )
	{
                if($i == 0 || $i == 1 || $i == 2)
                        continue;
                modelEditor -e $craModelPanelFlags[$i] $craDisplayOptions[$i] craPlayblastMPL;
	}
  
}

global proc craRefreshPlaybastItems()
{
	global int $gUseNewScenePanelConfig;
        
	if(`craCheckPlayblast`)
        {
                if(`iconTextButton -exists craPlayblastWinViewPlayblastCBBTN`)
                {
                        iconTextButton -e -bgc .4 .6 .4 craPlayblastWinViewPlayblastCBBTN;
                        menuItem -e -en 1 craPlayblastButtonViewPlayblastCBMI;
                        menuItem -e -en 1 craPlayblastButtonDeletePlayblastCBMI;
                }
        }
        else
        {
                if(`iconTextButton -exists craPlayblastWinViewPlayblastCBBTN`)
                {
                        iconTextButton -e -bgc .26 .26 .26 craPlayblastWinViewPlayblastCBBTN;
                        menuItem -e -en 0 craPlayblastButtonViewPlayblastCBMI;
                        menuItem -e -en 0 craPlayblastButtonDeletePlayblastCBMI;
                }
        }
        
	if(`window -q -exists craScenePlayblastWin`)
	{	
		if($gUseNewScenePanelConfig)
		{
			if(`modelPanel -exists craPlayblastMPL`)
				catchQuiet ( `deleteUI -pnl craPlayblastMPL` );
			string $pane = `modelPanel -mbv 0 -p craPlayblastPL craPlayblastMPL`;
			frameLayout -e -cl `optionVar -q craScenePlayblastWinPanelBarStateOV` `modelPanel -q -barLayout craPlayblastMPL`;
			modelEditor -e -da "smoothShaded" -displayTextures on -dl "default" $pane;	
			evalDeferred("modelPanel -e -mbv 0 craPlayblastMPL");
		}
    
		if(`modelPanel -exists craPlayblastMPL`)
		{
			setFocus craPlayblastMPL;
			if(size(`ls -type "camera" shotCameraShape`))
				modelPanel -e -camera "shotCamera" -mbv 0 craPlayblastMPL;
                        craSetModelPanelFlags;
		}
		
		if(`craCheckPlayblast`) 
		{
			iconTextButton -e -bgc .4 .6 .4 craCreateScenePlayblastBTN;
			menuItem -e -en 1 craPlayblastWinViewPlayblastMI;
			menuItem -e -en 1 craPlayblastWinDeletePlayblastMI;
		}
		else
		{
			iconTextButton -e -bgc .26 .26 .26 craCreateScenePlayblastBTN;
			menuItem -e -en 0 craPlayblastWinViewPlayblastMI;
			menuItem -e -en 0 craPlayblastWinDeletePlayblastMI;
		}
	}
}

global proc craCreateScenePlayblastOptions()
{
	if (`window -exists craScenePlayblastOptions`)
		deleteUI craScenePlayblastOptions;
	
	craInitDisplayOptions;
	
	window -t "Display Options" -tlb 1 -mnb 0 -mxb 0 -s 0 craScenePlayblastOptions;
	
	string $craVisibleObjects[];
	string $craModelPanelFlags[];
	
	if(`getApplicationVersionAsFloat` == 2011)
	{
		$craModelPanelFlags = { "CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-manipulators", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay" };
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Manipulators", "NURBS CVs", "NURBS Hulls", "Grid", "HUD"};
	}
	if(`getApplicationVersionAsFloat` == 2012)
	{
		$craModelPanelFlags = { "CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-motionTrails", "-manipulators", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay"};
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Motion Trails", "Manipulators", "NURBS CVs", "NURBS Hulls", "Grid", "HUD"};
	}	
	if(`getApplicationVersionAsFloat` >= 2013)
	{
		$craModelPanelFlags = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-motionTrails", "-manipulators", "-clipGhosts", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay", "-imagePlane"};
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Motion Trails", "Manipulators", "Clip Ghosts", "NURBS CVs", "NURBS Hulls", "Grid", "HUD", "Image Planes"};
	}
	
	int $craInitModelPanelFlagsOV[] = `optionVar -q craPlayblastModelPanelFlagsOV`;
	
	frameLayout -lv 0 -bs "etchedOut" -mw 5 -mh 5 craPlayPlayblastOptionsMainFL;
		columnLayout -adj 1 craPlayblastOptionsMainCL;
			rowLayout -nc 2 -adj 2 craPlayblastCameraWidth;
				text -w 100 -l "Resolution Width";
				intField -w 40 -cc "craUpdateDisplayOptionsOV;craInitDisplayOptions;" -v $craInitModelPanelFlagsOV[0] craPlayblastCameraWidthIF;
			setParent ..;
			rowLayout -nc 2 -adj 2 craPlayblastCameraHeight; 
				text -w 100 -l "Resolution Height";
				intField -w 40 -cc "craUpdateDisplayOptionsOV;craInitDisplayOptions;" -v $craInitModelPanelFlagsOV[1] craPlayblastCameraHeightIF;
			setParent ..;
			
			separator -en 0 -h 10;
			
			for( $i=2; $i<size($craVisibleObjects) ;$i++ )
			{
				if($i == 2)
				{
					checkBox -l $craVisibleObjects[$i] -v $craInitModelPanelFlagsOV[$i] -onc "checkBox -e -v 1 craHUDCB;if(`modelEditor -exists craPlayblastMPL`) modelEditor -e  -headsUpDisplay -1 craPlayblastMPL" -cc ("craSceneInfoHUDs #1;menuItem -e -cb #1 craSceneInfoHUDsMI;craUpdateDisplayOptionsOV") craSceneInfoHUDsCB;
					separator -en 0 -h 5;
					continue;
				}
					
				checkBox -l $craVisibleObjects[$i] -v $craInitModelPanelFlagsOV[$i]  -cc ("if(`modelEditor -exists craPlayblastMPL`) modelEditor -e " + $craModelPanelFlags[$i] + " #1 craPlayblastMPL;craUpdateDisplayOptionsOV") ("cra" + $craVisibleObjects[$i] + "CB");
				if(`modelEditor -exists craPlayblastMPL`)
					modelEditor -e $craModelPanelFlags[$i] $craInitModelPanelFlagsOV[$i] craPlayblastMPL;
				
				if($craVisibleObjects[$i] == "Manipulators" && `getApplicationVersionAsFloat` < 2013)
					separator -en 0 -h 5;
				
				if($craVisibleObjects[$i] == "Clip Ghosts")
					separator -en 0 -h 5;
			}
			
			separator -en 0 -h 10;
				button -l "OK" -bgc .4 .5 .4 -c "deleteUI craScenePlayblastOptions";
		setParent ..;
	setParent ..;
	
	showWindow craScenePlayblastOptions;
	
	if(`window -q -exists craScenePlayblastWin`)
	{
		if(`window -q -exists craScenePlayblastOptions`)
		{
			int $pos[] = `window -q -tlc craScenePlayblastWin`;
			window -e -tlc $pos[0] $pos[1] craScenePlayblastOptions;
		}
	}
	if(!`about -windows`)
		showWindow craScenePlayblastOptions;
}
global proc craPlayblackCondition()
{
	
	if(`symbolButton -exists craPlayblastViewPlayBTN`)
	{
		if( `symbolButton -q -image craPlayblastViewPlayBTN` == "timeplay.png")
			symbolButton -e -image "timestop.png" craPlayblastViewPlayBTN;
		else 
			symbolButton -e -image "timeplay.png" craPlayblastViewPlayBTN;
	}
}

global proc craPopulateCameras()
{
	
	popupMenu -e -dai craSceneCamerasMM;
	
	string $allCameras[] = `ls -type "camera"`;
	string $defaultCameras[] = {"perspShape", "topShape", "frontShape", "sideShape"};
	string $userCameras[] =  sort(`stringArrayRemove $defaultCameras $allCameras`);
	
	for($i in $userCameras)
	{
		string $parent[] = `listRelatives -p $i`;
		menuItem -p "craSceneCamerasMM" -l $parent[0] -c ("modelEditor -e -camera " + $parent[0] + " craPlayblastMPL");
	
	
	}
	
	menuItem -d 1 -p "craSceneCamerasMM";
	
	for($i in $defaultCameras)
	{
		string $parent[] = `listRelatives -p $i`;
		menuItem -p "craSceneCamerasMM" -l $parent[0] -c ("modelEditor -e -camera " + $parent[0] + " craPlayblastMPL");
	}
	
}

global proc craSelectPlayBlastCameraUI()
{
	
	if (`window -exists craSelectPlayBlastCameraWin`)
		deleteUI craSelectPlayBlastCameraWin;
	
	string $allCameras[] = `ls -type "camera"`;
	string $defaultCameras[] = {"perspShape", "topShape", "frontShape", "sideShape"};
	string $userCameras[] =  sort(`stringArrayRemove $defaultCameras $allCameras`);
	
	
	window -t " Playblast Camera" -tlb 1 -s 0 -vis 0 craSelectPlayBlastCameraWin;
	frameLayout -lv 0 -bs "etchedOut" -mw 5 -mh 5 craSelectPlayBlastCameraMainFL;
		columnLayout -adj 1 craSelectPlayBlastCameraMainCL;
			text -label "User Cameras";
			separator -h 5 -st "none";
			for($i in $userCameras)
			{
				string $parent[] = `listRelatives -p $i`;
				button -l $parent[0] -c ("if(`modelEditor -exists craPlayblastMPL`); modelEditor -e -camera " + $parent[0] + " craPlayblastMPL");
			}
			separator -h 10;
			text -label "Startup Cameras";
			separator -h 5 -st "none";
			for($i in $defaultCameras)
			{
				string $parent[] = `listRelatives -p $i`;
				button -l $parent[0] -c ("if(`modelEditor -exists craPlayblastMPL`); modelEditor -e -camera " + $parent[0] + " craPlayblastMPL");
			}
			separator -h 10;
			button -w 100 -bgc .4 .5 .4 -l "OK" -c "deleteUI craSelectPlayBlastCameraWin";
		setParent ..;
	setParent ..;

	showWindow craSelectPlayBlastCameraWin;
	
	if(`window -q -exists craScenePlayblastWin`)
	{
		if(`window -q -exists craSelectPlayBlastCameraWin`)
		{
			int $pos[] = `window -q -tlc craScenePlayblastWin`;
			window -e -tlc $pos[0] ($pos[1] + `window -q -w craScenePlayblastWin` - `window -q -w craSelectPlayBlastCameraWin`) craSelectPlayBlastCameraWin;
		}
	}
	
	if(!`about -windows`)
		showWindow craSelectPlayBlastCameraWin;
}

global proc craSelectPlayBlastCamera()
{
	
	string $cameras[] = `ls -type "camera"`;
	
	for($i in $cameras)
	{
		string $parent[] = `listRelatives -p $i`;
		menuItem -l $parent[0] -c ("modelEditor -e -camera " + $parent[0] + " craPlayblastMPL");
	}
	
}

global proc craUpdateDisplayOptionsOV()
{
	if(`columnLayout -exists craPlayblastOptionsMainCL`)
	{
		string $flagCB[] = `columnLayout -q -ca craPlayblastOptionsMainCL`;
		int $flagsValue[];
							
		for($flag in $flagCB)
		{
			if($flag == "craPlayblastCameraWidth" || $flag == "craPlayblastCameraHeight"){
				$flagsValue[size($flagsValue)] = `intField -q -v ($flag + "IF")` ;
				continue;
			}
				
			if(`checkBox -exists $flag`)
				$flagsValue[size($flagsValue)] = `checkBox -q -v $flag`;
		}
		
		optionVar -remove craPlayblastModelPanelFlagsOV;
		
		for($flagValue in $flagsValue)
			optionVar -iva craPlayblastModelPanelFlagsOV $flagValue;
	}
}

global proc craInitDisplayOptions()
{
	if(!`optionVar -exists craPlayblastModelPanelFlagsOV`)
	{
	        int $craInitModelPanelFlagsOV[];
	        
		if(`getApplicationVersionAsFloat` == 2011)
			$craInitModelPanelFlagsOV = {720, 404, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
		
		if(`getApplicationVersionAsFloat` == 2012)
			$craInitModelPanelFlagsOV = {720, 404, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
		
		if(`getApplicationVersionAsFloat` >= 2013)
			$craInitModelPanelFlagsOV = {720, 404, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
		
		for($value in $craInitModelPanelFlagsOV)
			optionVar -iva craPlayblastModelPanelFlagsOV $value;
	}
	
        if(!`optionVar -exists craPlayblastPanelPrefsOV`)
                for($pref in {"\"default\"", "smoothShaded", "off", "on", "off", "off", "off", "off", "off"})
                        optionVar -sva craPlayblastPanelPrefsOV $pref;
	
        string $craModelPanelFlags[];
        string $craVisibleObjects[];
        
        if(`getApplicationVersionAsFloat` == 2011)
	{
		$craModelPanelFlags = { "CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-manipulators", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay" };
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Manipulators", "NURBS CVs", "NURBS Hulls", "Grid", "HUD"};
	}
	if(`getApplicationVersionAsFloat` == 2012)
	{
		$craModelPanelFlags = { "CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-motionTrails", "-manipulators", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay"};
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Motion Trails", "Manipulators", "NURBS CVs", "NURBS Hulls", "Grid", "HUD"};
	}	
	if(`getApplicationVersionAsFloat` >= 2013)
	{
		$craModelPanelFlags = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "-nurbsCurves", "-nurbsSurfaces", "-polymeshes", "-subdivSurfaces", "-planes", "-lights", "-cameras", "-joints", "-ikHandles", "-deformers", "-dynamics", "-fluids", "-hairSystems", "-follicles", "-nCloths", "-nParticles", "-nRigids", "-dynamicConstraints", "-locators", "-dimensions", "-pivots", "-handles", "-textures", "-strokes", "-motionTrails", "-manipulators", "-clipGhosts", "-controlVertices", "-hulls", "-grid", "-headsUpDisplay", "-imagePlane"};
		$craVisibleObjects = {"CameraPixelWidth", "CameraPixelHeight", "Scene Info HUDs", "NURBS Curves", "NURBS Surfaces", "Polygons", "Subdiv Surfaces", "Planes", "Lights", "Cameras", "Joints", "IK Handles", "Deformers", "Dynamics", "Fluids", "Hair Systems", "Follicles", "nCloths", "nParticles", "nRigids", "Dynamic Constraints", "Locators", "Dimensions", "Pivots", "Handles", "Textures", "Strokes", "Motion Trails", "Manipulators", "Clip Ghosts", "NURBS CVs", "NURBS Hulls", "Grid", "HUD", "Image Planes"};
	}	
	
	int $craDisplayOptions[] = `optionVar -q craPlayblastModelPanelFlagsOV`;
	int $craScenePlayblastWinPanelBarStateOV = `optionVar -q craScenePlayblastWinPanelBarStateOV`;
	int $craScenePlayblastWinHeightOffset = 0;
	if(!$craScenePlayblastWinPanelBarStateOV)
	        $craScenePlayblastWinHeightOffset = 19;
	
	if(`modelEditor -exists craPlayblastMPL`)
	{
	        setRendererInModelPanel `optionVar -q craScenePlayblastWinRendererOV` craPlayblastMPL;
	        
                string $craViewportPrefs[] = {"-displayLights", "-displayAppearance", "-useDefaultMaterial", "-displayTextures", "-shadows", "-wireframeOnShaded", ".ssaoEnable", ".motionBlurEnable", ".multiSampleEnable"};
                string $craViewportPrefsValues[] = `optionVar -q craPlayblastPanelPrefsOV`;
	        
	        for($crai=0; $crai<6;$crai++)
                       eval("modelEditor -e " + $craViewportPrefs[$crai] + " " + $craViewportPrefsValues[$crai] + " craPlayblastMPL");
	        
                for($crai=6; $crai<9;$crai++)
                        eval("setAttr hardwareRenderingGlobals" + $craViewportPrefs[$crai] + " " + $craViewportPrefsValues[$crai]);
                
		for( $crai=0; $crai < size($craModelPanelFlags) ;$crai++ )
		{
			//camera size w*h
			if($crai == 0)
			{
				if (`window -exists craScenePlayblastWin`)
				{
					if(`getApplicationVersionAsFloat` >= 2013)
					{
						paneLayout -e -w $craDisplayOptions[$crai] -h $craDisplayOptions[$crai+1] craPlayblastPL;
						window -e -s 0 -w ($craDisplayOptions[$crai] + 4) -h ($craDisplayOptions[$crai+1] + 40 + $craScenePlayblastWinHeightOffset) craScenePlayblastWin;
					}
					else
					{
                                                // int $ph = `paneLayout -q -h craPlayblastPL`;
                                                // int $wh = `window -q -h craScenePlayblastWin`;
                                                
                                                // paneLayout -e -w ($craDisplayOptions[$crai] + 4) -h ($ph + $craScenePlayblastWinHeightOffset) craPlayblastPL;
                                                // window -e -w ($craDisplayOptions[$crai] + 4) -h ($wh + $craScenePlayblastWinHeightOffset) craScenePlayblastWin;
						paneLayout -e -w ($craDisplayOptions[$crai] + 4) -h ($craDisplayOptions[$crai+1] + 8)  craPlayblastPL;
						window -e -s 0 -w ($craDisplayOptions[$crai] + 4) -h ($craDisplayOptions[$crai+1] + 40 + $craScenePlayblastWinHeightOffset) craScenePlayblastWin;

						// evalDeferred -lp "window -e -s 0 craScenePlayblastWin";
					}


				}
				continue;
			}
			
			if($crai == 1)
				continue;
			
			//Scene Info HUDs
			if($crai == 2)
			{
				craSceneInfoHUDs $craDisplayOptions[$crai];
				if(`menuItem -exists craSceneInfoHUDsMI`)
					menuItem -e -cb $craDisplayOptions[$crai] craSceneInfoHUDsMI;
				continue;
			}
			
			//modelPanel display flags
			modelEditor -e $craModelPanelFlags[$crai] $craDisplayOptions[$crai] craPlayblastMPL;
		}
	}
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craCreateScenePlayblast end

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craReloadTextures start
global proc craReloadTextures()
{
	string $craTextures[];
	string $craReloadedTextures[];
	int $mode;
	string $mySel[] = `ls -sl`;
	
	if(!size($mySel))
	{
		$craTextures = `ls -l -type "file"`;
		$mode = 1;
	}
	else
		$craTextures = `craGetObjectTextures`;
	
	if (!size($craTextures))
	{
                print ("RELOAD FILE TEXTURES : no file(s) to reload \n");
                if(`getApplicationVersionAsFloat` > 2013)
                {
                        int $inViewStatus = `optionVar -q inViewMessageEnable`;
                        optionVar -iv inViewMessageEnable true;
                        inViewMessage -a .9 -smg ("<font color=\"red\">RELOAD FILE TEXTURES : no file(s) to reload</font>") -pos midCenter -bkc 0x00001100 -fade -fadeInTime 100 -fadeStayTime 1000 -fadeOutTime 100;
                        optionVar -iv inViewMessageEnable $inViewStatus;
                }
                else
                        headsUpMessage ("RELOAD FILE TEXTURES : no file(s) to reload");
	}
	else
	{
		for($craTexture in $craTextures)
		{
			string $cra_textureName = `getAttr($craTexture +".fileTextureName")`;
			catchQuiet(`setAttr -type "string" ( $craTexture  + ".fileTextureName") $cra_textureName`);
			$craReloadedTextures[size($craReloadedTextures)] = $craTexture;
			print ($craTexture + " reloaded.\n");
		}
		if($mode)
		{
                        print ("ALL SCENE TEXTURES RELOADED : " + size($craReloadedTextures) + " file(s) reloaded.\n");
                        if(`getApplicationVersionAsFloat` > 2013)
                        {
                                int $inViewStatus = `optionVar -q inViewMessageEnable`;
                                optionVar -iv inViewMessageEnable true;
                                inViewMessage -a .9 -smg ("<font color=\"orange\">ALL SCENE TEXTURES RELOADED : " + size($craReloadedTextures) + " file(s) reloaded </font>") -pos midCenter -bkc 0x00001100 -fade -fadeInTime 100 -fadeStayTime 1000 -fadeOutTime 100;
                                optionVar -iv inViewMessageEnable $inViewStatus;
                        }
                        else
                                headsUpMessage (" ALL SCENE TEXTURES RELOADED : " + size($craReloadedTextures) + " file(s) reloaded.\n");
		}
		else
		{
                        print ( size($mySel) + " OBJECT(S) TEXTURES RELOADED : " + size($craReloadedTextures) + " file(s) reloaded.\n");
                        if(`getApplicationVersionAsFloat` > 2013)
                        {
                                int $inViewStatus = `optionVar -q inViewMessageEnable`;
                                optionVar -iv inViewMessageEnable true;
                                inViewMessage -a .9 -smg ("<font color=\"orange\">" + size($mySel) + " OBJECT(S) TEXTURES RELOADED : " + size($craReloadedTextures) + " file(s) reloaded </font>") -pos midCenter -bkc 0x00001100 -fade -fadeInTime 100 -fadeStayTime 1000 -fadeOutTime 100;
                                optionVar -iv inViewMessageEnable $inViewStatus;
                        }
                        else
                                headsUpMessage (" " + size($mySel) + " OBJECT(S) TEXTURES RELOADED : " + size($craReloadedTextures) + " file(s) reloaded.\n");
		}
	}
}

global proc string[] craGetObjectTextures()
{
	string $mySel[] = `ls -sl`;
	string $fileNodes[];
	if(size($mySel)){
		for($i in $mySel)
		{
			string $shapeNode[] = `listRelatives -s $i`;
			if(!size($shapeNode))
				continue;
			string $shadingGroup[] = `listConnections -t "shadingEngine" $shapeNode[0]`;
			string $surfaceShader[] = `listConnections ($shadingGroup[0] + ".surfaceShader")`;
			if(!size($surfaceShader))
				$surfaceShader = `listConnections ($shadingGroup[0] + ".miMaterialShader")`;
			if(!size($surfaceShader))
				continue;
			string $connection[] = `listHistory $surfaceShader[0]`;
			$fileNodes = stringArrayCatenate($fileNodes, `ls -typ "file" $connection`);
		}
		return stringArrayRemoveDuplicates($fileNodes);
	}
}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// craReloadTextures end

global proc craSceneUnits (string $unit)
{
	string $panelName = `getPanel -wf`;
	string $camera = `modelPanel -q -camera $panelName`;

	setAttr ($camera + ".farClipPlane") 100000;
	setAttr ($camera + ".nearClipPlane") 0.01;

	currentUnit -l $unit;
	grid -spacing 5 -size 12  -displayPerspectiveLabels 0;
}

global proc string[] craGetNameSpace()
{
	string $sel[] = `ls -sl`;
	if(!size($sel)){
		error "Select some object.";
	}
	string $namespaces[];
	for ($i in $sel){
		string $getNamespace[];
		string $getNamespace[];
		int $numNamespaces = `tokenize $i ":" $getNamespace` ;
		string $characterNamespace = $getNamespace[0];
		$namespaces[size($namespaces)] = $characterNamespace;
	}
	
	return $namespaces;
}

global proc craCheckRemoteEdit()
{
	
	if (!(`commandPort -q "127.0.0.1:7777"`)) 
	{
		commandPort -n "127.0.0.1:7777";
		print "commandPort 7777 OPEN.\n";
		menuItem -e -l "Close commandPort 7777" -c "craSetupRemoteEdit" craSetupRemoteEditMI;
	} else {
		commandPort -close -n "127.0.0.1:7777";
		menuItem -e -l "Open commandPort 7777" -c "craSetupRemoteEdit" craSetupRemoteEditMI;
		print "commandPort 7777 CLOSED.\n";		
	}
	
}

global proc craSetupRemoteEdit()
{
	
	if (!(`commandPort -q "127.0.0.1:7777"`)) 
	{
		commandPort -n "127.0.0.1:7777";
		print "commandPort 7777 OPEN.\n";
		menuItem -e -l "Close commandPort 7777" -c "craSetupRemoteEdit" craSetupRemoteEditMI;
	} 
	else 
	{
		commandPort -close -n "127.0.0.1:7777";
		menuItem -e -l "Open commandPort 7777" -c "craSetupRemoteEdit" craSetupRemoteEditMI;
		print "commandPort 7777 CLOSED.\n";		
	}
	
}

global proc craViewScenePlayblast()
{
	string $craFilenameNoExtension = basenameEx(`file -q -loc`);
	string $craVideoFileExtension = ".mov";
	
	if(`about -win64` && `getApplicationVersionAsFloat` < 2013 )
	{
		if( file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $craFilenameNoExtension + ".avi"))) 
			$craVideoFileExtension = ".avi";
	}
	else
	{
		if( !file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $craFilenameNoExtension + ".mov"))) 
			$craVideoFileExtension = ".avi";
	}

	string $file = (`workspace -q -rd` + "playblast/" + $craFilenameNoExtension + $craVideoFileExtension);
	
	if( file("-q", "-exists", $file)) 
	{	
		if(`about -windows`)
			system ("start explorer " + `toNativePath $file`);
		if(`about -macOS`)
			system ("open " + `toNativePath $file`);
		if(`about -linux`)
			system ("xdg-open " + `toNativePath $file` + "&");
		
		print ( $file + "\n");
	} else
		error "No scene playblast.";
}

global proc craSceneUtilsInitMenuItems()
{
	global string $gPlayBackSlider;
	
	if(`menu -exists craSceneToolsMenu`)
	{
		if(`craCheckPlayblast`)
		{
			menuItem -e -en 1 -l "View Scene Playblast" -ann "Open scene playblast" craViewScenePlayblastMI;
			if(`menuItem -exists craMayaBrowserViewPlayblastCBMI`)
				menuItem -e -en `craCheckPlayblast` craMayaBrowserViewPlayblastCBMI;
			if(`menuItem -exists craMayaBrowserViewPlayblastCBMI`)
				 menuItem -e -en `craCheckPlayblast` craMayaBrowserDeletePlayblastCBMI;
		}
		else
		{
			menuItem -e -en 0 -l "No Scene Playblast" -ann "No Scene Playblast" craViewScenePlayblastMI;
			if(`menuItem -q -exists craMayaBrowserViewPlayblastCBMI`)
				menuItem -e -en `craCheckPlayblast` craMayaBrowserViewPlayblastCBMI;
			if(`menuItem -q -exists craMayaBrowserDeletePlayblastCBMI`)
				 menuItem -e -en `craCheckPlayblast` craMayaBrowserDeletePlayblastCBMI;
		}
		
		menuItem -e -cb `headsUpDisplay -exists craSceneHUDsProjectHUD` craSceneInfoHUDsMI;
		
		if (!`commandPort -q "127.0.0.1:7777"`) 
			menuItem -e -l "Open commandPort 7777" craSetupRemoteEditMI;
		else 
			menuItem -e -l "Close commandPort 7777" craSetupRemoteEditMI;
		
		menuItem -e -checkBox `timeControl -q -snap $gPlayBackSlider` craTimelineSnappingMI;
	}
	craRefreshPlaybastItems;
	craRefreshSceneInfo;
	
	if(`modelPanel -ex craPlayblastMPL`) 
                setRendererInModelPanel `optionVar -q craScenePlayblastWinRendererOV` craPlayblastMPL;
}


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Channel/Node Control start
global proc craChannelControl()
{
	if (`window -exists craChannelControlWin`)
		deleteUI craChannelControlWin;
	
	window -t "Channel/Node Control" -tlb 1 -s 0 craChannelControlWin;
	columnLayout -w 100 -adj 1;
		frameLayout -lv 0 -mw 1 -mh 1;
		columnLayout -adj 1;
			rowLayout -nc 3 -bgc 0.55 0.4 0.4 -adj 1;
				button -h 18 -w 100 -ann "Lock and Hide All Transform Channels" -bgc 0.55 0.3 0.3 -l "Lock/Hide Attrs" -c "craChannelControlProc {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 1 0";
				popupMenu -pmc "popupMenu -e -dai craLockHideAllAttrsPUM; menuItem -l \"Lock and Hide All Keyable Channels\" -en (size(ls(\"-sl\"))) -c \"craChannelControlProc `listAttr -k` 1 0\" -p craLockHideAllAttrsPUM craLocHidekAllAttrsMI;" craLockHideAllAttrsPUM;
				rowLayout -h 20 -bgc 0.55 0.4 0.4 -nc 4 -cw4 20 20 20 20;
					button -h 18 -ann "Lock/Hide Translate Channels" -w 21 -bgc 0.55 0.4 0.4  -l "T" -c "craLockHideChannelsProc {\"tx\", \"ty\",\"tz\"} 1 0";
					popupMenu -mm 1;                                          
						menuItem -rp "NW" -l "TX" -c "craLockHideChannelsProc {\"tx\"} 1 0";
						menuItem -rp "N" -l "TY" -c "craLockHideChannelsProc {\"ty\"} 1 0";
						menuItem -rp "NE" -l "TZ" -c "craLockHideChannelsProc {\"tz\"} 1 0";
					setParent -m ..;
					button -h 18 -ann "Lock/Hide Rotate Channels" -w 21 -bgc 0.55 0.4 0.4  -l "R" -c "craChannelControlProc {\"rx\",\"ry\",\"rz\"} 1 0";
					popupMenu -mm 1;
						menuItem -rp "NW" -l "RX" -c "craLockHideChannelsProc {\"rx\"} 1 0";
						menuItem -rp "N" -l "RY" -c "craLockHideChannelsProc {\"ry\"} 1 0";
						menuItem -rp "NE" -l "RZ" -c "craLockHideChannelsProc {\"rz\"} 1 0";
					setParent -m ..;
					button -h 18 -ann "Lock/Hide Scale Channels" -w 21 -bgc 0.55 0.4 0.4  -l "S" -c "craLockHideChannelsProc {\"sx\",\"sy\",\"sz\"} 1 0";
					popupMenu -mm 1;
						menuItem -rp "NW" -l "SX" -c "craLockHideChannelsProc {\"sx\"} 1 0";
						menuItem -rp "N" -l "SY" -c "craLockHideChannelsProc {\"sy\"} 1 0";
						menuItem -rp "NE" -l "SZ" -c "craLockHideChannelsProc {\"sz\"} 1 0";
					setParent -m ..;
					button -h 18 -ann "Lock/Hide Visibility Channel" -w 21 -bgc 0.55 0.4 0.4  -l "V" -c "craLockHideChannelsProc {\"v\"} 1 0";
				setParent ..;
				nodeIconButton -h 18 -w 24 -bgc 0.55 0.3 0.3 -i "Lock_ON.png" -ann "Lock Transform Channels" -c "craLockAttrs {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 1";
			setParent ..;
			
			rowLayout -nc 3 -bgc 0.4 0.55 0.4 -adj 1;
				button -h 18  -ann "Unlock and Unhide All Transform Channels" -bgc 0.3 0.55 0.3 -l "UnLock/UnHide Attrs" -c "craChannelControlProc {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 0 1";
					popupMenu -pmc "popupMenu -e -dai craUnlockUnhideAllAttrsPUM; menuItem -l \"Unlock and Unhide All Locked and Keyable Channels\" -en (size(ls(\"-sl\"))) -c \"craChannelControlProc `listAttr -l` 0 1\" -p craUnlockUnhideAllAttrsPUM craUnlocUnhidekAllAttrsMI;" craUnlockUnhideAllAttrsPUM;
					popupMenu -pmc "popupMenu -e -dai craUnlockAllAttrsPUM; menuItem -l \"Unlock All Keyable Channels\" -en (size(ls(\"-sl\"))) -c \"craLockAttrs `listAttr -k` 0\" -p craUnlockAllAttrsPUM craUnlockAllAttrsMI;" craUnlockAllAttrsPUM;
				setParent -m ..;
				
				rowLayout -h 20 -bgc 0.4 0.55 0.4 -nc 4 -cw4 20 20 20 20;
					button -h 18 -ann "Unlock/Unhide Translate Channels" -w 21 -bgc 0.4 0.55 0.4 -l "T" -c "craLockHideChannelsProc {\"tx\", \"ty\",\"tz\"} 0 1";
					popupMenu -mm 1;
						menuItem -rp "NW" -l "TX" -c "craLockHideChannelsProc {\"tx\"} 0 1";
						menuItem -rp "N" -l "TY" -c "craLockHideChannelsProc {\"ty\"} 0 1";
						menuItem -rp "NE" -l "TZ" -c "craLockHideChannelsProc {\"tz\"} 0 1";
					setParent -m ..;
					button -h 18 -ann "Unlock/Unhide Rotate Channels" -w 21 -bgc 0.4 0.55 0.4 -l "R" -c "craLockHideChannelsProc {\"rx\",\"ry\",\"rz\"} 0 1";
					popupMenu -mm 1;
						menuItem -rp "NW" -l "RX" -c "craLockHideChannelsProc {\"rx\"} 0 1";
						menuItem -rp "N" -l "RY" -c "craLockHideChannelsProc {\"ry\"} 0 1";
						menuItem -rp "NE" -l "RZ" -c "craLockHideChannelsProc {\"rz\"} 0 1";
					setParent -m ..;
					button -h 18 -ann "Unlock/Unhide Scale Channels" -w 21 -bgc 0.4 0.55 0.4 -l "S" -c "craLockHideChannelsProc {\"sx\",\"sy\",\"sz\"} 0 1";
					popupMenu -mm 1;
						menuItem -rp "NW" -l "SX" -c "craLockHideChannelsProc {\"sx\"} 0 1";
						menuItem -rp "N" -l "SY" -c "craLockHideChannelsProc {\"sy\"} 0 1";
						menuItem -rp "NE" -l "SZ" -c "craLockHideChannelsProc {\"sz\"} 0 1";
					setParent -m ..;
					button -h 18 -ann "Unlock/Unhide Visibility Channel" -w 21 -bgc 0.4 0.55 0.4 -l "V" -c "craLockHideChannelsProc {\"v\"} 0 1";
					setParent ..;
					nodeIconButton -h 18 -w 24 -bgc 0.4 0.55 0.4 -i "Lock_OFF.png" -ann "Unlock Transform Channels" -c "craLockAttrs {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 0";
			setParent ..;
			
			rowLayout -h 20 -nc 4 -bgc 0.4 0.4 0.6 -adj 2;
				nodeIconButton -l "Node" -bgc .4 .4 .6 -h 18 -st "iconAndTextHorizontal" -i "Lock_ON.png" -ann "Locks one or more dependency nodes. A locked node is restricted in the following ways:\n - It may not be deleted.\n - It may not be renamed.\n - Its parenting may not be changed.\n - Attributes may not be added to or removed from it.\n - Locked attributes may not be unlocked.\n - Unlocked attributes may not be locked." -c "craLockNode 1 0";	
				nodeIconButton -l "Node Hi" -bgc .4 .4 .6 -h 18 -st "iconAndTextHorizontal" -i "Lock_ON.png" -ann "Lock selection hierarchy" -c "craLockNode 1 1 ";	
				nodeIconButton -l "Node" -bgc 0.55 0.55 0.2 -h 18 -st "iconAndTextHorizontal" -i "Lock_OFF.png" -ann "Unlock selected nodes" -c "craLockNode 0 0 ";	
				nodeIconButton -l "Node Hi" -bgc 0.55 0.55 0.2 -h 18 -st "iconAndTextHorizontal" -i "Lock_OFF.png" -ann "Unlock selection hierarchy" -c "craLockNode 0 1";	
			setParent ..;
			
			rowLayout -h 20 -nc 5 -adj 1 -bgc .4 .4 .4 ;
				button -h 18 -bgc .55 .55 .55 -ann "Open Channel Control Window" -l "Channel Control" -c "ChannelControlEditor";
				button -h 18 -bgc .55 .55 .55 -l " Add " -ann "Add Custom Attribute" -c "AddAttribute";
				button -h 18 -bgc .55 .55 .55  -l " Edit " -ann "Edit Custom Attribute" -c "RenameAttribute";
				button -h 18 -bgc .55 .55 .55  -l " Delete " -ann "Delete Custom Attribute" -c "DeleteAttribute";
				nodeIconButton -bgc .4 .4 .4 -h 18 -w 18 -i "pickOtherObj.png" -ann "About" -c "craAboutSceneTools";
			setParent ..;
			
	setParent ..;
	
	showWindow craChannelControlWin;
}	

global proc string[] craGetCBAttrs()
{
	string $attrs[] = `channelBox -q -sma mainChannelBox`;
	$attrs = stringArrayCatenate( $attrs, `channelBox -q -ssa mainChannelBox`);
	$attrs = stringArrayCatenate( $attrs, `channelBox -q -sha mainChannelBox`);
        return $attrs;
}

global proc craChannelControlProc( string $attrs[], int $lock , int $keyable)
{
	string $listedObjects[] = `ls -sl -l`;
	
	if(size(`craGetCBAttrs`)){
		if($lock && !$keyable){
			channelBoxCommand -lock;
			channelBoxCommand -unkeyable;
		} else if($lock && $keyable){
			channelBoxCommand -lock;
		} else {
			channelBoxCommand -unlock;
	}
	} else {
		for($attr in $attrs){
			for ($object in $listedObjects) {
				if(`attributeExists $attr $object`){
					setAttr -l $lock -k $keyable ($object + "." + $attr);	
				}
			}
		}
	}
}

global proc craLockHideChannelsProc( string $attrs[], int $lock , int $keyable)
{
	string $listedObjects[] = `ls -sl -l`;
	for($attr in $attrs){
		for ($object in $listedObjects) {
			if(`attributeExists $attr $object`){
				setAttr -l $lock -k $keyable ($object + "." + $attr);	
			}
		}
	}
}

global proc craLockAttrs(string $attrs[], int $state)
{
	string $listedObjects[] = `ls -sl`;
	if(size(`craGetCBAttrs`))
		$attrs = `craGetCBAttrs`;
	
	for($attr in $attrs){
		for ($object in $listedObjects) {
			string $shapes[] = `listRelatives -s $object`;
			if(`attributeExists $attr $object`)
				setAttr -l $state ($object + "." + $attr);
			if(`attributeExists $attr $shapes[0]`)
				setAttr -l $state ($shapes[0] + "." + $attr);
		}
	}
}


global proc craLockNode(int $mode, int $hi)
{
	string $mySel[] = `ls -sl`;
	
	if(!size(`ls -sl`))
		error "Select object(s)";
	
	if($hi)
	{
		select -hi;
	}
	
	for($i in `ls -sl`){
		
		lockNode -lock $mode;
		if($mode == 1)
			print ($i + " node locked.\n");
		else
			print ($i + " node unlocked.\n"); 
	}
	
	select -r $mySel;
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Channel/Node Control end


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Selection Filter start

global proc craSelectionFilter()
{
	
	if (`window -exists craSelectionFilterWin`)
		deleteUI craSelectionFilterWin;
	
	window -t "  Filter/Select Nodes" -tlb 1 -s 0 -w 75 -h 50 craSelectionFilterWin;
	
	frameLayout -lv 0 -cll 0 -mw 2 -mh 2 -bs "etchedIn";
	columnLayout;
	
	rowLayout -nc 4 -cw4 60 100 57 52 mainStringRL;
		text -l " String Filter" craStringTXT;
		textField -w 170 -text "*" -ec "craSelectNodes" craStringSearchTF;
		popupMenu;
		// edit this array to populate the popupMenu in the nodeType textField
		string $commonSuffixes[] = {"*_anim", "*_skin", "*_geo","*_jnt", "*_ctrl", "*"};
		//comment the next line to prevent the popupMenu items from being sorted by name
		$commonSuffixes = sort($commonSuffixes);
		
		for ($commonSuffix in $commonSuffixes)
			menuItem -l $commonSuffix -c ("textField -e -tx \"" + $commonSuffix + "\" craStringSearchTF") ($commonSuffix + "MI");
		
		button -w 70 -l "Get Name" -c ("textField -e -tx (`craGetNodeType(2)` + \"*\") craStringSearchTF;textField -e -tx `craGetNodeType(0)` craNodeTypeTF") craGetNameBTN;
		button -w 70 -l "Select All" -c "craSelectNodes" craSelectBTN;
		popupMenu;
			menuItem -l "Deselect All" -c "craDeselectNodes";
		setParent -m ..;
	setParent ..;
	
	rowLayout -nc 4 -cw4 60 100 57 52 mainRL;
	text -l " Node Type  " craStringTXT;
	textField -w 170 -text "*" -ec "craSelectNodes" craNodeTypeTF;
	
	popupMenu;
	// edit this array to populate the popupMenu in the nodeType textField
	string $commonNodes[] = {"joint", "nCloth", "file", "lambert", "mesh",  "nurbsSurface", "nurbsCurve", "*"};
	//comment the next line to prevent the popupMenu items from being sorted by name
	$commonNodes = sort($commonNodes);
	
	for ($commonNode in $commonNodes)
		menuItem -l $commonNode -c ("textField -e -tx \"" + $commonNode + "\" craNodeTypeTF") ($commonNode + "MI");
	
	button -w 70 -l "Get Type" -c ("textField -e -tx `craGetNodeType(0)` craNodeTypeTF") craGetTypeBTN;
	popupMenu;
	menuItem -l "from Shape" -c ("textField -e -tx `craGetNodeType(1)` craNodeTypeTF");
	
	button -w 70 -l "Filter Type" -c "select(\"-r\",ls(\"-sl\", \"-type\", `textField -q -text craNodeTypeTF`,`textField -q -text craStringSearchTF`))" craFilterBTN;
	popupMenu;
	menuItem -l "Filter Hierarchy" -c ("select -r -hi;select(\"-r\",ls(\"-sl\", \"-type\", `textField -q -text craNodeTypeTF`,`textField -q -text craStringSearchTF`))");
	setParent ..;
	
	rowLayout -nc 4 -adj 2 craRL2;
	
	text  -l " Set  Type    " craNodeTypeTF;
	optionMenu -w 290 -cc "textField -e -tx `optionMenu -q -v craFilSelOM` craNodeTypeTF" craFilSelOM;
	separator -st "none" -hr 1 -w 1;
	iconTextButton -h 19 -w 19 -i "pickOtherObj.png" -ann "About" -c "craAboutSceneTools";
	string $nodes[] = `allNodeTypes`;
	
	for ($node in $nodes)
		menuItem -l $node ($node + "MI");
	
	window -e -tlb 1 -s 0 -w 400 craSelectionFilterWin;
	showWindow craSelectionFilterWin;
	
}

global proc string craGetNodeType(int $shape)
{
	
	
	string $nodeSel[] = `ls -sl -l`;
	if (!size($nodeSel))
		error "Select some object/node";
	
	if($shape == 1){
		string $shapes[] = `listRelatives -f -s -ni $nodeSel[0]`;
		return `nodeType $shapes[0]`;
	}
	
	else if($shape == 2){
		string $mySel[] = `ls -sl`;
		return $mySel[0];
	}
	else
		return `nodeType $nodeSel[0]`;
	
}

global proc craSelectNodes()
{
	if(`textField -q -text craNodeTypeTF` == "*")
		select("-r",ls(`textField -q -text craStringSearchTF`));
	else
		select("-r",ls("-type", `textField -q -text craNodeTypeTF`,`textField -q -text craStringSearchTF`));
}

global proc craDeselectNodes()
{
	if(`textField -q -text craNodeTypeTF` == "*")
		select("-d",ls(`textField -q -text craStringSearchTF`));
	else
		select("-d",ls("-type", `textField -q -text craNodeTypeTF`,`textField -q -text craStringSearchTF`));
}

global proc craFilterNodes(int $mode)
{
	if(`textField -q -text craNodeTypeTF` == "*")
		select("-r",ls("-sl", `textField -q -text craStringSearchTF`));
	else
		select("-r",ls("-sl", "-type", `textField -q -text craNodeTypeTF`,`textField -q -text craStringSearchTF`));
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Selection Filter end

global proc craSetRenderResolution(int $width, int $height, float $aspectRatio)
{
	setAttr "defaultResolution.width" $width;
	setAttr "defaultResolution.height" $height;
	setAttr "defaultResolution.deviceAspectRatio" $aspectRatio;
}

global proc craCreateShotCamera( int $lookThrough)
{
	float $perspPos[] = `xform -q -ws -t persp`;
	float $perspRot[] = `xform -q -ws -ro persp`;
	string $cameraNodes[] = `camera -n shotCamera`;
	string $camera = $cameraNodes[0];
	
	if(!`objExists "shotCamera"`)
	{
		rename $cameraNodes[0] shotCamera;
		$camera = "shotCamera";
	}
	
	xform -ws -t $perspPos[0] $perspPos[1] $perspPos[2] $camera; 
	xform -ws -ro $perspRot[0] $perspRot[1] $perspRot[2] $camera; 
	
	if($lookThrough)
		modelPanel -e -cam $camera `getPanel -wf`;
	
}

global proc craPlaybackOptions(int $mode)
{
	if($mode == 0)
	{
		playbackOptions -e -playbackSpeed 1 -maxPlaybackSpeed 0;
		print "Real-Time Playback speed.";
		headsUpMessage -t 0.1  "Real-Time";
	}
	if($mode == 1)
	{
		playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 0;
		print "Play Every Frame Playback speed.";
		headsUpMessage -t 0.1  "Play Every Frame";
	}
	if($mode == 2)
	{
		playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 1;
		print "Play Every Frame Playback speed, Max Real-Time.";
		headsUpMessage -t 0.1  "Play Every Frame, Max Real-Time";
	}
	
	if($mode == 3)
	{
		playbackOptions -l "once";
		print "Playback Once."; 
		headsUpMessage -t 0.1  "Playback Once.";
	}
	
	if($mode == 4)
	{
		playbackOptions -l "oscillate";
		print "Playback Oscillate";
		headsUpMessage -t 0.1 "Playback Oscillate";
	}
	
	if($mode == 5)
	{
		playbackOptions -l "continuous";
		print "Continuous Playback.";	
		headsUpMessage -t 0.1 "Continuous Playback.";
	}
	
	if($mode == 6)
	{
		playbackOptions -v "all";
		print "Update All Views.";	
		headsUpMessage -t 0.1 "Update All Views";
	}
	
	if($mode == 7)
	{
		playbackOptions -v "active";
		print "Update Active View.";	
		headsUpMessage -t 0.1 "Update Active View";
	}
}

global proc int craCheckPlayblast()
{
	if(`file -q -loc` == "unknown")
		return 0;
	
	if(file("-q", "-exists", (`workspace -q -rd` + "playblast/" +(basenameEx(`file -q -shortName -sn`) + ".avi")))
		|| file("-q", "-exists", (`workspace -q -rd` + "playblast/" +(basenameEx(`file -q -shortName -sn`) + ".mov")))
	)
		return 1;
	else
		return 0;
}

global proc craDeleteScenePlayblast()
{
	if ( `file -q -loc` == "unknown")
		error "Save you scene.";
	
	string $craPlayblastFiles = `workspace -q -rd` + "playblast/" + basenameEx(`file -q -shortName -sn`);
	
	if( file("-q", "-exists", ($craPlayblastFiles + ".mov")) || file("-q", "-exists", ($craPlayblastFiles + ".avi")) )
	{
		if(`confirmDialog -title "Delete Playblast" -defaultButton "OK" -message "         Are you sure?" -cancelButton "Cancel" -dismissString "Cancel" -button "OK" -button "Cancel"` == "OK")
		{
			if( file("-q", "-exists", ($craPlayblastFiles + ".mov")) )
			{
				sysFile -delete ($craPlayblastFiles + ".mov");
				print ($craPlayblastFiles + ".mov" + " deleted.");
			}
			if( file("-q", "-exists", ($craPlayblastFiles + ".avi")) )
			{
				sysFile -delete ($craPlayblastFiles + ".avi");
				print ($craPlayblastFiles + ".avi" + " deleted.");
			}
		}
	}
	else
		error "No scene playblast.";
		
	if(`dockControl -q -exists craSceneFileInfoDC`)
	{
		iconTextButton -e -image "renderable_dim.png" -bgc .4 .4 .4 -l "  No Playblast" -c "craCreateScenePlayblast" craSceneViewPlayblastBTN;
		iconTextButton -e -en 0 -bgc 0.4 .4 0.4 craSceneDeletePlayblastBTN;
	} 
	
	if(`dockControl -q -exists craMayaFileBrowserDock` && `file -q -loc` == `textField -q -text craMayaFileBrowserSceneFileNamePathTF`)
	{
		iconTextButton -e -en 0  -image "renderable_dim.png" -l "No Playblast" -bgc 0.4 .4 0.4 craMayaFileBrowserSceneViewPlayblastBTN;
		iconTextButton -e -en 0 -bgc .4 .4 .4 craMayaFileBrowserSceneDeletePlayblastBTN;
	}
	craRefreshPlaybastItems;
	craSceneUtilsInitMenuItems;
}


global proc craSaveSceneVersion()
{
	string $craArrayPathName[] =  `file -q -l`;
	string $craArrayFileName[] =  stringToStringArray($craArrayPathName[0], "." );

	$craExistFile = eval("file -q -ex \"" + $craArrayPathName[0] + "\"");
	
	if($craExistFile && size($craArrayFileName)>1)
	{
		
		string $extension, $overWrite, $version[], $filePrefix[], $SufixFileName, $PREFIXfileName, $newFileName, $remove[], $pathString;
		int $endString, $in = 0, $flag = 0, $count = 0, $existFile, $offset;

		clear $filePrefix;
		clear $version;
		
		switch ($craArrayFileName[size($craArrayFileName)-1]) 
		  {
		      case "ma":
			  $extension =  "mayaAscii";
			  break;
		      case "mb":
			  $extension =  "mayaBinary";
			  break;
		  }
		
		for($crai=0;$crai<size($craArrayFileName[size($craArrayFileName)-2]);$crai++)
		{
			string $craTemp1 =  eval("endString(\"" + $craArrayFileName[size($craArrayFileName)-2] + "\"," + ($crai + 1) + ")");
			string $craTemp =  eval("startString(\"" + $craTemp1 + "\", 1)");
			if(`gmatch $craTemp "[0-9]"`)
				{$version[$count] = $craTemp;$count++;$endString = $crai;}
			else
			{
				$crai = size($craArrayFileName[size($craArrayFileName)-2]);
			}
		}	

		if(size($version))
		{
			string $revVersion[];
			clear  $revVersion;

			for($crai=0;$crai<size($version);$crai++)
				$revVersion[$crai] = $version[size($version)-$crai-1]; 

			int $Fversion = stringArrayToString($revVersion, "");
			$Fversion = $Fversion+1;
			
			if($Fversion<10)
				$SufixFileName = "0"+$Fversion;
			else
				$SufixFileName = $Fversion;
		}
		else
		{
			$SufixFileName = "_v01";
			$endString = -1;	
		}
		
		
		$remove[0] = $craArrayFileName[size($craArrayFileName)-1];
		string $pathArray[] = stringArrayRemove($remove, $craArrayFileName);
		$pathString = stringArrayToString($pathArray, ".");
		

		$PREFIXfileName = startString($pathString,size($pathString)-$endString-1);
		$newFileName = $PREFIXfileName + $SufixFileName + "." + $craArrayFileName[size($craArrayFileName)-1];	
		
		
		$existFile = eval("file -q -ex \""+$newFileName+"\"");
		
		if($existFile)
		{	
			string $message = $PREFIXfileName+$SufixFileName + "." + $craArrayFileName[1]+"\n\n\tOverwrite?";
			$overWrite = `confirmDialog -title "File already exists..." -message $message
						-button "Yes" -button "No" -defaultButton "Yes"
						-cancelButton "No" -dismissString "No"`;
		
			if($overWrite=="Yes")
			{
				eval("file -rename \"" + $newFileName + "\"");
				eval("file -f -save -type \"" + $extension + "\"");
				addRecentFile($newFileName, "Best Guess");
				craCreateSceneThumbnail 0;
				print ("New version saved: " + $newFileName + "\n");
			}
		}
		else
		{
			eval("file -rename \"" + $newFileName + "\"");
			eval("file -f -save -type \"" + $extension + "\"");
			addRecentFile($newFileName, "Best Guess");
			craCreateSceneThumbnail 0;
			print ("New version saved: " + $newFileName + "\n");
		}
	}
	else
	{
		warning "Current scene is not saved on disk!\n";
		craSaveSceneAs;
	}
	
	craRefreshSceneInfo;
	craRefreshPlaybastItems;
	craSceneUtilsInitMenuItems;
	
	if(`dockControl -exists craMayaFileBrowserDock`)
	{
		craMayaFileBrowserLoadFileList;
		craMayaFileBrowserSelectOpenedScene;
	}
}

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// auto load, unload craSceneUtils start

global proc craAutoLoadSceneTools(int $state)
{
	if($state){
		if(!file("-q", "-exists", (`internalVar -usd` + "userSetup.mel")))
		{
			if(!filetest("-w", (`internalVar -usd` + "userSetup.mel")))
			{
				string $userSetup = (`internalVar -usd` + "userSetup.mel");
				$fileId = `fopen $userSetup "w"`;		
				fprint $fileId "//craSceneTools auto load, Carlos Rico Adega © 2015";	
				fprint $fileId "\n";	
				fprint $fileId "evalDeferred (\"craSceneTools\");";	
				fprint $fileId "\n";	
				fprint $fileId "\n";	
				fclose $fileId;  
				print ( `internalVar -usd` + "userSetup.mel has been created!" );
			}
			else
			{
				error ( `internalVar -usd` + "userSetup.mel cannot be modified!" );
			}
				
		}
		else
		{
			if(filetest("-w", (`internalVar -usd` + "userSetup.mel")) == 1)
			{
				string $file = (`internalVar -usd` + "userSetup.mel");
				$fileId=`fopen $file "a"`;
				if( !$fileId )
					error( "Could not read existing user setup file \n\"" + $file + "\"\n" );
				
				fprint $fileId "\n//craSceneTools auto load, Carlos Rico Adega © 2015\nevalDeferred (\"craSceneTools\");\n";		
				 
				fclose $fileId ;
				print ( `internalVar -usd` + "userSetup.mel has been modified!" );
			}
			else
			{
				menuItem -e -cb 0 craAutoloadSceneToolsCB;
				optionVar -iv craAutoLoadSceneToolsOV 0;
				error ( `internalVar -usd` + "userSetup.mel cannot be modified!" );
			}
		}
	}
	else
	{
		if(filetest("-w", (`internalVar -usd` + "userSetup.mel")))
		{
			//read file
			string $userSetup = (`internalVar -usd` + "userSetup.mel");
			string $newText[] = {};
			$fileId = `fopen $userSetup "r"`;		
			
			while(!`feof $fileId`)
			{
				string $line = `fgetline $fileId`;
				if ( $line == "//craSceneTools auto load, Carlos Rico Adega © 2015\n" || $line == "evalDeferred (\"craSceneTools\");\n")
					continue;
				$newText[size($newText)] = $line;
			}
			
			fclose $fileId;  
			
			//rewrite userSetup.mel
			$fileId = `fopen $userSetup "w"`;		
			for($line in $newText)
				fprint $fileId $line;
			fclose $fileId;
			
			print ( `internalVar -usd` + "userSetup.mel has been modified!" );
		}
		else
		{
			menuItem -e -cb 1 craAutoloadSceneToolsCB;
			optionVar -iv craAutoLoadSceneToolsOV 1;
			error ( `internalVar -usd` + "userSetup.mel cannot be modified!" );
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// auto load craSceneUtils end


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// craSaveSceneAs start

global proc craSaveSceneAs()
{
	layoutDialog -title "Scene Tools - Save Scene As..." -ui "craSceneToolsCustomSaveDialog";
}

global proc craSceneToolsCustomSaveDialog()
{
	// Get the dialog's formLayout.
	string $form = `setParent -q`;
	string $craOutputPath;
	string $craSaveAsName;
	string $shortName = `file -q -sn -shn`;
	string $extension = `fileExtension $shortName`;
	
	if(`textField -exists craMayaFileBrowserFilePath`)
		$craOutputPath = `textField -q -text craMayaFileBrowserFilePath`;
	else if(dirname(`file -q -loc`) != "")
		$craOutputPath = dirname(`file -q -loc`) + "/";
	else
		$craOutputPath = (`workspace -q -rd` + `workspace -q -fre "scene"` + "/");
	
	if(size($shortName))
		$craSaveAsName = $shortName;
	else
		$craSaveAsName = "newFile.ma";
	
	int $craInsertPosition = size(basenameEx($craSaveAsName)) + 1;
	
	formLayout -e -width 600 $form;
	
	frameLayout -w 600 -mw 5 -mh 5 -lv 0 craMainFrameL;
		frameLayout -mw 5 -mh 5 -lv 0;
			columnLayout -adj 1;
				rowLayout -nc 2 -adj 2;
					text -w 80 -label "Current name: " craCurrentFileNameTX;
					textField -text `file -q -loc` -ann `file -q -loc` -ed 0;
				setParent ..;
				rowLayout -nc 2 -adj 2;
					text -w 80 -l "Output  path:  ";
					textField -text $craOutputPath -ann $craOutputPath -cc "craSaveSceneAsChangePath" -ec "craSaveSceneAsChangePath" craSceneToolsSaveAsOutputPathTF;
				setParent ..;
				
				rowLayout -nc 2 -adj 2;
					text -w 80 -label "New file name: " craFileNameTX;
					textField -ip $craInsertPosition -text $craSaveAsName -cc "setFocus craSceneToolsSaveAsBTN" -ec "craSaveSceneAsCmd" craSceneToolsSaveAsFileNameTF;
				setParent ..;
				
				radioCollection;
					rowLayout -nc 3;   
						text -w 80 -l "";
						radioButton -onc "craSaveSceneAsChangeType \"ma\"" -l "Maya ASCII" craSceneToolsSaveAsMARB;
						radioButton -onc "craSaveSceneAsChangeType \"mb\"" -l "Maya Binary" craSceneToolsSaveAsMBRB;
					setParent ..;
				setParent ..;
				
				rowLayout -nc 2 -adj 1;       
					button -label "Save" -c "craSaveSceneAsCmd" craSceneToolsSaveAsBTN;
					button -w 300 -label "Cancel" -c "layoutDialog -dismiss \"Cancel\"" craQuitBTN;
				setParent ..;
			setParent ..;
		setParent ..;
        setParent ..;
        
        int $top = 0;
        int $edge = 5;       
        
        
        formLayout -edit
		-attachForm  craMainFrameL   "top"    $top
		-attachForm  craMainFrameL   "left"    $top
		-attachForm  craMainFrameL   "right"    $top
		-attachForm  craMainFrameL   "bottom"    $top
        $form;
        
        
        if($shortName != "")
        {
		if( `tolower $extension` == "ma")
			radioButton -e -sl craSceneToolsSaveAsMARB;
		else if( `tolower $extension` == "mb")
			radioButton -e -sl craSceneToolsSaveAsMBRB;
	}
	else
		radioButton -e -sl craSceneToolsSaveAsMARB;
	
	setFocus craSceneToolsSaveAsFileNameTF;
	evalDeferred("textField -e -ip " + $craInsertPosition + " craSceneToolsSaveAsFileNameTF");
}

global proc craSaveSceneAsChangeType(string $extension)
{
	string $craNewFileName;
	if($extension == "ma")
		$craNewFileName = substituteAllString( `textField -q -text craSceneToolsSaveAsFileNameTF`, ".mb", ".ma");
	
	if($extension == "mb")
		$craNewFileName = substituteAllString( `textField -q -text craSceneToolsSaveAsFileNameTF`, ".ma", ".mb");
	
	int $craInsertPosition = size(basenameEx($craNewFileName)) + 1;
	
	textField -e -ip $craInsertPosition -text $craNewFileName craSceneToolsSaveAsFileNameTF;
}

global proc craSaveSceneAsChangePath()
{
	string $currentPathText = fromNativePath(`textField -q -text craSceneToolsSaveAsOutputPathTF`);
	print  "\n";
	print $currentPathText;
	print  "\n";
	
	if(!endsWith($currentPathText, "/"))
		textField -e -text ($currentPathText + "/") -ann ($currentPathText + "/") craSceneToolsSaveAsOutputPathTF;
	else
		textField -e -text $currentPathText -ann $currentPathText craSceneToolsSaveAsOutputPathTF;
	string $path = `textField -q -text craSceneToolsSaveAsOutputPathTF`;
	int $craPathExists = `filetest -d $path`;
	if( !$craPathExists )
	{
		if(`confirmDialog -title "Not existing folder" -message "Create folder?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"` == "Yes")
		{
			sysFile -md $path;
			if(`dockControl -q -exists craMayaFileBrowserDock`)
				craMayaFileBrowserUpdateUI;
			setFocus craSceneToolsSaveAsFileNameTF;
			print ($path + " folder has been created.\n");
		}
		else
		{
			if(`textField -exists craMayaFileBrowserFilePath`)
			{
				textField -e -text `textField -q -tx craMayaFileBrowserFilePath` -ann `textField -q -tx craMayaFileBrowserFilePath` craSceneToolsSaveAsOutputPathTF;
				warning "Output folder does not exist!\n";
			}
		}
	}
	else
	{
		setFocus craSceneToolsSaveAsFileNameTF;
		print ("Output folder set to " + $path + "\n");
	}
}

global proc craSaveSceneAsCmd()
{
	string $craSaveAsOutputPath = `textField -q -text craSceneToolsSaveAsOutputPathTF`;
	string $craNewSceneName = `textField -q -text craSceneToolsSaveAsFileNameTF`;
	string $craSaveAsExtension;
	string $craSaveAsType;
	
	if($craNewSceneName == "")
	{
		warning "Enter a file name!\n";
		return;
	}
	
	if(`radioButton -q -sl craSceneToolsSaveAsMARB`)
	{
		if(!endsWith($craNewSceneName , ".ma"))
			$craNewSceneName += ".ma";
		$craSaveAsType = "mayaAscii";
        }
        	else
        	{
        		if(!endsWith($craNewSceneName , ".mb"))
			$craNewSceneName += ".mb";
        		$craSaveAsType = "mayaBinary";
        	}
        	
        	if(($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension) != `file -q -loc`)
        	{
        		layoutDialog -dismiss "Save";
        		
			if(`filetest -f ($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension)`)
			{
				
				if(`confirmDialog -title "Existing Scene" -message "Overwrite?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"` == "Yes")
				{
					file -rename ($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension);
					file -type $craSaveAsType -force -save;
					addRecentFile(($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension), "Best Guess");
					craCreateSceneThumbnail 0;
					if(`dockControl -q -exists craMayaFileBrowserDock`)
						craMayaFileBrowserUpdateUI;
					print ($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension + " has been saved.\n");
				}
				else
					evalDeferred("layoutDialog -title \"Scene Tools - Save Scene As...\" -ui \"craSceneToolsCustomSaveDialog\";");
			}
			else
			{
				file -rename ($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension);
				file -type $craSaveAsType -force -save;
				addRecentFile(($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension), "Best Guess");
				craCreateSceneThumbnail 0;
				if(`dockControl -q -exists craMayaFileBrowserDock`)
					craMayaFileBrowserUpdateUI;
				print ($craSaveAsOutputPath + $craNewSceneName + $craSaveAsExtension + " has been saved.\n");
			}
        	}
        	else
        		warning "Enter a different file name!\n";
}
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// craSaveSceneAs end

global proc craSceneToolsUpdateProjectsCBBTN()
{
	string $craRecentProjects[];
	if(`optionVar -exists "RecentProjectsList"`)
		$craRecentProjects = `optionVar -query "RecentProjectsList"`;
	
	popupMenu -e -dai "craButtonFileMenuRecentProjectItemsPUM";
	
	if(size($craRecentProjects))
	{
		menuItem -p "craButtonFileMenuRecentProjectItemsPUM" -en 0 -l "Recent Projects";
		menuItem -p "craButtonFileMenuRecentProjectItemsPUM" -d 1;
		for($i=size($craRecentProjects)-1; $i>=0; $i--)
		{
			menuItem -p "craButtonFileMenuRecentProjectItemsPUM" -l $craRecentProjects[$i] -c ("setProject \"" + $craRecentProjects[$i] + "\";print (\"Project set to: \" + \"" + $craRecentProjects[$i] + "\\n\");evalDeferred (\"craMayaFileBrowserSetActiveProject;\")");
			menuItem -p "craButtonFileMenuRecentProjectItemsPUM" -d 1;
		}
		menuItem -p "craButtonFileMenuRecentProjectItemsPUM" -d 1;
		menuItem -p "craButtonFileMenuRecentProjectItemsPUM" -en 1 -l "Set Project" -c "setProject \"\";evalDeferred (\"craMayaFileBrowserSetActiveProject;\")";
		
	}
	else
		menuItem -p "craButtonFileMenuRecentProjectItemsPUM" -en 0 -l "No Recent Projects";
}
			
global proc craAddChannelBoxSceneToolButtons(int $state)
{
	global string $gChannelButtonForm;
	
	if($state)
	{
		$butline = `formLayout -query -childArray $gChannelButtonForm`;
		setParent $gChannelButtonForm;
		$array=`layout -q -ca $gChannelButtonForm`;
		int $topSpacing = 0;
		int $botSpacing = 1;
		
		if(`rowLayout -exists craSceneToolButtonsRL`)
			deleteUI craSceneToolButtonsRL;
		
		rowLayout -nc 11 craSceneToolButtonsRL;
			iconTextButton -w 23 -h 23 -i "traxOpenLibrary.png" -c "craMayaFileBrowser" -ann "Open CharlieWales' File Browser.  Right-click for recent projects" craMayaFileBrowserCBBTN;
			popupMenu -p "craMayaFileBrowserCBBTN" -pmc "craSceneToolsUpdateProjectsCBBTN" craButtonFileMenuRecentProjectItemsPUM;
			setParent -m ..;
			iconTextButton -w 23 -h 23 -i "save.png" -c "craSaveSceneAs" -iol "AS" -olb 1 0 0 0 -olc 0 0 1 -fn "tinyBoldLabelFont" -ann "Save Scene As...";
			iconTextButton -w 23 -h 23 -i "autoload.png" -c "craReloadScene" -ann "Reload Scene. Right-click for recent files";
			popupMenu -mm 0 -b 3 -postMenuCommand "buildRecentFileMenu craSceneFileItemsPUM;menuItem -d 1 -p \"craSceneFileItemsPUM\"; menuItem -p \"craSceneFileItemsPUM\" -l \"Open Scene Options\" -c \"OpenSceneOptions\";" craSceneFileItemsPUM;
			setParent -m ..;
			iconTextButton -w 23 -h 23 -i "save.png" -c "craSaveSceneVersion;craMayaFileBrowserUpdateUI" -iol " v1" -olb 1 0 0 0 -olc 1 1 0 -fn "tinyBoldLabelFont" -ann "Save Scene Version";
			iconTextButton -w 23 -h 23 -i "LearningMovies.png" -c "craCreateScenePlayblast" -ann "Playblast Window" craPlayblastWinViewPlayblastCBBTN;
			popupMenu -pmc "craRefreshPlaybastItems" -p "craPlayblastWinViewPlayblastCBBTN";
				menuItem -l "View Playblast" -en `craCheckPlayblast` -c "craViewScenePlayblast" craPlayblastButtonViewPlayblastCBMI;
				menuItem -d 1;
				menuItem -l "Delete Playblast" -en `craCheckPlayblast` -c "craDeleteScenePlayblast" craPlayblastButtonDeletePlayblastCBMI;
				menuItem -d 1;
				menuItem -l "Playblast/Shot Window" -c "craCreateScenePlayblastWindow";
				setParent -m ..;
			iconTextButton -w 23 -h 23 -i "refEdFileList.png" -c "craReferenceFileEditor" -ann "Reference File Editor";
			iconTextButton -w 23 -h 23 -i "Lock_ON.png" -c "craChannelControl" -ann "Channel/Node Control";
			popupMenu -mm 1;
				menuItem -rp "W" -l "Unlock/Unhide Xform" -c "craChannelControlProc {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 0 1";
				menuItem -rp "E" -l "Lock/Hide Xform" -c "craChannelControlProc {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 1 0";
				menuItem -rp "N" -l "Unlock Xform" -c "craLockAttrs {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 0";
				menuItem -rp "S" -l "Lock Xform" -c "craLockAttrs {\"tx\", \"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"} 1";
			setParent -m ..;
			iconTextButton -w 23 -h 23 -i "levelOfDetailRebuild.png" -c "craReloadTextures" -ann "Reload Textures";
			iconTextButton -w 23 -h 23 -i "IsolateSelected.png" -c "craSelectionFilter" -ann "Filter/Select Nodes";
			iconTextButton -w 23 -h 23 -i "info.png" -c "craSceneFileInfo" -ann "Scene Info";
		setParent ..;
		
		formLayout -edit 
				-attachNone	    craSceneToolButtonsRL	"left"
					($gChannelButtonForm);
		craRefreshPlaybastItems;
	}
	else 
	{
		if(`rowLayout -exists craSceneToolButtonsRL`)
			deleteUI craSceneToolButtonsRL;
	}
}

global proc craAboutSceneTools()
{
	if (`window -exists craChannelControlAboutWin`)
		deleteUI craChannelControlAboutWin;
	
	string $version = "v2.1.6";
	string $outputPath = `internalVar -userTmpDir`;
	string $SceneTools_v2[] = { "/* XPM */", "static char *SceneTools2.0_icon_xpm[] = {", "/* width height num_colors chars_per_pixel */", "\"   128    72      256            2\",", "/* colors */", "\"`` c #444244\",", "\"`. c #2c822c\",", "\"`# c #9c2224\",", "\"`a c #848284\",", "\"`b c #3c563c\",", "\"`c c #14c214\",", "\"`d c #c4c2c4\",", "\"`e c #743234\",", "\"`f c #5c5a5c\",", "\"`g c #d40e0c\",", "\"`h c #24a224\",", "\"`i c #444644\",", "\"`j c #0ce20c\",", "\"`k c #a4a2a4\",", "\"`l c #e4e2e4\",", "\"`m c #346e34\",", "\"`n c #bc1a1c\",", "\"`o c #8c2a2c\",", "\"`p c #ec0604\",", "\"`q c #249224\",", "\"`r c #6c6e6c\",", "\"`s c #1cb21c\",", "\"`t c #5c3a3c\",", "\"`u c #545654\",", "\"`v c #0cd60c\",", "\"`w c #4c4644\",", "\"`x c #04f204\",", "\"`y c #949294\",", "\"`z c #3c623c\",", "\"`A c #d4d2d4\",", "\"`B c #b4b2b4\",", "\"`C c #f4f2f4\",", "\"`D c #ac1e1c\",", "\"`E c #6c3634\",", "\"`F c #e40a0c\",", "\"`G c #2c7e2c\",", "\"`H c #842e2c\",", "\"`I c #249a24\",", "\"`J c #646664\",", "\"`K c #1caa1c\",", "\"`L c #3c523c\",", "\"`M c #04ea04\",", "\"`N c #cc1214\",", "\"`O c #fc0204\",", "\"`P c #7c7a7c\",", "\"`Q c #14be14\",", "\"`R c #5c3e3c\",", "\"`S c #0cda0c\",", "\"`T c #543e3c\",", "\"`U c #2c8a2c\",", "\"`V c #8c8a8c\",", "\"`W c #3c5e3c\",", "\"`X c #14ca14\",", "\"`Y c #cccacc\",", "\"`Z c #d41214\",", "\"`0 c #acaaac\",", "\"`1 c #eceaec\",", "\"`2 c #ec0a0c\",", "\"`3 c #2c922c\",", "\"`4 c #4c4e4c\",", "\"`5 c #04fa04\",", "\"`6 c #9c9a9c\",", "\"`7 c #346a34\",", "\"`8 c #dcdadc\",", "\".` c #bcbabc\",", "\".. c #fcfafc\",", "\".# c #ac2224\",", "\".a c #a42224\",", "\".b c #445644\",", "\".c c #7c2e2c\",", "\".d c #646264\",", "\".e c #dc0a0c\",", "\".f c #347634\",", "\".g c #c41614\",", "\".h c #942624\",", "\".i c #f40204\",", "\".j c #747674\",", "\".k c #643634\",", "\".l c #14d214\",", "\".m c #b41a1c\",", "\".n c #743634\",", "\".o c #347a34\",", "\".p c #8c2e2c\",", "\".q c #24aa24\",", "\".r c #444e44\",", "\".s c #0cea0c\",", "\".t c #1cba1c\",", "\".u c #4c4244\",", "\".v c #2c862c\",", "\".w c #9c2624\",", "\".x c #848684\",", "\".y c #3c5a3c\",", "\".z c #14c614\",", "\".A c #c4c6c4\",", "\".B c #5c5e5c\",", "\".C c #24a624\",", "\".D c #444a44\",", "\".E c #0ce60c\",", "\".F c #a4a6a4\",", "\".G c #e4e6e4\",", "\".H c #347234\",", "\".I c #249624\",", "\".J c #747274\",", "\".K c #1cb61c\",", "\".L c #4c4a4c\",", "\".M c #04f604\",", "\".N c #949694\",", "\".O c #3c663c\",", "\".P c #d4d6d4\",", "\".Q c #b4b6b4\",", "\".R c #f4f6f4\",", "\".S c #6c3a3c\",", "\".T c #e40e0c\",", "\".U c #843234\",", "\".V c #249e24\",", "\".W c #6c6a6c\",", "\".X c #1cae1c\",", "\".Y c #04ee04\",", "\".Z c #cc1614\",", "\".0 c #7c7e7c\",", "\".1 c #643e3c\",", "\".2 c #0cde0c\",", "\".3 c #544244\",", "\".4 c #2c8e2c\",", "\".5 c #8c8e8c\",", "\".6 c #14ce14\",", "\".7 c #cccecc\",", "\".8 c #acaeac\",", "\"#` c #eceeec\",", "\"#. c #545254\",", "\"## c #3c6a3c\",", "\"#a c #7c3234\",", "\"#b c #c41a1c\",", "\"#c c #942a2c\",", "\"#d c #643a3c\",", "\"#e c #2c962c\",", "\"#f c #04fe04\",", "\"#g c #9c9e9c\",", "\"#h c #dcdedc\",", "\"#i c #bcbebc\",", "\"#j c #fcfefc\",", "\"#k c #dc0e0c\",", "\"#l c #f40604\",", "\"#m c #14d614\",", "\"#n c #b41e1c\",", "\"#o c #347e34\",", "\"#p c #445244\",", "\"#q c #1cbe1c\",", "\"#r c #000000\",", "\"#s c #000000\",", "\"#t c #000000\",", "\"#u c #000000\",", "\"#v c #000000\",", "\"#w c #000000\",", "\"#x c #000000\",", "\"#y c #000000\",", "\"#z c #000000\",", "\"#A c #000000\",", "\"#B c #000000\",", "\"#C c #000000\",", "\"#D c #000000\",", "\"#E c #000000\",", "\"#F c #000000\",", "\"#G c #000000\",", "\"#H c #000000\",", "\"#I c #000000\",", "\"#J c #000000\",", "\"#K c #000000\",", "\"#L c #000000\",", "\"#M c #000000\",", "\"#N c #000000\",", "\"#O c #000000\",", "\"#P c #000000\",", "\"#Q c #000000\",", "\"#R c #000000\",", "\"#S c #000000\",", "\"#T c #000000\",", "\"#U c #000000\",", "\"#V c #000000\",", "\"#W c #000000\",", "\"#X c #000000\",", "\"#Y c #000000\",", "\"#Z c #000000\",", "\"#0 c #000000\",", "\"#1 c #000000\",", "\"#2 c #000000\",", "\"#3 c #000000\",", "\"#4 c #000000\",", "\"#5 c #000000\",", "\"#6 c #000000\",", "\"#7 c #000000\",", "\"#8 c #000000\",", "\"a` c #000000\",", "\"a. c #000000\",", "\"a# c #000000\",", "\"aa c #000000\",", "\"ab c #000000\",", "\"ac c #000000\",", "\"ad c #000000\",", "\"ae c #000000\",", "\"af c #000000\",", "\"ag c #000000\",", "\"ah c #000000\",", "\"ai c #000000\",", "\"aj c #000000\",", "\"ak c #000000\",", "\"al c #000000\",", "\"am c #000000\",", "\"an c #000000\",", "\"ao c #000000\",", "\"ap c #000000\",", "\"aq c #000000\",", "\"ar c #000000\",", "\"as c #000000\",", "\"at c #000000\",", "\"au c #000000\",", "\"av c #000000\",", "\"aw c #000000\",", "\"ax c #000000\",", "\"ay c #000000\",", "\"az c #000000\",", "\"aA c #000000\",", "\"aB c #000000\",", "\"aC c #000000\",", "\"aD c #000000\",", "\"aE c #000000\",", "\"aF c #000000\",", "\"aG c #000000\",", "\"aH c #000000\",", "\"aI c #000000\",", "\"aJ c #000000\",", "\"aK c #000000\",", "\"aL c #000000\",", "\"aM c #000000\",", "\"aN c #000000\",", "\"aO c #000000\",", "\"aP c #000000\",", "\"aQ c #000000\",", "\"aR c #000000\",", "\"aS c #000000\",", "\"aT c #000000\",", "\"aU c #000000\",", "\"aV c #000000\",", "\"aW c #000000\",", "\"aX c #000000\",", "\"aY c #000000\",", "\"aZ c #000000\",", "\"a0 c #000000\",", "\"a1 c #000000\",", "\"a2 c #000000\",", "\"a3 c #000000\",", "\"a4 c #000000\",", "\"a5 c #000000\",", "\"a6 c #000000\",", "\"a7 c #000000\",", "\"a8 c #000000\",", "/* pixels */", "\"`i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i`i`i```i`i`i`i`i`i`i`i\",", "\"`i`i`i`i```i`i`````i`i`i```i```i```i```i```i`i`i`i`i`i`i```i`i`````i`i`i```i```i```i```i```i`i`i`i`i`i`i```i`i`````i`i`i```i```i```i```i```i`i`i`i`i`i`i```i`i`````i`i`i```i```i```i```i```i`i`i`i`i`i`i```i`i`````i`i`i```i```i```i```i```i`i`i`i```i```i```i``\",", "\"```i```i`i`i`i`i`i`i```i`i`i`i`i`i```i`i```i```i```i```i`i`i`i`i`i`i```i`i`i`i`i`i```i`i```i```i```i```i`i`i`i`i`i`i```i`i`i`i`i`i```i`i```i```i```i```i`i`i`i`i`i`i```i`i`i`i`i`i```i`i```i```i```i```i`i`i`i`i`i`i```i`i`i`i`i`i```i`i```i```i`i`i`i`i`i`i`i`i\",", "\"`i```w`i```w```i```w`i`i.u`i```w```i`w`i`i`w`i```i```w`i```w```i```w`i`i.u`i```w```i`w`i`i`w`i```i```w`i```w```i```w`i`i.u`i```w```i`w`i`i`w`i```i```w`i```w```i```w`i`i.u`i```w```i`w`i`i`w`i```i```w`i```w```i```w`i`i.u`i```w```i`w`i`i`w`i```w```i.u`i```w``\",", "\"`i`i`i`i`i```i```i```i`i`i`i`i`i```i`i```i```i`i`w`i`i`i`i```i```i```i`i`i`i`i`i```i`i```i```i`i`w`i`i`i`i```i```i```i`i`i`i`i`i```i`i```i```i`i`w`i`i`i`i```i```i```i`i`i`i`i`i```i`i```i```i`i`w`i`i`i`i```i```i```i`i`i`i`i`i```i`i```i```i`i```i`i`i```i`i``\",", "\"`i`i```i`i`i`i```i`i`i```i```i`i`i```i`i`i`i`w```i```i```i`i`i`i`i`i`i```i```i`i`i```i`i`i`i`w```i```i```i`i`i`i`i`i`i```i```i`i`i`i`i`i.D.D.D`i`i.D`i`i.D.D.D`i`i`i`i```i```i`i`i```i`i`i`i`w```i```i```i`i`i`i`i`i`i```i.D`i`i`i```i`i`i`i`i`i`i`i```i`i`i`i`i\",", "\"`i`w`i```w``.u`R.n`e#a.n`R.3`i.u`i`i`w`````i`i`i`i`i`w`i`i`w```i.u`i`i`w`i`i.u`i`i`w`i`````i`i`i`i`i`w`i`i`w```i.u`i`i`w`i`i.u`i.D`m`U`3`q`3`3`q`3`q`3`q`3`3`3.v.O.D`i`w`i`i.u`i`i`w`i`````i`i`i`i`i`w`i`i`w```i.u`i`i.b`U`3.v.b`i`i`i`````w```i.u`i```i.u`i```i\",", "\"`i`````i```T.p`n.e`F`F.e.Z`##d`i`i```i`i`i`i`````i`````i```i`i`i`i```i```i`i`i```i```i`i`w`i`````i`````i```i`i`i`i```i```i`i`i`i.y#q.Y`x.M`x`x`x.M`x`x.M`x`x`x.Y.t.y`i```i`i`i```i```i`i`w`i`````i`````i```i`i`i`i```i.v.E`x`j.v.D```w`i`i`i`i```i`i`i`i`i`i```i\",", "\"```i`i`i`T.a`F`O`O`O`O`O`O`p#c.u`i`i`i`w```i`w`i```i`i`i`i```i```i```i```i```i`i`i`i`w`i```i`i`w```i`i`i`i```i```i```i```i```i`i`W.6#f#f#f#f#f#f#f#f#f#f#f#f#f#f.6`W`i```i```i`i`i`i`w`i```i`i`w```i`i`i`i```i```i`i.D`3`x#f.M`q.D`i`i`i```i`i`i`i```w`````i`w`i\",", "\"`i`i`i.u`H`F`O`O`O`O`O`O`O`p.c.u`i```i`i`i`i`i`i`i`w```i`w`i```i`w```i`i`w`i```w```i```i`i`i`i`i`i`i.u`i`i`w```i`i```w`i`i`w```i`W.z.M.M.M`x`5#f#f#f#f`5.M.M`x.M.z.y`i`i`i`w```i.u`i```i`i`i`i`i`i`i.u`i`i`w```i`i```i`q`x#f`x`3.D```i`i`w```i.u`i`i`i`i`i`i```i\",", "\"`i```i.3.m`O`O`O`g`D.m.g#k.g#d`i`i`i`````i`````i```i`i```i```i```i`i`i```i```i`i`i`i```i.u`````i```i`i```i```i```w`i`i```i```i`i.r`G`3`q`3`q`s.Y#f#f.Y.X`q`q`q`q.o.r`i```i```i`i`i`i```i```````i.u`i`i```i```i```w`i.D`3.M#f.M`q`i`i`````i```i`i`i```i`w```i`i`i\",", "\"`i`w`i`t.Z`O`O.e#a.u.3`T.n.n.u`i```i`w`i.3`R#d#d`t.3`i`i`i`i`i.u.3`t#d`t`R.3`i``.L.u#d`e.S.u.3`t#d`t`R.u`i`i`i`i`i``.u.3`t#d`t`R.u`i.D`i.D`i`7`v#f#f`v.O`i.D`i`i`i`i`i.D.y##.H`z`b.D`i`i.L```i`i`i#p`W`m`m.y.r`i`i`i`i`q`x#f.M`3.D`i`i`i.r`W`m`m`W#p`i`i```i.L``\",", "\"`i`i`i#d`N`O`O`g`E`i`i`i```i```i`i`i.3`e.a.g`Z`g.Z.a`e.3``.L.3#a`D`N`N`Z.g.a`e.3```R`n`F`N.w`D.Z`N`Z`n.w`t.L````.L`T`o`n`N`N`N#b.a.n.u`i`i`i`W.6#f#f.6`W`i`i`i`i`i`i`W.I#q`v`j#m`Q`U.y```i`i`i.r.o.X.6.2.2`X.C`m.D`i.D`3.M#f`x`q.D`i`i.O`h`X.2`j`X.q`.`b`i```i`i\",", "\"`i```i`T`n`O`O#l.a`E.u`i```i`i`w``.3.h`g.i`O`O`O`O.i#k#c`T`t`#`F`O`O`O`O`O.i#k#c`T`t`N`O`O`p.i`O`O`O`O`p.m`t`i`i#d.#`F`O`O`O`O`O.i`Z.c.u```i`W.l#f#f`v`W```i```i`i.O.K.Y#f#f#f#f#f`M.q`W`i``#p.I`S`5#f#f#f#f.M.6`G.D`i`q`x#f.M`3.D`i`z`Q`x#f#f#f#f`5`S#o`i`i```i\",", "\"`i`i`i.u.h#l`O`O.i`N.w`E.u`i`i`i.3.h`F`O`O`O`O`O`O`O`O.g#d`#`p`O`O`O`O`O`O`O`O`F`H#d`Z`O`O`O`O`O`O`O`O`O`p#c.u`R`D`p`O`O`O`O`O`O`O`O`g#a```i`W.6#f#f.6`W`i`i`i`w`b`K`x#f#f#f#f#f#f#f`x`h`L.D`.`j#f#f#f#f#f#f#f`5`X`7.D`3.M#f.M`q`i.D.I`x#f#f#f#f#f#f.2`m`i`i`i`i\",", "\"`````i`w#d`n.i`O`O`O#l`N.w`t`w```e#k`O`O`O`F.g`N`F`O.i.w`H`F`O`O.i#k`n.g`F`O`O`O.g#a`N`O`O`O`p`N.g.e`O`O`O`n`R`o`F`O`O#l`g`n`N`p`O`O`O#n`T`i`W.6#f#f.6`W`i```i`i#o`j#f#f`x.6`Q`v.M#f#f`S.H`W`c`5#f`5.2`Q.z`M#f#f`x`I#p`q.M#f`x`3.D#p.X`5#f`5.6`Q`v`M.K`b`i``.L``\",", "\"`i`i`i```i`E`D`F`O`O`O`O`p`D`t.u.a.i`O`O.g.c`R`t`H`Z.g`e`D`O`O.i`n`H`e`e.w#k`O`O`F.h`Z`O`O`F`o#d`T#a#k`O`O`N`e`n`O`O#l.m.c.n#a.a`F`O`O`g`E`i`W.6#f#f`v`W`i`i``#p`K`5#f.M`s`7#p`m`Q`5#f`x.I#o.E#f#f.6`G`L`z`I.Y#f#f.z`z`3`x#f.M`q`i`L.C`5#f`x`K`7`7`U.f.D`i`````i\",", "\"`i`i```i`i`w`T`H.m`F`O`O`O#l.w#d.g`O`O`F#a```i`i.u`e#a#d`N`O`O`O#k`N`N`N`Z`p`O`O#l`D`Z`O`O`g#d`i`i`R`n`O`O#k`o.e`O`O#l#k`N`N`N`g#l`O`O`F.n`i`W.6#f#f.6`W`i`i``.y`X#f#f`S`m`i`i`i.v.Y#f#f`s`I`x#f`x`I.D`i`i`W.z#f#f.2`m`q.M#f.M`q`i`i.v.E#f`5`M#q`3`7.r`i```i```i\",", "\"`i`w`i```i```i```R`H`n.i`O`O`g`H`N`O`O`Z`t`i```i```w```E#k`O`O`O`O`O`O`O`O`O`O`O#l.a`g`O`O`N`t`i``.3.m`O`O`F.a`F`O`O`O`O`O`O`O`O`O`O`O`F`e`i`W.6#f#f.6`W`i```i`W.6#f#f`v`W```i`i.f.E#f`5`Q.X.M#f`M#o`i`i``#p`s`5#f.E.o`3`x#f`x`q.D`i`b.C`M`5#f#f`x.6`U`L`i`i`i`i\",", "\"`i```i`i`i`i`i`i`i``#d.g`O`O`F.h`N`O`O`Z`t`w`i`i`i`i.u`E.e`O`O`O`p`F`F`2`F`F`F`F`g`o`Z`O`O`Z#d`i`i.u.m`O`O`F`D`F`O`O.i`2`F`F`F`p`F`F`2.g#d`i`W.6#f#f.6`W`i`i`i`W.6#f#f.6`W`i```i.f.E#f`5.t.X`5#f`M`.`i`i`i#p`s#f#f`j`G`q`x#f.M`3.D`i`i`b`U.z`M`5#f#f`j`U.D`i.u`i\",", "\"`i`i`w```i.u`i```i`i.u.a`O`O`p`#`Z`O`O#k`E```i.u```R.n`E`Z`O`O#k`o`e#a`e`e`e.c`e`E.S`N`O`O`N`t`i``.3#n`O`O`F.a`F`O`O`Z`H`e#a`e`e`e#a`e`E.u`i`W.6#f#f`v`W`i```i.y`X#f#f`S`m`i```i.v.Y#f`5`s.V`x#f.M`I.r```i`W.z#f#f`S`m`3.M#f`x`q.D```i`i.D`z.4.z`x#f#f`Q.y```i`i\",", "\"`i```i```T#a#a`R.3`T`E.g`O`O`2.p`D`O`O.i#n`E.3`T`e#n.g.c`n`O`O`p.a#d`T.u`T#d.U`E.u`t`N`O`O`Z`t`w`i.u.m`O`O`F.h`N`O`O`p`##d`T.u`R`E#a#d`i`i```z.6#f#f.6`W`i`i``#p.X`5#f`x`K`z.b`7#q`5#f`x.I`..E#f#f.6.f`L`W`I`M#f#f`c`W`3`x#f`5`K.y.r.r.o`G`z.y.o`v#f#f`v##`i`i``\",", "\"`i`i`i`w`e#k.e.g.m#n`N#l`O`O`N`E`H`p`O`O#l`N.m`n#k.i.i`##c`p`O`O#l`N.m#n`n`g`F`n#d`t`Z`O`O`N#d`i``.3#n`O`O`F#a.w.i`O`O#l`N.m#n`n`g`F`D`t`i`i`W.6#f#f.6`W`i```i`i.v`M#f#f.Y.z.t.6`x#f#f`S`m`W.z`5#f`5`S.t#q`M#f#f`x`I.r`G`M#f#f.E`Q.v`m.6.E.6`Q.t`M#f#f`v`z`i```i\",", "\"`i`i`i.3.a`O`O`O`O`O`O`O`O#l.w.u`R.m.i`O`O`O`O`O`O`O`O`n`E`D#l`O`O`O`O`O`O`O`O`p#c.k`N`O`O`Z`t`i``.u.m`O`O`2`e#d.g.i`O`O`O`O`O`O`O`O`F`H.u`i`W.6#f#f.6`W`i`i`i`i`W.K.M#f#f#f`5#f#f#f.Y`h#p.D.v`j#f#f#f#f#f#f#f#f.z`7``.O.6#f#f#f`5`s.V`x#f#f`5#f#f#f`5`s`L`i`i`i\",", "\"`i```i`R.m.i`O`O`O`O`O`O`F`D`t`i``#d`n`p`O`O`O`O`O`O`F.w`T`t`D`p`O`O`O`O`O`O`O`g`H#d`N`O`O`N`t`i`i.3`D`O`O`F`e.u`E`n#l`O`O`O`O`O`O.i.Z`e`i`i`W.6#f#f.6`z`i`i```i`i`m`Q`x#f#f#f#f#f`M.X`W`i`i`L.I.E`5#f#f#f#f.M.6`G`i`i.D.4`S`5#f`5`Q.C`M#f#f#f#f#f.M`v.f.D`i```i\",", "\"`i`w``.u`E.a.g.e`F`F#k`n`H`R`i`i`i.u`R.h.g.e`F`F`Z`D.c`T`i`w`R`o`n`g`F`F.e.Z.a.n.u`R.m`F`F`n`R```i.u.a`F`F`N.k`i``#d.h.g.e`F`F#k.g.w.k.u```i.y.t`M`j`s.y```i`i`i``.D.O`I.z`j`M`S`Q`U.y`i`i`i`i`L.v.t`v`M.2.6`K`7.D```i`i`L.o.X.6`v`I`7`3`Q`v`j`j`v.C`m.D`i`i`w`i\",", "\"```i`i`i`i.u`R`E#a`e.k`T.u```i```i```i.u`T`E`e.n.k`T`w`i```i```w`T.k`e#a`E`R.u```i.u#d#a`e.k.u`i``.u#d`e`e`E.u`i`i`i.u`R`E`e`e`E`R.u`i`i`i`i.D`z.f.H`7`i`i```i`i`i```i.r`W`m.H`7.y.D`i`i```i`i`i.D`b.O.H`m`W#p`i`i`i`i```i`i`L`W##.y`i.D`L.O.f.H`z`L`i`i`i```i``\",", "\"`i```i`i```i```i`i`i`i`i`i`i`i`i```i`i`i`i`i`i```i`i```i`i`i```i```i`i`i`i```i`i`i`i```i`i`i`i```i`i`i`i`i`i`i`i```i```i`i```w`i```i`i```i```i```i`````i`i`i```w```i`i```i`i`i`i`i`i```i`i```w```i```i`i`i`i```i```i`i`w`i`i`i`i`i`i`i`i`i`i`i```i`i`i```i`i`i`i\",", "\"`i`i`i`i`i```i```i```i```i```w`i```i`i```i`w`i`i`i`i`i`i```i`i```i`i`i```i`w`i`````i`i```i`i`i`i`i```i```i```i```w```i`i`i`i`i```i```i```w`i`i`i`i`i`i`i```i`i```i```i`i`i`i`i.u```i`i```i`i`i`i`i`i`i`i`i```i`i`i```i```i`i.u`i```i`````i```i`i```i`i`i```i```i\",", "\"`i`i.u`i`i`w`i```i`i`w`i`i`i```i`i```w`i`i```i```i```i`w`i```i`i`i.u`i`i`i```i`i`w```i`i`i```i```i`i`i`i`i`i`i```i`i`i.u`i```i`i`i```i`i`i`i```i```i```i`i```i`i`i`i`i```i.u`i`i`i```i`w`i`i```i```i```i`i`i`i```i`i`i`i`w`i`i`i`i```i`w`i`i`i`i`i.u`i```i`w`i`i\",", "\"`i`i`i```i```i`i`w```i```i`w`i`i`w`i`i```i`i`i`i`i`w```i`i`i`w```i`i`i```w`i`i`i`i`i`i```i`w`i`i`w```i.u`i```w`i`i```i`i`i`i`w```i`w`i`````i`w`i`i`i`w`i`i`w`i```w```i`w`i`i`i`i`i`w`i`````i`w`i`i`w`i```w```i`i.u`i```i```i```i`i`w`i`````i.u`i`i```i`i`i```i``\",", "\"`i`````i`i```i`i`i`i`i`i```i```i```i```i`i.u`i```i```i```i```i`i`i```w`i`i```i```i```w`i```i`````i```i`i`i```i`i`i`i`i```w```i`i`i```i`i`i`i`````i`````i`````i`i`i`i`i```i```i.u`i```i`i`i`i`````i`````i`i```i`i`i`i`i`w`i`i`i.u`i```i`i`i`i`i```i`i```i`i`i```i\",", "\"```i`w`i`i`w`i```i```i```w```i`i`i`i`i`w`i`i`i`i```i`i`i`w`i```i`w```i```i```i`w`i`i`i`i`i`i`i`i`i`i```i`i`i`i```w```i```i`i`i```i`i`i`w```i`i`i```i`i`i`i`i`i```i```i```i```i`i`i`i`i`i```i`i`i```i`i`i`i`i`w```i```i```i```i`i`i`i`i`i```i```i`i`i`w`````w`i`i\",", "\"`i`i```i```i```i`i```w`i`i`i```w```i```i```i```w`i`i```i```i```i`i```i`i`i`i```i```i```w``.L`4#.#.#.`4.L```w```i`i```i`i`i```i`i`w```i`i`i`i`w`i`i`w```i`w```i```w`i.L#.#.#.`4.L```i.u`i`i`w`i`i`w`i```w```i```i`i```i`i`i`i```i```i.u`i`i`w`i`i.u`i`i`i`i`i`i`i\",", "\"`i`i`i`i`i```i``.L```i`i`i`i`i`i`i`i```i`i```i`i```i`w`i`i```i```i`i`i`i`w`i`i`i`w`i`i#.`r.5`0`B`B`B`0.5.J`u`i`i`i`i`i.u`i`i.u`i`i`i`````i`````i```i`i`i`i```i`i#..J.N`0.8`B`0.5`r#.`i`i```````i```i`i`i`i```i```i`w`i```w```i`w`i`i```i```````i`i```i`i```i.u`i\",", "\"`i.u`i```w`i`i```i`i`i``.L`````i.u`i`i.u`i`i```i.L```i```i`i`i`i`i.u`i```i```i```i.L.W.F`8`C.....R#j..#``8.Q`P#.```i`i`i`i`i`i```i```i`i`w`i`i`i`i`i```i`i`i.L.J`0#h`C#j#j....`C`8.F.J.L`i`i`i`i`i`i```i`i`i`i.L```i`i`i`i`i`i```i`i`i`i`i`i`i`i`i`i`i```i`i`i`i\",", "\"`i`i`i`i`i```i`i```i.L`````i`i`i`i`i`i```i`i.L`````i`i`i.L````.L```i`i`i`i.L```i.L.W`d`C#j#j#j#j#j#j#j#j#j..`8.N#.`i.u`i```i`i`i`i`i`w```i```i.u`i`i.L`````4`a`Y.R#j#j#j#j#j#j#j#j.R.7.0.L`i.u`i``.L```i.u`i`````i`i```i```i`i`i.u`i```i.L```i.u`i```i.L`````i``\",", "\"`i```i`````i.L```i`````i`i`i``.L`````i`i.L`````i`i`i.u`````i`i```i```i.u`````i``.d.`.R#j#j#j#j#j#j#j#j#j#j#j#j.G`y`4`i`i```w```i.u`i```i`i`i`i`i```i```i.L.J`A#j#j#j#j#j#j#j#j#j#j#j...7`r`i`i`i```i`i```i`i`i`i`i.L```i``.L```i`i`i`i`````i`i`i```i`````i`i```i\",", "\"`i```w`i`i```i`i```i`i`i``.L`````i`i.L`````i`i`i.u`i`i`i`i```i`i```i`i`i`i`i`i`4.N#`#j#j#j#j#j#j#j#j#j#j#j#j#j#j.P.J`i`i`i`i`i`i`i`i`i`i```i```i`i```i``.B.`..#j#j#j#j#j#j#j#j#j#j#j#j..`0#.```i`i```i`i```i.u`i`````i`i```i```i``.L```i`i`i```i`i.L```i``.L```i\",", "\"`i```i`i`i```i```i.L```i```i`i```i`````i`i`````i```i`i```i`i.L```i`i.u`i`i`i.u#.`B..#j#j#j#j..`C`1`C..#j#j#j#j#j.R`6.L```i```i```i```i.L```i`i.L```i`i.L.5`1#j#j#j#j#j..`C#`#j#j#j#j#j#j`8.J`i`i```i.u`i`i```i```i`i`i``.L```i```i```i`i.u`i`i.L`````i`i```i`i`i\",", "\"`i`i`i```i.L```i`````i`i`i```i`i`i`i`i`i.L```i`i```i`i```i`````i```i`i```i`i`i.L.0.P..#j#j`1.`.N`a.5.8`l#j#j#j#j#j.``u`w`i`i.L```i.L`````i`i```````i``.d`d#j#j#j#j#j`l.8`V.5#i`C#j#j#j#j.R`6.L`i```i`i```i`i`i`i```i.L```i`i`i.L```i`i`i`i`i`````i`i`i`i`i`````i\",", "\"`i```i```i`````i`i`i.L```i.L```i.L```i`````i`i.L```i`i``.L```i`i`i```i`i```i`i`i.L`P.A...G`6`f.D`i`w#..N`C#j#j#j#j.7.d```i`````i`````i`i`i.u`i`i`i`i.L.0`1#j#j#j#j.G`y#..L`w.d`B..#j#j#j#j`d`f`i.L```i`i`i.L```i.L`````i`i```i```i``.L`````i`i`i`````i```i`i```i\",", "\"`i`w`i`i`w```i``.L`````i`````i`````i`i.L```i`````i`i.L```i```i``.L```i.L```i```i`i.L`r`0`6`u`i```i`i`i.W`8#j#j#j#j`A.B```i`i`i`i`i`i`i.u`i`i`i`i```i#..F..#j#j#j..`B`u`i`i`i`i.j#h#j#j#j#j`8`r```i`i``.L```````````i`i`i.L```i`i.L`````i`i.L```i`i`i.L```i``.L``\",", "\"`i`i```i`i`i`i```i`i`i`i`i```i`i`i.L`````i`i`i`i.L`````i`i`i`i```i```i```i```i.L```i`i#.#.`i`i`i`i`i`i`r`8#j#j#j#j`Y.B`i`i```i.L```i`i`i`i```i.L```i`f.A#j#j#j#j`1.x`w`i```i```f#i#j#j#j#j#``a`i`i.L`````i`i`i`i`i`i.u`i```````i```i`i`i`````i``.L`````i`i```i`i\",", "\"`i`i`i```i```i`i```i.u```i```i.L`````i`i`i.L```i```i`i`i````.L```i`i`i```i```````i`i`i`i`i`i`i```w```w`a`1#j#j#j#j#i`f```i```````i`i.u`i`i`i`````i`i.W`8#j#j#j#j`8`J`i```i```i.L.F..#j#j#j`C`y`w`i```i`i`i```i`i.u`i`i```i`i`i`i`i`i.u`i`i`i.L`````i`i``.L```i``\",", "\"```i`w```i`i``.L```i`i`i`i```i```i`i`i.u`i```i`i```i`i```i`i```i`i.u`i`i.L```i`i`i.u`i```i```i`i```i`4.F..#j#j#j..`6.L```i`i`i`i.L```i`i```i.L```i.L`P`1#j#j#j#j`d`f`i`i`i```i.L`y`C#j#j#j.R#g`4```i`i`````i```i`i`i```i`i```i.u`i`i`i`i`i`````i`i`i`i```i```i`i\",", "\"`i`i`i`i```i```i`i```i``.L```i`i``.L```i`i```i`i.L```i.L`````i`i`i`i```i```i`i.u`i`i`i`i.L```i`i`i`i.W`A#j#j#j#j`l.j`i`i`i.u`i```i`i```i.L`````i```i.5`C#j#j#j#j`B#.`i```i`i`i.L`y.R#j#j#j#j`B`4`i`i```i.L```i.L```i`i`i`i.L```i`i```i.u`i`i`i`i.u`i`i`i`i.L```i\",", "\"```i```w`i`i`w```i.L```i```i`i```i```i```i`i.u`````i```i`i`i.L`````i`i`i`i.u`i`i`i`````i```i`````i#.`k`C#j#j#j...Q`f```i`i`i`i```i`i```i```i`i`i`i.L`y.R#j#j#j..`B`4`i`i`w```i`w.5.R#j#j#j..`B#.```i.L`````i```i`i`i``.L`````i```i`i```i`i`i.u`i`i````.L```````i\",", "\"`i`i`i`i```i```i```i```i`i`i.L```i`i`i`i.L```i`i`i`i`i``.L`````i`i.L`````i`i`i```i`i`i`i`i.L```i.L`P#h#j#j#j#j.G`a`i`i`i```i`i`w`i`i.L```i`i`````i.L`y`C#j#j#j#j`B#.```i```i`i`i`V#`#j#j#j..`B`4`i```i`i`i`i```i``.L`````i`i`i`i.L```i`i.u`i`i```i`i`````i`i`i`i\",", "\"`i.u`i`i```i`i`i```i`i``.L`````i`i.u```i```i```i```i.L`````i```i`````i`i```i`i`i`i.L```i`````i``.B.`..#j#j#j..`B`u```i```w`i```i```i```i``.L```i```i`y.R#j#j#j#j`B`4`i`i`i`i`i.L.x`C#j#j#j#j`B#.`i`i```i``.L```i`````i`i```i.u`i```i```i`i`i```i`i```i`i`i`i.u`i\",", "\"`i`i```i`i`w`i`i`i``.L`````i`i`i`i`i`i```i`i`i`i```i```i```i`i```i`i``.L```i.u`i`````i```i`i`i#.#g#`#j#j#j#j`8.j.L`i`w`i`i`i`i`i`i```i`````i`i`i`i.L`y.R#j#j#j#j`B`4`i`i```w``.L`y`C#j#j#j#j`B`4```i`w`i`````i`i`i`i`i`i.L```i`i`i```i`i```i`i`i.L```i.L```i`i`i\",", "\"```i`i`i```i```i```i```i`i`i.u`i```i`i`i```i.u`i```i`i`i`i`i``.L```i```i`i`i`i`i```i`i.L````.L`P`8#j#j#j#j`C#g#.```i```i```i.u`i```i.L```i`i.u````.L`y`C#j#j#j..`B#.`i`i`i`i`i`i`y`C#j#j#j..`B`4`i```i```i`i``.L```i```i```i```i```i.L```i`i.u```i`i`````i```i``\",", "\"`i`i```w`i```i``.L```i`i.u`i`i`i```i.u`i`i`i`i`i`i.u`i``.L```i```i```i`i```i```i`i`i`````i`i.d`d..#j#j#j..#i.d`i`i```i`i`i`i`i`i```i```i`i`i`i`i`i.D.5.R#j#j#j#j`B`4`i```w```i.L.5.R#j#j#j..`0`4`i`i`i`i.L```i```i``.L```i`i.L```i```i```i`i`i`i```i`i`i``.L```i\",", "\"`i`i`i`i`i`i`i```i`i```i`i`i```i.L```i```i.u`i```i`i`i`````i```i`i`i.L```i.L```i.u`i`i`i``#.#g#`#j#j#j#j#h.0`w```i`i`i.u`i```i`i`i```i`i.u`i`i`i``.L`a`1#j#j#j#j#i`u`w`i`i`i`i.L`6.R#j#j#j.R.N.L`i.u`i`````i```i`i```i`i```i```i`i```i`i.L```i`i`i.L```i```i```i\",", "\"`i.u`i```i.u`i`i```i.L```i`i.L`````i`i```i`i`i`i`i```i`i`i`i`i``.L`````i```i```i`i```i``.L`P#h#j#j#j#j`C`6#.`i`i`i```i`i`i`i.u`i`i.L```i```i`i.L```i.J.G#j#j#j#j`A`J```i```i``#..8..#j#j#j`C.x`w`i`i`i`i`i`i`i```i`i``.L```i`i.u`i`i.L`````i``.L```````i`i`i.L``\",", "\"`i```i`i`i```i`i.L`````i`i`````i`i```i`i```i````.L```i.L````.L`````i`i`i`i`i`i`i`i.L```i.d`d..#j#j#j...`.B`i`i```i`w`i```i`i`i```i```i`i`i`i`````i``.W.P#j#j#j#j.G`P`i`i`i`w`i`f.A#j#j#j#j`l`r`i`i`````i.u```i.L```i`i```i`i`i`i`i`````i```i`i```i`i`i`i.u`i```i\",", "\"`i`i```i`i`i`i`````i`i```i`i`i`i`i`i`i`i`i.L```i```i`````i`i```i`i```i``.L````.L`````i#..F#`#j#j#j#j`A.J`i`i`i`w`i```i```w```i.L`4.W.J.J.d.L`i`i```i`f`Y#j#j#j#j.R`k.L```i```i`P`l#j#j#j#j`Y.B`i```i`i`i`i`i```i`i```i`i`i``.L```i`i`i`i`i`i```i`i``.L```i```i`i\",", "\"`i`i`i.u`i```i```i```i`i.L````.L````.L`````i`i`i`i`i`i`i`i`i```i`i``.L`````i`````i`i.L.x`l#j#j#j#j.G.5`4`i`w`````i```i`i`i`i```f`6`A`l`l.A`a`4`i`i`i#.`0..#j#j#j#j`A.W`i`i`i`f`B.R#j#j#j...F#.```i`w```i`i`i```i```i.u`i```i```i``.L```i.u`i`i.L```i```i`i`i`i``\",", "\"`i```i`i`i```i.L```i.L`````i`````i`i`````i````.L````.L`````i``.L```i```i`i`i`i`i`i`i.W.A..#j#j#j..`B.d#.#.`u.B.B.d.B`f.L```i#.`6#`#j#j#j..`8`P.L```i.L.x#`#j#j#j#j`C.Q`P.d.J`0`1#j#j#j#j`1.0`i`i`i`i`i`i.u`i```i.L```i`i`i```i`i```i```i`i`````i```i`i```i```i`i\",", "\"`i`w`i```i.L`````i`````i`i`i`i`i`i```i`i`i`i`i```i`i```i`i.L```i```i`i`i`i`i`i.u`i#..F`C#j#j#j#j.R`Y`B.8`B#i`Y.7.7.7`B.d`i`i.W.P#j#j#j#j#j...Q`u`i```i`J`A#j#j#j#j#j..#h`A#h.R#j#j#j#j#j`d.B`w`i```i.u`i`i`i`i```i`i```i.L```i.L```i`i```i`i`i`i.L```i```i.L```i\",", "\"`i`i`i`i`````i`i`i`i`i`i```i.L```i.L`````i.L```i`i```i.L`````i`i`i.L```i.u`i`i`i.L`a`l#j#j#j#j#j#j#j..#j..#j#j#j#j#j.G.j``.L`a#`#j#j#j#j#j#j.7.d```i`i#.#g`C#j#j#j#j#j#j#j#j#j#j#j#j#j`1`V.L`i`i`i`i`i`i```i`i`i```i.L`````i`````i`i`i```i`i.u`i```i``.L`````i`i\",", "\"`i```w```i`i`i`w`i`i.u`i`i```i`i```i`i`i```i`i``.L```i`````i`i```i```i`i```i```i.W.A#j#j#j#j#j#j#j#j#j#j#j#j#j#j#j#j.G`P```i`a`1#j#j#j#j#j#j.7.d```i```i.W.A#j#j#j#j#j#j#j#j#j#j#j#j.R.8`f```i```i.u`i```i.u`i`i.L`````i`i`i`i`i.L```i.L```i`i`i```i```i`i`i```i\",", "\"`i```i`i`i```i`````i`i`i`i`i```i`i```i`i`i``.L```i```i`i`i`i.L`````i`i`i`i`i.L`4`k`C#j#j#j#j#j#j#j#j#j#j#j#j#j#j#j#j.G.j`i```J.7#j#j#j#j#j..`B#.`i```i``.L.0`A..#j#j#j#j#j#j#j#j#j..`d.W`i`i`i`i`i```i`i`i`i```i```i`i```i.u`i`````i`````i`i```i`i`i`i`````i.L``\",", "\"`i```i`i`w```i`i```i`i``.L```i``.L```i.u`i`i```i```i`i``.L`````i```i.L`````i```f`Y#j#j#j#j#j#j#j#j#j#j#j#j#j#j#j#j#j`1.J`i`i.L`y`l#j#j#j...P.j`w`i```i`i`i.L.j.``1..#j#j#j#j#j..`l.8.W`i`i`````i```i`i```i```i```i```i```i`i`i`i`i`i`i`i.L```i.L```i.u`i`i```i`i\",", "\"`i`i`i```i`i`i`i``.L```i```i`i```i`i`i`i`i```i`i```i`i`````i`i`i```i```i`i.L```f.Q`l.G`1.G.G.G`1`l.G`1`l.G`1.G.G.G`l.``J`i`w`i#..x`d#h`8.Q`P`4`i```i`i``.L``.L.B`V.8`Y`8`l`8`Y.8`a`u`i`i`i`i`i`w```i`i``.L```i`i```i.L```i`i``.L````.L`````i`````i`i`i`i`i```i``\",", "\"`i```w```i````.L```i```i`i.u`i`i```i```i.L```i`i`i.L```i`i`````i`i`i`i.u`i```i.L.B.j.j.j`P.J.J.j.j.j.j.j.j.j.J`P.J.J.d.L`i```i`i.L`f`r.W`u`i`i`i`i`i`````i`i```i`w#..B.W.J`J.B#.`i`i`i.u`i`i```i`i`i`i```i`i```i.L```i`i`i.L`````i`i```i`i`i`i`i`````i```i`i```i\",", "\"`i`i`i`i`i`i`````i`i`i`i`i`i`i`i.L```i`````i`i.u`i```i```i`i```i.u`i`i`i`i`i```i`i.L```````i`i`i.u`i```w```i```i`i`i```i`i`i`i```i`i`i`i`w`i```i``.L```i`i```i```i`i`i`i`i`i`i`i`i`w`i`i`i`i`w`i```i.u`i`i```i`````i`i```i```i`i`i```i`i```i```i`i.L```i.L```i`i\",", "\"`i`i```i```i`i`i`i``.L`````````i```i`i.L```i`i`i`i`i`i.L```i.L```i`i```i```i```i```i`i`i`i`w```i`i`i`i`i`i`i`i```i`i`i`i`````i`i`i`w`i`i```i`i`w```i`i`i.L```i`i`i`i```i`i```i`i```i```i```i```i`i`i`i`i`i`i`i`i`i`i.L```i```i``.L```i.L```i.L```i```i`````i`i`i\",", "\"`i`w`i`i`w```i.L```i```i`i`i```i`i.u`i```i`i```i``.L`````i`````i`i`i.L```i```i`i`i```w`i```i`i`i```i```i.u```i`w```i```i`i`i```w```i```i`i`w```i`i```i`````i`i`i```i`i```i```i`w`i`i`i`w`i`i`i.L`````i.u`i``.L`````i`````i```i```i`i```i`i```i```i`i`i`i`i``.L``\",", "\"```i`````i`i`````i`i```i.L```i.L```i`i`i`i``.L```````i`i```i`i`i```i```i`i``.L```i`i`i`i`i```i`w```i`w```i`i```i`i`i```w`i```i`i`i`i`i`w```i`i`i```i.L```i`````i`i`i```i`i```i```i```i```i```````i`i`i```i`````i`i.L```i`i``.L```i`i`i```i```i.L```i.u`i`i```i`i\",", "\"`i`i`i`i`i```i`i.L```i`````i```i`i```i.u`i`i```i`i`i`i`i`i```i.L```i```i.L```i```i.u`i```i.L```i`i`i`i`i`i```i`i.u`i`i`i```i`i```i.u`i`i`i```i`i`i`````i`i`i`i`w```i`w`i`i`w`i`i`i`w`i`i`i`i`i`i`i.u`i`i`i```i`i`````i`i.L```i`i`i.u`i`i.L```i```i`i`i```i.L````\",", "\"```i`w```i`i.L`````i`i.L```i`i```i.L```i`i`i`i```i```i.u`i`i`````i`i.L`````i`i```i`i```i```i`i```i```i```i`i`w`i`i`i```i`w`i`i```i`i```i`i`i`````i.L```i``.L```i`i`i```i```i`````i`````i.u`i`i```i`i`i```i`i.L```i`i`i`````i`i```i`i```i```i`i```i```i`i`````i`i\"", "};"};
	string $sceneToolsIcon = ($outputPath + "SceneTools2.xpm");
	craXPMCreator($outputPath,"SceneTools2.xpm" , $SceneTools_v2);
	
	window -t  "About" -s 0 -tlb 1 craChannelControlAboutWin;
	frameLayout -mw 5-mh 5 -lv 0;
	frameLayout -mw 5-mh 5 -lv 0;
		columnLayout -adj 1;
			iconTextButton -c "showHelp -absolute \"http://www.creativecrash.com/maya/downloads/scripts-plugins/interface-display/c/scene-tools\"" -i $sceneToolsIcon; 
			text -l ("<font color=gold><h4>" + $version + "</h4></font>");
			text -l "";
			text -l "<font color=indianred><h4>Carlos Rico Adega © 2015</h4></font>";
			text -l "";
			textField -ed 0 -text "        carlos.rico.3d@gmail.com";
			text -l "";
			button -w 150 -l "Scene Tools demo" -c "showHelp -absolute \"http://www.youtube.com/watch?v=u0Bor11-9jQ\"";
			button -w 180 -l "CharlieWales' File Browser demo" -c "showHelp -absolute \"http://www.youtube.com/watch?v=WS5MbMDOW4g&feature=player_embedded\"";
			button -w 180 -l "Scene Tools 2.0.9 new features" -c "showHelp -absolute \"https://www.youtube.com/watch?v=P_bbGAZx58M&list=UUXnSX8PHpQtwJR-uN-atO3Q\"";
			separator -h 5 -st "none";
			rowLayout -nc 2 -adj 1;
                                button -w 70 -l "Downloads" -ann "Free downloads from CreativeCrash.com" -c "showHelp -absolute \"http://www.creativecrash.com/users/charliewales/contributions?tab=free_downloads\"";
                                button -w 90 -ann "Linked[In] profile"-l "Linked[In]" -c "showHelp -absolute \"http://www.linkedin.com/pub/carlos-rico/6/58/325\"";
                        setParent ..;
                        rowLayout -nc 2 -adj 1;
                                button -l "Vimeo" -ann "Vimeo Channel" -c "showHelp -absolute \"https://vimeo.com/channels/749131\"";
                                button -w 90 -l "YouTube" -ann "Youtube Channel" -c "showHelp -absolute \"https://www.youtube.com/channel/UCXnSX8PHpQtwJR-uN-atO3Q\"";
                        setParent ..;      
		setParent ..;
        window -e -wh 206 311 craChannelControlAboutWin;		
	showWindow craChannelControlAboutWin;
}

global proc string craSceneToolsGetInfoPath()
{
	string $file = `file -q -loc`;
	
	if(`optionVar -q craSceneInfoOptionsOV` == 1)
		return (`dirname($file)` + "/");
	else if (`optionVar -q craSceneInfoOptionsOV` == 2)
	        return `optionVar -q craSceneToolsCustomInfoPathOV`;
        else 
                return (`workspace -q -rd` + "data/");
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
// CharlieWales' File Browser start

global proc craMayaFileBrowser()
{
	if ( !`optionVar -exists "craMayaFileBrowserFloatingUIOV"`)
		optionVar -iv "craMayaFileBrowserFloatingUIOV" 0;
	
	if ( !`optionVar -exists "craMayaFileBrowserUILayoutOV"`)
		optionVar -sv "craMayaFileBrowserUILayoutOV" "horizontal2";
	
	if ( !`optionVar -exists "craMayaFileBrowserLiveSearchOV"`)
		optionVar -iv "craMayaFileBrowserLiveSearchOV" 0;

	if(!`optionVar -exists "craMayaFileBrowserSortByNameOV"`)
		optionVar -iv "craMayaFileBrowserSortByNameOV" 1;
	
	if(!`optionVar -exists "craMayaFileBrowserUseNamespaceOV"`)
		optionVar -iv "craMayaFileBrowserUseNamespaceOV" 1;
	
	if(!`optionVar -exists "craMayaFileBrowserViewThumbsOV"`)
		optionVar -iv "craMayaFileBrowserViewThumbsOV" 0;
	
	if(!`optionVar -exists "craMayaFileBrowserViewSceneInfoStateOV"`)
		optionVar -iv "craMayaFileBrowserViewSceneInfoStateOV" 1;

	if(!`optionVar -exists "craMayaFileBrowserThumbSizeOV"`)
		for( $size in {148, 83} )
			optionVar -iva "craMayaFileBrowserThumbSizeOV" $size;
	
	int $craMayaFileBrowserUIState = `optionVar -q "craMayaFileBrowserFloatingUIOV"`;
	
	int $craMayaFileBrowserDockControlWidth;
	int $craMayaFileBrowserDockControlHeight;
	
	if( `optionVar -q "craMayaFileBrowserUILayoutOV"` == "horizontal2" && $craMayaFileBrowserUIState )
	{
		$craMayaFileBrowserDockControlWidth = 505;
		$craMayaFileBrowserDockControlHeight = 698;
	}
	else if ( `optionVar -q "craMayaFileBrowserUILayoutOV"` == "vertical2" && $craMayaFileBrowserUIState)
	{
		$craMayaFileBrowserDockControlWidth = 1012;
		$craMayaFileBrowserDockControlHeight = 617;
	}
	else
	{
		$craMayaFileBrowserDockControlWidth = 505;
		$craMayaFileBrowserDockControlHeight = 540;
	}
	
	if(!`dockControl -q -exists craMayaFileBrowserDock`) 
	{
		craMayaFileBrowserUI;
		dockControl -area "right"
			-floating $craMayaFileBrowserUIState
			-w $craMayaFileBrowserDockControlWidth
			-h $craMayaFileBrowserDockControlHeight
			-content craMayaFileBrowserUI
			-allowedArea "left"
			-allowedArea "right"
			-l "CharlieWales' File Browser" craMayaFileBrowserDock
		;    
	} 
	
	if(`dockControl -q -raise craMayaFileBrowserDock`)
		dockControl -e -vis 0 craMayaFileBrowserDock;    
	else 
	{
		
		dockControl -e -vis 1 craMayaFileBrowserDock;
		dockControl -e -raise craMayaFileBrowserDock;
	}
	craMayaFileBrowserFileFilter 1;
}

global proc craMayaFileBrowserMoveSeparator()
{
	int $sizes[] = `paneLayout -q -ps craMayaFileBrowserPaneLayout`;
	optionVar -remove craMayaFileBrowserPanelSizesOV;
	
	if($sizes[1] == 100)
	{
		optionVar -iva craMayaFileBrowserPanelSizesOV 50;
		optionVar -iva craMayaFileBrowserPanelSizesOV 50;
	}
	else
	{
		optionVar -iva craMayaFileBrowserPanelSizesOV $sizes[2];
		optionVar -iva craMayaFileBrowserPanelSizesOV $sizes[3];
	}
}

global proc craMayaFileBrowserUI()
{
	if(!`optionVar -exists craMayaFileBrowserPanelSizesOV`)
	{
		optionVar -iva craMayaFileBrowserPanelSizesOV 50;
		optionVar -iva craMayaFileBrowserPanelSizesOV 54;
	}
	
	int $sizes[] = `optionVar -q craMayaFileBrowserPanelSizesOV`;
	int $craThumbSize[] = `optionVar -q "craMayaFileBrowserThumbSizeOV"`;
	
	if(`window -q -exists craMayaFileBrowserUI`) 
		deleteUI craMayaFileBrowserUI; 
	
	window -menuBar 0 -maximizeButton 0 -s 1 -title "CharlieWales' File Browser" -iconName "craMayaFileBrowser"  craMayaFileBrowserUI;

	paneLayout -smc "craMayaFileBrowserMoveSeparator" -cn `optionVar -q "craMayaFileBrowserUILayoutOV"` -swp 2 -ps 2 $sizes[0] $sizes[1] craMayaFileBrowserPaneLayout;	
	
	formLayout craMayaFileBrowserFileListMainForm;
	
	formLayout craMayaFileBrowserForm;
	
	frameLayout -lv 0 -mw 2 -mh 2 -cll 0 -cl 0 -bs "etchedIn" craMayaFileBrowserButtonsFL;
		columnLayout -adj 1 ;
			rowLayout -nc 9 -adj 3;		
				iconTextButton -bgc .4 .4 .4 -i "SP_FileDialogStart.png" -h 22 -w 22 -l "Settings" -ann "Set CharlieWales' File Browser Projects folders" -c "craMayaFileBrowserSettings" ;
				text -ann "Right-click on optionMenu for Recent Projects" -w 40 -h 22 -bgc .4 .4 .4 -l "Project";
				optionMenu -w 295 -h 22 -l "" -ann "Project List - Right-click for Recent Projects" -cc "craMayaFileBrowserSetProjectByMenu" craMayaFileBrowserProjectMenu;
					popupMenu -pmc "craMayaFileBrowserUpdateRecentProjects" craMayaFileBrowserRecentProjectsPUM;
					setParent -m ..;
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "refresh.png" -ann "Refresh Projects List" -c "craMayaFileBrowserGetProjectList;craMayaFileBrowserSetActiveProject" craMayaFileBrowserReloadSceneBTN;
				
				if( `optionVar -q "craMayaFileBrowserUILayoutOV"` == "horizontal2")
					iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "defaultTwoSideBySideLayout.png" -ann "Change UI Layout to Side by Side" -c "craMayaFileBrowserChangeLayout" craMayaFileBrowserChangeLayoutITBTN;
				else
					iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "defaultTwoStackedLayout.png" -ann "Change UI Layout to Stacked" -c "craMayaFileBrowserChangeLayout" craMayaFileBrowserChangeLayoutITBTN;
				
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "summaryRemove.png" -ann "Set Start-up docking state";
				popupMenu -mm 0 -b 1;
				menuItem -l "Start Docked" -c "optionVar -iv \"craMayaFileBrowserFloatingUIOV\" 0";
				menuItem -l "Start Floating" -c "optionVar -iv \"craMayaFileBrowserFloatingUIOV\" 1";
				setParent -m ..;
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "pickOtherObj.png" -ann "About this tool" -c "craAboutSceneTools";
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "SP_MessageBoxCritical.png" -ann "Close CharlieWales' File Browser" -c "evalDeferred \"deleteUI craMayaFileBrowserDock\"";
			setParent ..;
			
			rowLayout -nc 5 -adj 3;
				iconTextButton -bgc .4 .4 .4 -i "SP_DirLinkIcon.png" -l "Favorites" -h 22 -w 22 -ann "Click for Favorites" craMayaFileBrowserFavoritesBTN;
				popupMenu -p "craMayaFileBrowserFavoritesBTN" -b 1 -pmc "craMayaFileBrowserFavorites" craMayaFileBrowserFavoritesPUM;
					setParent -m ..;
				text -ann "" -w 40 -l "Folder" -bgc .4 .4 .4 -h 22;
				textField -h 22 -tx "" -ann "Right-click for favorites" -ec "craMayaFileBrowserListPath" -cc "craMayaFileBrowserListPath" craMayaFileBrowserFilePath;
				popupMenu -p "craMayaFileBrowserFilePath" -pmc "craMayaFileBrowserFavorites" craMayaFileBrowserFilePathFavoritesPUM;
					setParent -m ..;
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "constructionHistoryOn.png" -l "Folder history" -ann "Click for recent folders" -c "" craMayaFileBrowserRecentFolders;
				popupMenu -b 1 -p "craMayaFileBrowserRecentFolders" -pmc "craMayaFileBrowserRecentFolders" craMayaFileBrowserRecentFoldersPUM;
					setParent -m ..;
				
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "SP_DirOpenIcon.png" -l "Open Path" -ann "Open current path" -c "craMayaFileBrowserOpenFilePath" craMayaFileBrowserOpenFolder;
			setParent ..;
			
			rowLayout -nc 21 -adj 16 craMayaFileBrowserButtonsRL;
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "SP_FileDialogToParent.png" -ann "Go to parent folder" -c "craMayaFileBrowserGoToParentFolder";
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "SP_FileDialogNewFolder" -ann "Toggle Create new folder" -c "craMayaFileBrowserNewFolder";
				separator -horizontal 0 -h 11 -w 2 -bgc .5 .5 .5 -st "none";
				iconTextButton -bgc .4 .4 .4 -w 22 -h 22 -i "save.png" -c "craSaveSceneAs" -iol "AS" -olb 1 0 0 0 -olc 0 0 1 -fn "tinyBoldLabelFont" -ann "Save Scene As...";
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "recycle_red.png" -ann "Refresh file list" -c "craMayaFileBrowserListPath;" ;
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "revealSelected.png" -ann "Select opened file" -command "craMayaFileBrowserSelectOpenedScene";
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "removeRenderable.png" -ann "Delete selected file(s) and empty folders" -c "craMayaFileBrowserDeleteSelectedFiles";				
				separator -horizontal 0 -h 11 -w 2 -bgc .5 .5 .5 -st "none";
				iconTextButton -en 0 -bgc .4 .4 .4 -style "iconOnly" -i "setEdAddCmd.png" -h 22 -w 22 -l "import" -ann "Import selected file(s)" -c "craMayaFileBrowserImportFileToScene" craMayaFileBrowserImportFileToSceneBTN;
				popupMenu;
					menuItem -label "Import Options" -command "ImportOptions";
				setParent -m ..;
				iconTextButton -en 0 -bgc .4 .4 .4 -style "iconOnly" -i "createReference.png" -h 22 -w 22 -l "reference" -ann "Reference selected file(s)" -c "craMayaFileBrowserReferenceFileToScene" craMayaFileBrowserReferenceFileToSceneBTN;
				popupMenu;
					menuItem -label "Reference Options" -command "CreateReferenceOptions";
				setParent -m ..;
				iconTextButton -en 0 -bgc .4 .4 .4 -h 22 -w 22 -i "Textured.png" -ann "Create Material from selected file and assign to selected objects (default: blinn)" -c ("craMaterialPerImage \"blinn\" 1") craCreateMaterialsFromSelectedFilesBTN;
				popupMenu -mm 0;
					menuItem -en 0 -l "Maya Software Shaders";
					menuItem -d 1;
					menuItem -l "Blinn from texture(s)" -c ("craMaterialPerImage \"blinn\" 1");
					menuItem -l "Lambert from texture(s)" -c ("craMaterialPerImage \"lambert\" 1");
					menuItem -l "Phong from texture(s)" -c ("craMaterialPerImage \"phong\" 1");
					menuItem -l "Surface Shader from texture(s)" -c ("craMaterialPerImage \"surfaceShader\" 1");
					menuItem -d 1;
					menuItem -en 0 -l "Mental Ray Shaders";
					menuItem -d 1;
					menuItem -l "dgs_material from texture(s)" -c ("craMaterialPerImage \"dgs_material\" 1");
					menuItem -l "dielectric_material from texture(s)" -c ("craMaterialPerImage \"dielectric_material\" 1");
					menuItem -l "mia_material from texture(s)" -c ("craMaterialPerImage \"mia_material\" 1");
					menuItem -l "mia_material_x from texture(s)" -c ("craMaterialPerImage \"mia_material_x\" 1");
				setParent -m ..;
				separator -horizontal 0 -h 11 -w 2 -st "none" -bgc .5 .5 .5 ;
				iconTextButton -i "SP_DirOpenIcon_12.png" -style "iconAndTextHorizontal" -l "scenes" -h 22 -w 55 -bgc .8 .7 .4 -ann "Go to scenes" -c "craMayaFileBrowserListFolder scenes" craMayaFileBrowserListSceneFolder;
				iconTextButton -i "SP_DirHomeIcon.png" -style "iconOnly" -l "" -h 22 -w 24 -bgc .8 .7 .4 -ann "Project Folders" -c "craMayaFileBrowserListFolder scenes";
					popupMenu -b 1 -pmc "craMayaFileBrowserUpdateProjectFolders" craMayaFileBrowserUpdateProjectFoldersPUM;
					setParent -m ..;
				iconTextButton -bgc .5 .7 .8 -style "iconAndTextHorizontal" -al "left" -i "SP_DirIcon_12.png" -h 22 -w 56 -l "system" -ann "System folders menu" craMayaFileBrowserListDesktop;
					craMayaFileBrowserSetSystemFolders;
				separator -horizontal 0 -h 11 -w 2 -st "none" -bgc .5 .5 .5;
				iconTextButton -bgc .4 .4 .4 -w 22 -h 22 -i "save.png" -c "craSaveSceneVersion;craMayaFileBrowserUpdateUI" -iol "v1" -olb 1 0 0 0 -olc 1 1 0 -fn "tinyBoldLabelFont" -ann "Save Scene Version";
				iconTextButton -bgc .4 .4 .4 -h 22 -w 22 -i "autoload.png" -ann "Reload Scene - Right-click for Recent Files" -c "craReloadScene" craMayaFileBrowserReloadSceneBTN;
					popupMenu -p "craMayaFileBrowserReloadSceneBTN" -mm 1 -b 3 -postMenuCommand "buildRecentFileMenu craMayaFileBrowserSceneFileItemsPUM;menuItem -d 1;menuItem  -p \"craMayaFileBrowserSceneFileItemsPUM\" -l \"Open Scene Options\" -c \"OpenSceneOptions\";" craMayaFileBrowserSceneFileItemsPUM;
				setParent -m ..;
				iconTextButton -bgc .4 .4 .4 -w 22 -h 22 -i "LearningMovies.png" -c "craCreateScenePlayblast" -ann "Playblast Window" craMayaFileBrowserPlayblastWinITBTN;
				iconTextButton -bgc .4 .4 .4 -w 22 -h 22 -i "refEdFileList.png" -c "craReferenceFileEditor" -ann "Reference File Editor";
				iconTextButton -bgc .4 .4 .4 -w 22 -h 22 -i "info.png" -c "craSceneFileInfo" -ann "Scene Info";
				setParent ..;
			setParent ..;
			
			
		frameLayout -lv 0 -mw 3 -mh 3 -bs "etchedIn" -vis 0 craNewFolderFL;
			rowLayout -nc 3 -adj 2;
				text -l " New folder: ";
				textField -w 150 -cc "craMayaFileBrowserCreateNewFolder" -ann "Numpad enter creates folder and hides wigdet" -ec "craMayaFileBrowserCreateNewFolder;frameLayout -e -vis 0 craNewFolderFL;setFocus craMayaFileBrowserFileListTSL;" craMayaFileBrowserCreateNewFolderNameTXT;
				iconTextButton -i "SP_FileDialogNewFolder.png" -ann "Create folder" -c "craMayaFileBrowserCreateNewFolder;frameLayout -e -vis 0 craNewFolderFL;";
			setParent ..;
		setParent ..;
		setParent ..;
		
		formLayout craMayaFileBrowserFileListForm;
			frameLayout -manage 1 -lv 0 -cll 0 -mw 4 -mh 4 -bs "etchedIn" craMayFileBrowserFileListFL;
				rowLayout -nc 9 -adj 9 craMayaFileBrowserNamespaceRL;
					iconTextButton -olc 1 1 1 -iol "" -w 22 -h 17 
						-bgc .4 .4 .4 
						-i "out_grid.png" 
						-ann "Show Maya Scenes and images as thumbnails  - Right click for options"
						-c "craMayaFileBrowserThumbsViewToggle" 
					craMayaFileBrowserThumbsIBTN;

					int $craThumbsSizes[] = `optionVar -q "craMayaFileBrowserThumbSizeOV"`;
					radioMenuItemCollection craThumbModeRBC;
					popupMenu -p craMayaFileBrowserThumbsIBTN;
						menuItem -en 0 -l "-- Thumbnail Size --";
						menuItem -d 1;
						menuItem -cl "craThumbModeRBC" -rb ($craThumbsSizes[0] == 88 ? 1 : 0) -l "Small" -c "craMayaFileBrowserThumbsSize \"tiny\";craMayaFileBrowserViewThumbnailsUpdate" craTiny;
						menuItem -cl "craThumbModeRBC" -rb ($craThumbsSizes[0] == 110 ? 1 : 0) -l "Medium" -c "craMayaFileBrowserThumbsSize \"small\";craMayaFileBrowserViewThumbnailsUpdate" craMedium;
						menuItem -cl "craThumbModeRBC" -rb ($craThumbsSizes[0] == 148 ? 1 : 0) -l "Big" -c "craMayaFileBrowserThumbsSize \"medium\";craMayaFileBrowserViewThumbnailsUpdate" craBig;
						// menuItem -l "Big" -c "craMayaFileBrowserThumbsSize \"big\";craMayaFileBrowserViewThumbnailsUpdate";
						// menuItem -l "Huge" -c "craMayaFileBrowserThumbsSize \"huge\";craMayaFileBrowserViewThumbnailsUpdate";
						menuItem -d 1;

						menuItem -cb `optionVar -q "craMayaFileBrowserViewSceneInfoStateOV"` -l "Show Scene Info" -c "craMayaFileBrowserSceneInfoState #1";

					setParent -m ..;

					if(`optionVar -q "craMayaFileBrowserSortByNameOV"`)
						iconTextButton -olc 1 1 1 -iol "ext" -w 22 -h 17 -bgc .4 .4 .4 -i "sortName.png" -ann "Sort file list by name" -c "craMayaFileBrowserChangeFileSort" craMayaFileBrowserSortByBTN;
					else
						iconTextButton -olc 1 1 1 -iol "" -w 22 -h 17 -bgc .4 .4 .4 -i "sortName.png" -ann "Sort file list by extension" -c "craMayaFileBrowserChangeFileSort" craMayaFileBrowserSortByBTN;
					
					separator -w 5 -style "none";
					
					checkBox -bgc .4 .4 .4 
						-v `optionVar -q craMayaFileBrowserLiveSearchOV` 
						-l "Search:" 
						-ann "Click to toggle Live Search"
						-onc "intField -e -v `scriptJob -p craMayaFileBrowserUI -cu 1 -e \"idle\" \"craMayaFileBrowserFileFilter 0\"` craMayaFileBrowserLiveSearchScriptJob;checkBox -e -l \"Search:\" craMayaFileBrowserFileFilterCB;optionVar -iv craMayaFileBrowserLiveSearchOV 1;warning \"scriptJob running while in this mode.\\n\""
						-ofc "scriptJob -k `intField -q -v craMayaFileBrowserLiveSearchScriptJob`;checkBox -e -l \"Search:\" craMayaFileBrowserFileFilterCB;optionVar -iv craMayaFileBrowserLiveSearchOV 0;" 
					craMayaFileBrowserFileFilterCB;
					
					textField -ann "enter search string and press enter" -aie 1 -text "" -cc "craMayaFileBrowserFileFilter 1" -ec "craMayaFileBrowserFileFilter 1" craMayaFileBrowserFileListFilterTXT;
					popupMenu -p craMayaFileBrowserFileListFilterTXT;
						menuItem -l "File Types" -en 0;
						menuItem -d 1;
						menuItem -l "Alembic (*.abc)" -c "textField -e -text \"*.abc\" craMayaFileBrowserFileListFilterTXT;if(!`checkBox -q -v craMayaFileBrowserFileFilterCB`)craMayaFileBrowserFileFilter 1;";
						menuItem -l "FBX (*.fbx)" -c "textField -e -text \"*.fbx\" craMayaFileBrowserFileListFilterTXT;if(!`checkBox -q -v craMayaFileBrowserFileFilterCB`)craMayaFileBrowserFileFilter 1;";
						menuItem -l "Maya Ascii (*.ma)" -c "textField -e -text \"*.ma\" craMayaFileBrowserFileListFilterTXT;if(!`checkBox -q -v craMayaFileBrowserFileFilterCB`)craMayaFileBrowserFileFilter 1;";
						menuItem -l "Maya Binary (*.mb)" -c "textField -e -text \"*.mb\" craMayaFileBrowserFileListFilterTXT;if(!`checkBox -q -v craMayaFileBrowserFileFilterCB`)craMayaFileBrowserFileFilter 1;";
						menuItem -l "Wavefront Object (*.obj)" -c "textField -e -text \"*.obj\" craMayaFileBrowserFileListFilterTXT;if(!`checkBox -q -v craMayaFileBrowserFileFilterCB`)craMayaFileBrowserFileFilter 1;";
						menuItem -d 1;
						menuItem -l "Clear field" -c "textField -e -text \"\" craMayaFileBrowserFileListFilterTXT;if(!`checkBox -q -v craMayaFileBrowserFileFilterCB`)craMayaFileBrowserFileFilter 1;";
					setParent -m ..;
					iconTextButton -en 0 -w 18 -h 18 -bgc .4 .4 .4 -ann "Clear filter text" -i "timestop.png" -c "textField -e -text \"\" craMayaFileBrowserFileListFilterTXT;if(!`checkBox -q -v craMayaFileBrowserFileFilterCB`)craMayaFileBrowserFileFilter 1;" craMayaFileBrowserClearFilterFieldBTN;
					separator -w 5 -style "none";
					checkBox -cc "optionVar -iv craMayaFileBrowserUseNamespaceOV #1" -bgc .4 .4 .4 -ann "Importing and referencing namespace" -l "Use namespace" -v `optionVar -q craMayaFileBrowserUseNamespaceOV` craMayaFileBrowserUseNamespaceCB;
					textField -ann "Importing and referencing namespace"  -text "" craMayaFileBrowserNamespaceTXT;
				setParent ..;
				
				frameLayout -bgc .4 .4 .4 -manage 0 -l "Selected file(s) path(s)" craMayaFileBrowserFilePathsFL;
					scrollField -h 30 -ed 0 craMayaFileBrowserFilePathsSF;
					button -bgc .4 .6 .4 -l "OK" -c "frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFilePathsFL;frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;textScrollList -e -manage 1 -vis 1  craMayaFileBrowserFileListTSL;craMayaFileBrowserViewThumbnailsUpdate;" craMayaFileBrowserFilePathsBTN;
				setParent ..;
				
				frameLayout -bgc .4 .4 .4 -lv 1 -l "Delete selected file(s)" -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;
					rowLayout -nc 2 -adj 2;
						button -bgc .4 .6 .4 -w 150 -l "Delete file(s)" -c "craMayaFileBrowserDeleteConfirmSelectedFiles" craMayaFileBrowserDeleteConfirmSelectedFilesBTN;
						button -bgc .7 .3 .3 -l "Cancel" -c "frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;textScrollList -e -manage 1 -vis 1  craMayaFileBrowserFileListTSL;frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFilePathsFL;setFocus craMayaFileBrowserFileListTSL;if(`optionVar -q craMayaFileBrowserViewThumbsOV`){frameLayout -e -manage 1 craMayaFileBrowserThumbnailsMainFL;textScrollList -e -manage 0 -vis 0 craMayaFileBrowserFileListTSL;}";
					setParent ..;
					
					scrollField -h 30 -ed 0 craMayaFileBrowserFileDeleteFilesSF;
				setParent ..;
				
				frameLayout -manage 0 -bgc .4 .4 .4 -lv 1 -l " Manage favorites" -mw 5 -mh 5 -bs "etchedOut" craMayaFileBrowserManageFavoritesMainFL;
					textScrollList -h 30 -ams 1 -dkc "if(size(`textScrollList -q -si craMayaFileBrowserManageFavoritesTSL`)){for($path in `textScrollList -q -si craMayaFileBrowserManageFavoritesTSL`){textScrollList -e -ri $path craMayaFileBrowserManageFavoritesTSL;}}" craMayaFileBrowserManageFavoritesTSL;
					rowLayout -nc 4 -adj 3 craMayaFileBrowserManageFavoritesRL;
						button -w 100 -l "Clear Selected" -c "if(size(`textScrollList -q -si craMayaFileBrowserManageFavoritesTSL`)){for($obj in `textScrollList -q -si craMayaFileBrowserManageFavoritesTSL`){textScrollList -e -ri $obj craMayaFileBrowserManageFavoritesTSL;}}" craMayaFileBrowseDelSelBTN;
						button -w 100 -l "Clear List" -c "textScrollList -e -ra craMayaFileBrowserManageFavoritesTSL" craMayaFileBrowseClearSelBTN;
						button -w 100 -bgc .4 .6 .4 -l "Save and close" -c "craMayaFileBrowserSaveFavorites 1" craMayaFileBrowserSaveFavoritesBTN;
						button -w 100 -bgc .7 .3 .3 -l "Close" -c "craMayaFileBrowserSaveFavorites 0" craMayaFileBrowserCloseFavoritesBTN;
					setParent ..;
				setParent ..;
				
				frameLayout -manage 0 -cll 0 -lv 0 -l " Thumbnails view" -mw 5 -mh 5 -bs "etchedOut" craMayaFileBrowserThumbnailsMainFL;
                                        popupMenu -p craMayaFileBrowserThumbnailsMainFL -mm 0;
                                                                menuItem -rp "N" -l "Go to parent folder" -c "evalDeferred(\"craMayaFileBrowserGoToParentFolder;craMayaFileBrowserViewThumbnailsUpdate\")";
                                        setParent -m ..;
					scrollLayout -hst 0 -cr 1 craMayaFileBrowserThumbsSL;
						gridLayout 
							-w 450
							-allowEmptyCells 0
							-ag 1
							-cr 1
							-cellWidthHeight ($craThumbSize[0]+3) ($craThumbSize[1]+22)
						craMayaFileBrowserthumbnailsGL;
						setParent ..;
					setParent ..;
				setParent ..;
				
				textScrollList -h 35 -manage 1 -ams 1 -sc "craMayaFileBrowserDetectFileType" -dcc "craMayaFileBrowserOpenFile" -dkc "craMayaFileBrowserDeleteSelectedFiles" craMayaFileBrowserFileListTSL;
				
				popupMenu -p "craMayaFileBrowserFileListTSL" -pmc "craMayaFileBrowserFileListCheckPopupItems" -mm 1 craMayaFileBrowserFileListCommands;
				setParent ..;
			setParent ..;
		
		formLayout -e -w 500
			-af craMayFileBrowserFileListFL "top" 0
			-af craMayFileBrowserFileListFL "bottom" 0
			-af craMayFileBrowserFileListFL "left" 0
			-af craMayFileBrowserFileListFL "right" 0
		craMayaFileBrowserFileListForm;
			
		frameLayout -h 53 -lv 0 -mw 3 -mh 3 -cll 0 -cl 0 -bs "etchedIn" craMayaFileBrowserSceneFileInfoFL;
			columnLayout -h 50 -adj 1 craAssetFileInfoMainCL;
				rowLayout -nc 2 -adj 2;
					text -h 18 -l " File Path:" -bgc .4 .4 .4;
					textField -ed 0 craMayaFileBrowserSceneFileNamePathTF;
				setParent ..;
				rowLayout -nc 6 -adj 4;
					text -h 18 -l " File Size: " -bgc .4 .4 .4;
					textField -w 65 -ed 0 craMayaFileBrowserSceneFileSizeTF;
					text -h 18 -l "    Date:  " -bgc .4 .4 .4 -ann "Creation Date";
					textField -ed 0 craMayaFileBrowserSceneCreationDateTF;
					text -h 18 -l "   Mod Date:  " -bgc .4 .4 .4 -ann "Modification Date";
					textField -w 125 -ed 0 craMayaFileBrowserSceneFileModDateTF;
				setParent ..;
			setParent ..;
		setParent ..;
		setParent ..;
		
		formLayout -e -w 505 
			-af craMayaFileBrowserButtonsFL		"top"     2
			-af craMayaFileBrowserButtonsFL		"left"    2
			-af craMayaFileBrowserButtonsFL		"right"   2
			
			-af craMayaFileBrowserFileListForm	"left"    2
			-af craMayaFileBrowserFileListForm	"right"   2
			-ac craMayaFileBrowserFileListForm	"top" 	  0 craMayaFileBrowserButtonsFL
			-ac craMayaFileBrowserFileListForm	"bottom"  0 craMayaFileBrowserSceneFileInfoFL
			
			-af craMayaFileBrowserSceneFileInfoFL	"left"  2
			-af craMayaFileBrowserSceneFileInfoFL	"right" 2
			-af craMayaFileBrowserSceneFileInfoFL	"bottom" 2
	
		craMayaFileBrowserForm;
	
		formLayout -e  -w 503
			-af craMayaFileBrowserForm "top" 0
			-af craMayaFileBrowserForm "bottom" 0
			-af craMayaFileBrowserForm "left" 0
			-af craMayaFileBrowserForm "right" 0
		craMayaFileBrowserFileListMainForm;
	
		setParent ..;
		
		formLayout -manage `optionVar -q craMayaFileBrowserViewSceneInfoStateOV` craMayaFileBrowserSceneInfoMainForm;
		frameLayout -lv 0 -mw 6 -mh 5 -cll 0 -cl 0 -bs "etchedIn" craSceneThumbnail;
			columnLayout -adj 1 craMayaFileBrowserImageThumbCL;
				tabLayout -w 485 -h 295 craMayaFileBrowserSceneFileInfoImageTL;
					iconTextButton -en 0 -i "SP_MessageBoxCritical.png" -ann "No thumbnails available" -p "craMayaFileBrowserSceneFileInfoImageTL" -w 480 -h 270 "craMayaFileBrowserThumbnail0";
				setParent ..;
				tabLayout -e -tabLabel "craMayaFileBrowserThumbnail0" "No thumbnails available" craMayaFileBrowserSceneFileInfoImageTL;
			
				rowLayout -nc 12 -adj 11 craThumbnailsButtonsRL;
					for( $crai=0; $crai<10 ;$crai++ ){
						iconTextButton -en 0 -bgc .4 .4 .4 -w 33 -h 15 -style "textOnly" -ann ( "Grab Screen Thumbnail " + string($crai) ) -l ("T"+ string($crai)) -c ("craMayaFileBrowserCreateThumbnail " + string($crai)) ("craMayaFileBrowserThumbnailBTN" + string($crai));
						popupMenu -mm 0;
							menuItem -ann "Render Thumbnail" -l "Render" -c ("craMayaFileBrowserRenderSceneThumbnail " + string($crai) + " 1");
							menuItem -d 1;
							menuItem -ann "Delete Thumbnail" -l "Delete" -c ("craMayaFileBrowserDeleteThumbnail " + string($crai));
						setParent -m ..;
					}
					
					iconTextButton -bgc .4 .4 .4 -mw 3 -i "renderable_dim.png" -style "iconAndTextHorizontal" -h 15 -en 0 -l "  No Playblast" -c "craMayaFileBrowserOpenPlayblastFile" craMayaFileBrowserSceneViewPlayblastBTN;
					iconTextButton -w 22 -h 15 -bgc .4 .4 .4 -en 0 -ann "Delete Scene Playblast" -i "removeRenderable.png"  -c "craMayaFileBrowserDeleteScenePlayblast" craMayaFileBrowserSceneDeletePlayblastBTN;
				setParent ..;
			setParent ..;
		setParent ..;

		
		frameLayout -w 501 -lv 0 -mw 7 -mh 5 -cll 0 -cl 0 -bs "etchedIn" craMayaFileBrowserSceneDescFL;
			columnLayout -manage 0 -adj 1 craMayaFileBrowserSceneDeleteNoteCL;
				frameLayout -mw 5 -mh 5 -lv 1 -bs "etchedIn" -l "Delete scene note?" craMayaFileBrowserSceneDeleteNoteFL;
					rowLayout -nc 2 -adj 2; 
						button -h 24 -w 150 -bgc .4 .6 .4 -l "Delete note" -c "craMayaFileBrowserDeleteNote;scrollField -e -manage 1 craMayaFileBrowserSceneDesc;columnLayout -e -manage 0 craMayaFileBrowserSceneDeleteNoteCL;rowLayout -e -manage 1 craMayaFileBrowserSceneDescDeleteNodeRL;" craMayaFileBrowserSceneDeleteNoteBTN;
						button -h 24 -bgc .7 .3 .3 -l "Cancel" -c "scrollField -e -manage 1 craMayaFileBrowserSceneDesc;columnLayout -e -manage 0 craMayaFileBrowserSceneDeleteNoteCL;rowLayout -e -manage 1 craMayaFileBrowserSceneDescDeleteNodeRL;";
					setParent ..;
				setParent ..;
			setParent ..;
			
			rowLayout -en 0 -h 18 -nc 3 -adj 1 craMayaFileBrowserSceneDescDeleteNodeRL;
				text -h 18 -bgc .4 .4 .4 -l "   Scene note    ";
				iconTextButton -st "iconAndTextHorizontal" -h 18 -bgc .4 .4 .4 -l " Save note " -ann "Save Note" -i "setEdEditMode.png" -command "craMayaFileBrowserSaveSceneNote" craMayaFileBrowserSaveNoteBTN;
				iconTextButton -st "iconAndTextHorizontal" -h 18 -bgc .4 .4 .4 -l " Delete note " -ann "Delete Note" -i "hsClearView.png" -command "scrollField -e -manage 0 craMayaFileBrowserSceneDesc;rowLayout -e -manage 0 craMayaFileBrowserSceneDescDeleteNodeRL;columnLayout -e -manage 1 craMayaFileBrowserSceneDeleteNoteCL;setFocus craMayaFileBrowserSceneDeleteNoteBTN;" craMayaFileBrowserDeleteNoteBTN;
			setParent ..;
			
			scrollField -en 0 -ww 1 -h 36 -tx "" -ann " Note - Right Click for Options" -fn "plainLabelFont" -ec "craMayaFileBrowserSaveSceneNote" craMayaFileBrowserSceneDesc;
		setParent ..;
		setParent ..;
		
		formLayout -e -w 503
			
			-af craSceneThumbnail "top" 2
			-af craSceneThumbnail "left" 2
			-af craSceneThumbnail "right" 2
			
			-ac craMayaFileBrowserSceneDescFL "top" 0  craSceneThumbnail
			-af craMayaFileBrowserSceneDescFL "bottom" 2
			-af craMayaFileBrowserSceneDescFL "left" 2
			-af craMayaFileBrowserSceneDescFL "right" 2
		
		craMayaFileBrowserSceneInfoMainForm;
	
	craMayaFileBrowserUpdateUI;
	
	if (`optionVar -q "craMayaFileBrowserLiveSearchOV"`)
	{
		intField -manage 0 -v `scriptJob -p craMayaFileBrowserUI -cu 1 -ie "craMayaFileBrowserFileFilter 0"` craMayaFileBrowserLiveSearchScriptJob;
		checkBox -e -l "Search:" craMayaFileBrowserFileFilterCB;
	}
	else
		intField -manage 0 -v 0 craMayaFileBrowserLiveSearchScriptJob;
	
	if(`optionVar -q "craMayaFileBrowserUILayoutOV"` == "horizontal2")
                formLayout -e -manage `optionVar -q craMayaFileBrowserViewSceneInfoStateOV` craMayaFileBrowserSceneInfoMainForm;
	if(`optionVar -q craMayaFileBrowserViewThumbsOV`)
		craMayaFileBrowserThumbsViewToggle;
}	

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// craMayaFileBrowserGetInfoPath
global proc craMayaFileBrowserCreateThumbnail( int $number )
{
        string $craData = "/.craData";
        string $craThumbnail = "craThumbnail";
        string $craNote = "craNote";
        string $fileNames[] = craMayaFileBrowserGetSelectedFiles();
        string $fileName = $fileNames[0];
         $fileName = `basenameEx $fileName`;
        
        string $fileDir = `craMayaFileBrowserGetInfoPath`;
        
        if(`filetest -d ($fileDir + "/.craData")`) {
                sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
                if(`about -win`)
                system( "attrib +H \"" + $fileDir + "/.craData\"" );
        } else {
                sysFile -md ($fileDir + "/.craData");
                sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
                if(`about -win`)
                system( "attrib +H \"" + $fileDir + "/.craData\"" );
        }
        string $finalPath = ( $fileDir + "/" + $craData + "/" + $craThumbnail + "/" + $fileName +"/" );
        
        float $currentTime = `currentTime -query`;
        
        int $cw_imageFormat = `getAttr "defaultRenderGlobals.imageFormat"`;
        setAttr "defaultRenderGlobals.imageFormat" 32;
        
        string $craCurrentPanel = `getPanel -wf`;
        float $craCurrentOverscan = 0;
        string $craModelPanelCamera;
        int $craResGateState; 
        
        if(`modelPanel -exists $craCurrentPanel`)
        {
                $craModelPanelCamera = `modelPanel -q -cam $craCurrentPanel`;
                $craCurrentOverscan = `getAttr ($craModelPanelCamera + ".overscan")`;
                setAttr ($craModelPanelCamera + ".overscan") 1;
                $craResGateState = `camera -q -dr $craModelPanelCamera`;
                camera -e -dr 0 $craModelPanelCamera;
        }
        
        $currentTime = `floor $currentTime`;
        int $craPlayblastStatus;
        
        if(`getApplicationVersionAsFloat` == 2011)
                //2011 ok
                $craPlayblastStatus = catchQuiet(`playblast -viewer 0 -p 100 -frame $currentTime -w 480 -h 270 -orn false -cf ( $finalPath + "/" + $fileName + "_T" + $number + ".png") -fmt "image"`);
        else if(`getApplicationVersionAsFloat` == 2012)	
                //2012 ok
                $craPlayblastStatus = catchQuiet(`playblast -viewer 0 -p 100 -st $currentTime -et $currentTime -w 480 -h 270 -orn false -f ( $finalPath + "/" + $fileName + "_T" + $number ) -compression "png" -fmt "image"`);
        else if(`getApplicationVersionAsFloat` > 2012)
                //2013 & 2014 ok
                $craPlayblastStatus = catchQuiet(`playblast -viewer 0 -p 100 -frame $currentTime -w 480 -h 270 -orn false -cf ( $finalPath + "/" + $fileName + "_T" + $number + ".png") -compression "png" -fmt "image"`);
        
        if($craPlayblastStatus)
        {
                error "No active view for playblast.\n";
        }
        else
        {
                if(`getApplicationVersionAsFloat` == 2012)
                        sysFile -rename ($finalPath + $fileName + "_T" + $number + ".png") ( $finalPath + $fileName + "_T" + $number + "." +  craNumberPadding($currentTime, 4, "0") + ".png");
        }
        
        if($craCurrentOverscan)
                setAttr ($craModelPanelCamera + ".overscan") $craCurrentOverscan;
        
        
        setAttr "defaultRenderGlobals.imageFormat" $cw_imageFormat;
        
        catchQuiet(`camera -e -dr $craResGateState $craModelPanelCamera`);
        
        if(`dockControl -q -exists craSceneFileInfoDC`)
        {
                if(`control -exists craNoThumbnail`)	
                        deleteUI craNoThumbnail;
                
                if(`image -exists ("craThumbnail" + $number)`)
                        deleteUI ("craThumbnail" + $number);
                
                image -w 480 -h 270 -p "craSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craThumbnail" + $number);
                
                
                int $thumbNum = size(`tabLayout -q -ca craSceneFileInfoImageTL`);
                int $tabNum = 0;
                for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
                {
                        if(`image -exists ("craThumbnail" + $CurrentThumbnails)`)
                                $tabNum++;
                }
                
                tabLayout -e -moveTab $thumbNum $tabNum craSceneFileInfoImageTL;
                
                tabLayout -e -tabLabel ("craThumbnail" + $number) ("  T" + $number + "  ") -st ("craThumbnail" + $number) craSceneFileInfoImageTL;
                iconTextButton -style "textOnly" -e -en 1 -bgc 0.4 .6 0.4 ("craThumbnailBTN" + string($number));
        
                tabLayout -e -st ("craThumbnail" + string($number)) craSceneFileInfoImageTL;
        }
        
        if(`dockControl -q -exists craMayaFileBrowserDock`)
        {
                if(`control -exists craMayaFileBrowserNoThumbnail`)	
                        deleteUI craMayaFileBrowserNoThumbnail;
                
                if(`image -exists ("craMayaFileBrowserThumbnail" + $number)`)
                        deleteUI ("craMayaFileBrowserThumbnail" + $number);
                
                image -w 480 -h 270 -p "craMayaFileBrowserSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craMayaFileBrowserThumbnail" + $number);
                
                
                int $thumbNum = size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`);
                int $tabNum = 0;
                for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
                {
                        if(`image -exists ("craMayaFileBrowserThumbnail" + $CurrentThumbnails)`)
                                $tabNum++;
                }
                
                tabLayout -e -moveTab $thumbNum $tabNum craMayaFileBrowserSceneFileInfoImageTL;
                
                tabLayout -e -tabLabel ("craMayaFileBrowserThumbnail" + $number) ("  T" + $number + "  ") -st ("craMayaFileBrowserThumbnail" + $number) craMayaFileBrowserSceneFileInfoImageTL;
                iconTextButton -e -en 1 -bgc 0.4 .6 0.4 ("craMayaFileBrowserThumbnailBTN" + string($number));
                craMayaFileBrowserViewThumbnailsUpdate;
        }
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

global proc craMayaFileBrowserViewThumbnailsUpdate()
{
        if(`frameLayout -q -manage craMayaFileBrowserThumbnailsMainFL`)
        {
                if(`textScrollList -q -manage craMayaFileBrowserFileListTSL`)
                        textScrollList -e -manage 0 craMayaFileBrowserFileListTSL;

                craMayaFileBrowserViewThumbnails;
                if(size(`gridLayout -q -ca craMayaFileBrowserthumbnailsGL`) > 1 && size(`textField -q -text craMayaFileBrowserFileListFilterTXT`))
                {
                        string $thumbs[] = `gridLayout -q -ca craMayaFileBrowserthumbnailsGL`;
                        for($thumb=1; $thumb<size($thumbs);$thumb++)
                                columnLayout -e -bgc 0 1 0 $thumbs[$thumb];
                }
	}
}

global proc string craMayaFileBrowserThumbLoadNote( string $crafileName )
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $file = `basenameEx $crafileName`;
	
	string $crafile = $crafileName;
	string $crafileDir = `craMayaFileBrowserGetInfoPath`;
	string $crafinalPath = ( $crafileDir + "/.craData/craNote/");
	string $filePath = $crafinalPath + $file;
	if( `file -q -exists $filePath`)
	{
	        string $note;
		int $crafileId = `fopen $filePath "r"`;
		string $nextLine = `fgetline $crafileId`;
		$note += $nextLine;
		while ( size( $nextLine ) > 0 ) 
		{
		    $nextLine = `fgetline $crafileId`;
		    $note += $nextLine;
		}
				
		fclose $crafileId;
		return $note;
	}
	else 
	        return $crafileName;
}

global proc craMayaFileBrowserSceneInfoState( int $mode )
{
        optionVar -iv craMayaFileBrowserViewSceneInfoStateOV $mode;
        if(`optionVar -q "craMayaFileBrowserUILayoutOV"` == "horizontal2")
        {
                formLayout -e -manage $mode craMayaFileBrowserSceneInfoMainForm;
                paneLayout -e -ps 1 100 50 craMayaFileBrowserPaneLayout;
        }
}

global proc craMayaFileBrowserThumbsViewToggle()
{
        int $sizes[] = `optionVar -q craMayaFileBrowserPanelSizesOV`;
        
	if(`frameLayout -q -manage craMayaFileBrowserThumbnailsMainFL`)
	{
                frameLayout -e -manage 0 craMayaFileBrowserThumbnailsMainFL;
                textScrollList -e -manage 1 craMayaFileBrowserFileListTSL;
                gridLayout -e -vis 0 craMayaFileBrowserthumbnailsGL;
                paneLayout -e -ps 1 $sizes[0] (100-$sizes[1]) craMayaFileBrowserPaneLayout;
                iconTextButton 
                        -e 
                        -i "out_grid.png" 
                        -ann "Show Maya Scenes and images as thumbnails"
                craMayaFileBrowserThumbsIBTN;
                optionVar -iv "craMayaFileBrowserViewThumbsOV" 0;
                if(`optionVar -q "craMayaFileBrowserUILayoutOV"` == "vertical2")
                        formLayout -e -manage 1 craMayaFileBrowserSceneInfoMainForm;
	}
	else
	{
                frameLayout -e -manage 1 craMayaFileBrowserThumbnailsMainFL;
                craMayaFileBrowserViewThumbnails;
                textScrollList -e -manage 0 craMayaFileBrowserFileListTSL;
                gridLayout -e -vis 1 craMayaFileBrowserthumbnailsGL;
                if(`optionVar -q "craMayaFileBrowserUILayoutOV"` == "horizontal2")
                        paneLayout -e -ps 1 100 (100-$sizes[1]) craMayaFileBrowserPaneLayout;
                else
                        paneLayout -e -ps 1 50 50 craMayaFileBrowserPaneLayout;
                
		iconTextButton 
			-e 
			-i "SP_FileDialogListView.png" 
			-ann "Show file list - Right click for options"
		craMayaFileBrowserThumbsIBTN;
		optionVar -iv craMayaFileBrowserViewThumbsOV 1;
		if(`optionVar -q "craMayaFileBrowserUILayoutOV"` == "vertical2")
                        formLayout -e -manage 1 craMayaFileBrowserSceneInfoMainForm;
	}
	
	for($i in `gridLayout -q -ca craMayaFileBrowserthumbnailsGL`)
		    columnLayout -e -vis 1 $i;
}

global proc craMayaFileBrowserSelectThumb( int $thumb , string $item )
{
	for($i in `gridLayout -q -ca craMayaFileBrowserthumbnailsGL`)
	    columnLayout -e -bgc .27 .27 .27 $i;
	columnLayout -e -bgc 0 1 0 ("craMayaFileBrowserThumb" + string($thumb));
	textScrollList -e -da craMayaFileBrowserFileListTSL;
	textScrollList -e -si $item craMayaFileBrowserFileListTSL;
}

global proc craMayaFileBrowserViewThumbnailsWindow( string $item )
{
        string $crafileDir = `craMayaFileBrowserGetInfoPath`;
        string $craThumbnails[] = getFileList("-folder",( $crafileDir + ".craData/craThumbnail/" + `basenameEx $item` + "/"),"-filespec", (`basenameEx $item` + "*_T?.png"));
        if( !size($craThumbnails) )
        {
                if(`optionVar -q craSceneInfoOptionsOV`)
                {
                        $crafileDir = `workspace -q -rd` + "data/" ;
                        $craThumbnails = getFileList("-folder",( $crafileDir + "/.craData/craThumbnail/" + `basenameEx $item` + "/"),"-filespec", (`basenameEx $item` + "*_T?.png"));
                }
                else
                {
                        $crafileDir = `textField -q -tx craMayaFileBrowserFilePath`;
                        $craThumbnails = getFileList("-folder",( $crafileDir + "/.craData/craThumbnail/" + `basenameEx $item` + "/"),"-filespec", (`basenameEx $item` + "*_T?.png"));
                }
        }
        
        string $craThumbWinName = ("cra" + `basenameEx $item` + "ThumbWindow");
        string $invalidCharacters[] = {"-", " ", "[", "]", "$", "(", ")", "^", "'", "{", "}", "&", "%", "@", "#", "?", "!", "."};
        for($chr in $invalidCharacters)
                $craThumbWinName = substituteAllString($craThumbWinName, $chr, "_");
        
        if (`window -exists $craThumbWinName`)
                deleteUI $craThumbWinName;
        
        window -tlb 1 -s 0 -tb 1 -t $item $craThumbWinName;
        frameLayout -mw 2 -mh 2 -lv 0;
        columnLayout -adj 1;
        string $craMayaFileBrowserThumbWindowTL = `tabLayout -w 480 -h 295`;
        for ($crai=0;$crai<size($craThumbnails);$crai++)
        {
                string $crathumbIndex = `substring $craThumbnails[$crai](size($craThumbnails[$crai])-4) (size($craThumbnails[$crai])-4)`;
                string $crabuffer[];
                int $cranumTokens = `tokenize $craThumbnails[$crai] "_" $crabuffer`;
                string $image = `image -w 480 -h 295 -bgc 0 0 0 -i ($crafileDir + ".craData/craThumbnail/" + basenameEx($item) + "/" + $craThumbnails[$crai])`;
                tabLayout -e -tabLabel $image ("T" + $crathumbIndex) $craMayaFileBrowserThumbWindowTL;
        }

        setParent ..;
        string $craCloseThumbViewButton = `button -h 16 -l ("Close") -c ("evalDeferred (\"deleteUI  " + $craThumbWinName + "\")")`;
        showWindow $craThumbWinName;
        window -e -wh 494 320 $craThumbWinName;
        setFocus $craCloseThumbViewButton;
}

global proc craMayaFileBrowserViewThumbnails()
{
	global string $craMayaFileBrowserFileListBuffer[];
	int $craThumbSize[] = `optionVar -q "craMayaFileBrowserThumbSizeOV"`;
	
	if(size(`gridLayout -q -ca craMayaFileBrowserthumbnailsGL`))
	{
		deleteUI craMayaFileBrowserthumbnailsGL;
		gridLayout 
			-p "craMayaFileBrowserThumbsSL"
			-w 450
			-allowEmptyCells 0
			-ag 1
			-cr 1
			-cellWidthHeight ($craThumbSize[0]+3) ($craThumbSize[1]+22)
		craMayaFileBrowserthumbnailsGL;
	}
	
	int $counter = 0;
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	for($item in `textScrollList -q -ai craMayaFileBrowserFileListTSL`)
	{
		if(`filetest -f ($craGetCurrentPath + $item)`)
		{
			$itemlow = eval("tolower \"" + $item + "\"");
			if (`endsWith $itemlow ".ma"` || `endsWith $itemlow ".mb"` 
			        || `endsWith $itemlow ".avi"` 
                                 || `endsWith $itemlow ".png"` 
				|| `endsWith $itemlow ".dae"`
				|| `endsWith $itemlow ".txt"`
				|| `endsWith $itemlow ".ai"`
				|| `endsWith $itemlow ".abc"`
				|| `endsWith $itemlow ".3ds"`
				|| `endsWith $itemlow ".atom"`
				|| `endsWith $itemlow ".obj"`
				|| `endsWith $itemlow ".fbx"`
				|| `endsWith $itemlow ".tif"`
				|| `endsWith $itemlow ".bmp"`
				|| `endsWith $itemlow "0001.bin"`
				|| `endsWith $itemlow "0001.rpc"`
				|| `endsWith $itemlow ".iff"`
				|| `endsWith $itemlow ".tga"`
				|| `endsWith $itemlow ".psd"`
				|| `endsWith $itemlow ".sd"`
				|| `endsWith $itemlow ".exr"`
				|| `endsWith $itemlow ".jpg"`)
			{
				string $crafileDir = `craMayaFileBrowserGetInfoPath`;
				string $craThumbnails[];
                                 if (`endsWith $itemlow ".ma"` || `endsWith $itemlow ".mb"` 
                                        || `endsWith $itemlow ".obj"` || `endsWith $itemlow ".fbx"`
                                        || `endsWith $itemlow ".dae"` || `endsWith $itemlow ".ai"`
                                        || `endsWith $itemlow ".abc"` || `endsWith $itemlow ".3ds"`
                                        || `endsWith $itemlow ".atom"` || `endsWith $itemlow ".obj"`
                                        || `endsWith $itemlow ".fbx"`
                                        || `endsWith $itemlow ".sd"`
                                        || `endsWith $itemlow ".txt"`
                                        || `endsWith $itemlow "00001.bin"`)
                                {
                                        $craThumbnails = getFileList("-folder",( $crafileDir + ".craData/craThumbnail/" + `basenameEx $item` + "/"),"-filespec", (`basenameEx $item` + "*_T?.png"));
                                        
                                        if( !size($craThumbnails) )
                                        {
                                                if(`optionVar -q craSceneInfoOptionsOV`)
                                                {
                                                        $crafileDir = `workspace -q -rd` + "data/" ;
                                                        $craThumbnails = getFileList("-folder",( $crafileDir + "/.craData/craThumbnail/" + `basenameEx $item` + "/"),"-filespec", (`basenameEx $item` + "*_T?.png"));
                                                }
                                                else
                                                {
                                                        $crafileDir = $craGetCurrentPath;
                                                        $craThumbnails = getFileList("-folder",( $crafileDir + "/.craData/craThumbnail/" + `basenameEx $item` + "/"),"-filespec", (`basenameEx $item` + "*_T?.png"));
                                                }
                                        }
                                }
                                 else
                                         $craThumbnails = {};
                                 
                                if(size($craThumbnails))
                                {
                                        columnLayout -bgc .27 .27 .27 -vis 1 -dtg $item -adj 1 -p "craMayaFileBrowserthumbnailsGL" ("craMayaFileBrowserThumb" + string($counter));
                                                if(size($craThumbnails) > 1)
                                                {
                                                        string $thumbs = "";
                                                        for($i=0; $i<size($craThumbnails);$i++)
                                                                $thumbs+="[#]      ";
                                                        iconTextButton 
                                                                -bgc 0 0 0
                                                                -dcc ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserOpenFile")
                                                                -w $craThumbSize[0] 
                                                                -h $craThumbSize[1] 
                                                                -image ($crafileDir + ".craData/craThumbnail/" + `basenameEx $item` + "/" + $craThumbnails[0])
                                                                -ann `craMayaFileBrowserThumbLoadNote $item`
                                                                -overlayLabelColor 1 0 0
                                                                -overlayLabelBackColor 1 1 1 .5
                                                                -iol $thumbs
                                                                -font "fixedWidthFont"
                                                                -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType") 
                                                        ($item + "ThumbITBN");
                                                }
                                                else
                                                {
                                                        iconTextButton 
                                                                -bgc 0 0 0
                                                                -dcc ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserOpenFile")
                                                                -w $craThumbSize[0] 
                                                                -h $craThumbSize[1] 
                                                                -image ($crafileDir + ".craData/craThumbnail/" + `basenameEx $item` + "/" + $craThumbnails[0])
                                                                -ann `craMayaFileBrowserThumbLoadNote $item`
                                                                -font "fixedWidthFont"
                                                                -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType") 
                                                        ($item + "ThumbITBN");
                                                }       
                                                popupMenu -mm 1 craMayaFileBrowserThumbsListCommands;
                                                        menuItem -l "Go to parent folder" -c "evalDeferred(\"craMayaFileBrowserGoToParentFolder;craMayaFileBrowserViewThumbnailsUpdate\")";
                                                        menuItem -d 1;
                                                        menuItem -l "Import" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserImportFileToScene");
                                                        menuItem -l "Reference" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserReferenceFileToScene");
                                                        menuItem -d 1;
                                                        menuItem -sm 1 -l "Grab Thumbnail # from viewport";
                                                                for( $i=0; $i<10 ;$i++ )
                                                                        menuItem -l ("Grab Thumbnail " + $i) -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");evalDeferred(\"craMayaFileBrowserCreateThumbnail " + $i + ";craMayaFileBrowserDetectFileType\")");
                                                        setParent -m ..;

                                                        menuItem -sm 1 -l "Render Thumbnail #";
                                                                for( $i=0; $i<10 ;$i++ )
                                                                        menuItem -l ("Render Thumbnail " + $i) -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");evalDeferred(\"craMayaFileBrowserRenderSceneThumbnail " + $i + " 1;craMayaFileBrowserDetectFileType\")");
                                                        setParent -m ..;

                                                        menuItem -d 1;
                                                        menuItem -rp "N" -l "View Thumbnail" 
                                                                -c ("craMayaFileBrowserViewThumbnailsWindow \"" + $item + "\"")
                                                                ;
                                                        menuItem -d 1;
                                                        menuItem -en 1 -c ("print \"" + $craGetCurrentPath + $item + "\"") -l $item;
                                                setParent -m ..;

                                                rowLayout -nc 2 -adj 1;
                                                        textField -font "smallPlainLabelFont" -ip 1 -ed 0 -h 20 -text $item -ann $item;
                                                        if(craMayaFileBrowserThumbCheckPlayblastFile($craGetCurrentPath + $item))
                                                                iconTextButton -ann "View playblast" -bgc .4 .8 .4 
                                                                        -w 18 -h 18 
                                                                        -i "renderable.png" 
                                                                        -en 1
                                                                        -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserOpenPlayblastFile;craMayaFileBrowserDetectFileType")
                                                                ;											
                                                setParent ..;
                                        setParent ..;
                                } 
                                else 
                                {
					columnLayout -bgc .27 .27 .27 -vis 1 -dtg $item -adj 1 -p "craMayaFileBrowserthumbnailsGL" ("craMayaFileBrowserThumb" + string($counter));
					if(`endsWith $itemlow ".png"` 
						|| `endsWith $itemlow ".tif"`
						|| `endsWith $itemlow ".iff"`
						|| `endsWith $itemlow ".bmp"`
						|| `endsWith $itemlow ".tga"`
						|| `endsWith $itemlow ".psd"`
						|| `endsWith $itemlow ".jpg"`)
					{
					       rowLayout -nc 2;
					       separator -st "none" -h 1 -w (($craThumbSize[0] - $craThumbSize[1]) / 2);
                                                iconTextButton 
                                                        -bgc 0 0 0
                                                        -dcc ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserOpenFile;")
                                                        -w ($craThumbSize[1] - 2) 
                                                        -h ($craThumbSize[1] - 2) 
                                                        -image ($craGetCurrentPath + $item)
                                                        -ann `craMayaFileBrowserThumbLoadNote $item`
                                                        -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType") 
                                                ($item + "ThumbITBN");
                                                popupMenu -p ("craMayaFileBrowserThumb" + string($counter)) -mm 0;
                                                        menuItem -rp "N" -l "Go to parent folder" -c "evalDeferred(\"craMayaFileBrowserGoToParentFolder;craMayaFileBrowserViewThumbnailsUpdate\")";
                                                        menuItem -d 1;
                                                        menuItem -en 0 -l "Maya Software Shaders";
                                                        menuItem -d 1;
                                                        menuItem -l "Blinn from texture(s)"  -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"blinn\" 1");
                                                        menuItem -l "Lambert from texture(s)"  -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"lambert\" 1");
                                                        menuItem -l "Phong from texture(s)"  -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"phong\" 1");
                                                        menuItem -l "Surface Shader from texture(s)"  -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"surfaceShader\" 1");
                                                        menuItem -d 1;
                                                        menuItem -en 0 -l "Mental Ray Shaders";
                                                        menuItem -d 1;
                                                        menuItem -l "dgs_material from texture(s)" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"dgs_material\" 1");
                                                        menuItem -l "dielectric_material from texture(s)" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"dielectric_material\" 1");
                                                        menuItem -l "mia_material from texture(s)" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"mia_material\" 1");
                                                        menuItem -l "mia_material_x from texture(s)" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMaterialPerImage \"mia_material_x\" 1");
                                                        menuItem -d 1;
                                                        menuItem -rp "W" -l "Open file" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserOpenFile;craMayaFileBrowserDetectFileType");
                                                        menuItem -d 1;
                                                        menuItem -en 1 -c ("print \"" + $craGetCurrentPath + $item + "\"") -l $item;
                                                setParent -m ..;
                                                setParent ..;
                                        }
                                        else if(`endsWith $itemlow ".avi"`)
                                        {
                                                iconTextButton 
                                                        -bgc 0 0 0
                                                        -dcc ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserOpenFile")
                                                        -w ($craThumbSize[0])
                                                        -h ($craThumbSize[1]) 
                                                        -image ($craGetCurrentPath + $item)
                                                        -ann `craMayaFileBrowserThumbLoadNote $item`
                                                        -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType") 
                                                ($item + "ThumbITBN");
                                                        popupMenu -mm 0 craMayaFileBrowserThumbsListCommands;
                                                        menuItem -rp "N" -l "Go to parent folder" -c "evalDeferred(\"craMayaFileBrowserGoToParentFolder;craMayaFileBrowserViewThumbnailsUpdate\")";
                                                        menuItem -d 1;
                                                        menuItem -rp "W" -l "Open file" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserOpenFile;");
                                                        menuItem -d 1;
                                                        menuItem -en 1 -c ("print \"" + $craGetCurrentPath + $item + "\"") -l $item;
                                                setParent -m ..;
                                                }
                                                else
                                                {
                                                        iconTextButton
                                                                -bgc .4 .4 .4
                                                                -en 1 
                                                                -dcc ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserOpenFile")
                                                                -w $craThumbSize[0] -h $craThumbSize[1]
                                                                -i "abortBatchRender.png" 
                                                                -ann `craMayaFileBrowserThumbLoadNote $item`
                                                                -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType")
                                                        ($item + "ThumbITBN");
                                                
                                                        popupMenu -mm 0 craMayaFileBrowserThumbsListCommands;
                                                                menuItem -rp "N" -l "Go to parent folder" -c "evalDeferred(\"craMayaFileBrowserGoToParentFolder;craMayaFileBrowserViewThumbnailsUpdate\")";
                                                                menuItem -d 1;
                                                                menuItem -rp "E" -l "Import" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserImportFileToScene;");
                                                                menuItem -rp "W" -l "Reference" -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType;craMayaFileBrowserReferenceFileToScene;");
                                                                menuItem -sm 1 -l "Grab Thumbnail # from viewport";
                                                                        for( $i=0; $i<10 ;$i++ )
                                                                                menuItem -l ("Grab Thumbnail " + $i) -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");evalDeferred(\"craMayaFileBrowserCreateThumbnail " + $i + ";craMayaFileBrowserDetectFileType\")");
                                                                setParent -m ..;
        
                                                                menuItem -sm 1 -l "Render Thumbnail #";
                                                                                for( $i=0; $i<10 ;$i++ )
                                                                                        menuItem -l ("Render Thumbnail " + $i) -c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");evalDeferred(\"craMayaFileBrowserRenderSceneThumbnail " + $i + " 1;craMayaFileBrowserDetectFileType\")");
                                                                setParent -m ..;

                                                                menuItem -d 1;
                                                                menuItem -en 1 -c ("print \"" + $craGetCurrentPath + $item + "\"") -l $item;

                                                        setParent -m ..;
                                                }
						rowLayout -nc 2 -adj 1;
							textField -font "smallPlainLabelFont" -ip 1 -ed 0 -h 20 -text $item -ann $item;
							if(craMayaFileBrowserThumbCheckPlayblastFile($craGetCurrentPath + $item))
								iconTextButton -ann "View playblast" 
									-bgc .4 .8 .4
									-w 18 -h 18
									-i "renderable.png"
									-l "No thumbnail"
									-en 1
									-c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserOpenPlayblastFile")
								;
                                                setParent ..;
					setParent ..;
				}
			}
			$counter++;
		}
		else
		{
			columnLayout -bgc .27 .27 .27 -dtg $item -adj 1 -vis 1 -p "craMayaFileBrowserthumbnailsGL" ("craMayaFileBrowserThumb" + string($counter));
				if($item == " No matches found!")
					iconTextButton -bgc .4 .4 .4 -en 1 
						 -w $craThumbSize[0] -h $craThumbSize[1] 
						 -i "invisibleCursor.png" 
						 -ann $item 
					;	
				else if($item == "< .. >")
					iconTextButton -bgc .4 .4 .4 -en 1 
						-dcc ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserGoToParentFolder;craMayaFileBrowserViewThumbnails") 
						-w $craThumbSize[0] -h $craThumbSize[1] 
						-i "fileOpen.png" 
						-ann $item 
						-c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType")
					($item + "ThumbITBN");
				else
					iconTextButton -bgc .4 .4 .4 -en 1 
						-dcc ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserNavigateIn;craMayaFileBrowserViewThumbnails") 
						-w $craThumbSize[0] -h $craThumbSize[1] 
						-i "fileOpen.png" 
						-ann $item
						-c ("craMayaFileBrowserSelectThumb(" + $counter + ", \"" + $item + "\");craMayaFileBrowserDetectFileType")
					($item + "ThumbITBN");
				popupMenu -mm 0 craMayaFileBrowserThumbsListCommands;
					menuItem -rp "N" -l "Go to parent folder" -c "evalDeferred(\"craMayaFileBrowserGoToParentFolder;craMayaFileBrowserViewThumbnailsUpdate\")";
				setParent -m ..;
				textField -ip 1 -ed 0 -h 20 -text $item -ann $item;
			setParent ..;
			$counter++;
		}
	}
	evalDeferred("{if(size(`gridLayout -q -ca craMayaFileBrowserthumbnailsGL`))for($craThumb in `gridLayout -q -ca craMayaFileBrowserthumbnailsGL`)columnLayout -e -vis 1 $craThumb;}");
}

global proc craMayaFileBrowserThumbsSize( string $size )
{
	optionVar -rm craMayaFileBrowserThumbSizeOV;

	switch ($size)
	{
		case "tiny":
			for( $sizes in {88, 49} )
				optionVar -iva "craMayaFileBrowserThumbSizeOV" $sizes;
			gridLayout -e -cellWidthHeight 91 71 craMayaFileBrowserthumbnailsGL;
		break;
		
		case "small":
			for( $sizes in {110, 61} )
				optionVar -iva "craMayaFileBrowserThumbSizeOV" $sizes;
			gridLayout -e -cellWidthHeight 113 83 craMayaFileBrowserthumbnailsGL;
		break;
		
		case "medium":
			for( $sizes in {148, 83} )
				optionVar -iva "craMayaFileBrowserThumbSizeOV" $sizes;
			gridLayout -e -cellWidthHeight 151 105 craMayaFileBrowserthumbnailsGL;
		break;
	}
}
global proc int craMayaFileBrowserThumbCheckPlayblastFile( string $file )
{
	string $cra_playblastFile = basenameEx($file);
	string $cra_workspaceDir = `workspace -q -rd`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $craVideoFileExtension = ".mov";
		
	if(`about -win64` && `getApplicationVersionAsFloat` < 2013 )
	{
		if( file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".avi"))) 
			$craVideoFileExtension = ".avi";
	}
	else
	{
		if( !file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".mov"))) 
			$craVideoFileExtension = ".avi";
	}
	
	string $file = (`workspace -q -rd` + "playblast/" + $cra_playblastFile + $craVideoFileExtension);
	
	return file("-q", "-exists", $file);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
global proc craMayaFileBrowserGetProjectList()
{
	if ( `optionMenu -exists craMayaFileBrowserProjectMenu` )
		if ( size(`optionMenu -q -ils craMayaFileBrowserProjectMenu`) )
			for ( $project in `optionMenu -q -ils craMayaFileBrowserProjectMenu`)
				deleteUI $project;
	
	int $craProjectsNum = 0;
	string $craMayaFileBrowserMainProjectDir[] = `optionVar -q craMayaFileBrowserProjectFoldersOV`;
	catchQuiet(`menuItem -en 0 -l "----------------------------------------------------------------" -p craMayaFileBrowserProjectMenu`);
	
	for( $path in `optionVar -q craMayaFileBrowserProjectFoldersOV` )
	{	
		string $craActiveProjectPath = `workspace -fn`;
		string $craProject[];
		tokenize $craActiveProjectPath "/" $craProject;
		int $craSize = size($craProject)-1;
		string $craActiveProjectName = $craProject[$craSize];
		string $craQueryFolder = `file -q -ex $craActiveProjectPath`;
		if ( $craQueryFolder == 1 )
		{
			string $craSubFolderList[];
			if(`about -win`)
				$craSubFolderList = `getFileList -folder $path -fs "*."`;
			else 
				$craSubFolderList = `getFileList -folder $path -fs "*"`;
			
			if ( size($craSubFolderList) == 0 )
			{
				menuItem -en 0 -l ( $path + " - EMPTY") -p craMayaFileBrowserProjectMenu;
			}
			else
			{
				catchQuiet(`menuItem -en 0 -l ("Path: " + $path) -p craMayaFileBrowserProjectMenu`);
				catchQuiet(`menuItem -en 0 -l "----------------------------------------------------------------" -p craMayaFileBrowserProjectMenu`);
				for ( $crai=0; size($craSubFolderList)>$crai; $crai++)
				{
					if(`filetest -d ($path + $craSubFolderList[$crai])`) 	
						catchQuiet(`menuItem -docTag $path -l $craSubFolderList[$crai] -p craMayaFileBrowserProjectMenu ("cra" + $craSubFolderList[$crai] + "MI")`);
					$craProjectsNum++;
				}
				catchQuiet(`menuItem -en 0 -l "----------------------------------------------------------------" -p craMayaFileBrowserProjectMenu`);
			}
		}
	}
	if( $craMayaFileBrowserMainProjectDir[0] != "NOT SET, SELECT A FOLDER")
		catchQuiet(`menuItem -en 0 -l ("You have " + $craProjectsNum + " Projects in " + size($craMayaFileBrowserMainProjectDir) + " project folder(s)") -p craMayaFileBrowserProjectMenu`);
}

global proc craMayaFileBrowserSetActiveProject()
{
	if(!`optionMenu -q -exists craMayaFileBrowserProjectMenu`)
		return;
	
	string $craActiveProjectPath = `workspace -fn`;
	string $craScenesProjectPath = `workspace -q -fre "scene"`;
	if($craScenesProjectPath == "" && `filetest -d ($craActiveProjectPath + $craScenesProjectPath)`)
		$craScenesProjectPath = "scenes";
	string $craProject[];
	tokenize $craActiveProjectPath "/" $craProject;
	string $craActiveProjectName = $craProject[size($craProject)-1];
	
	string $craSelectedProjectName =`optionMenu -q -v craMayaFileBrowserProjectMenu`;
	string $path = dirname(`workspace -fn`) + "/";
	
	string $craFolderName = ( $path + $craActiveProjectName +  "" );
	
	int $craInsideProjectFolders = 0;
	for( $pathOV in `optionVar -q craMayaFileBrowserProjectFoldersOV` )
		if ( `tolower ("\"" + $path + "\"")` == `tolower ("\"" + $pathOV + "\"")`)
			$craInsideProjectFolders = 1;
	
	if ( $craInsideProjectFolders )
	{
		catch (`optionMenu -e -v $craActiveProjectName craMayaFileBrowserProjectMenu`);
		string $craNewPath = ( $path + $craActiveProjectName + "/" + $craScenesProjectPath + "/");
		textField -e -tx $craNewPath  craMayaFileBrowserFilePath;
		craMayaFileBrowserLoadFileList;
	}		
	else
	{
		if(size(`optionMenu -q -ils craMayaFileBrowserProjectMenu`)){
			for($i in `optionMenu -q -ils craMayaFileBrowserProjectMenu`)
				deleteUI $i;
		}
		craMayaFileBrowserGetProjectList;
		string $craNewPath = ( `workspace -q -rd` + $craScenesProjectPath + "/");
		textField -e -tx $craNewPath craMayaFileBrowserFilePath;
		menuItem -p craMayaFileBrowserProjectMenu -d 1 -en 0;
		menuItem -docTag `workspace -q -rd` -l `workspace -q -rd` -p craMayaFileBrowserProjectMenu;
		optionMenu -e -v `workspace -q -rd` craMayaFileBrowserProjectMenu;
		craMayaFileBrowserLoadFileList;
	}
	
	craMayaFileBrowserViewThumbnailsUpdate;
}

global proc craMayaFileBrowserSetProjectByMenu()
{
	
	if ( !size(`optionVar -q craMayaFileBrowserProjectFoldersOV`) )
		warning "Please define main project folder";
	else if( startsWith(`optionMenu -q -v craMayaFileBrowserProjectMenu`, "Path:") ||
		startsWith(`optionMenu -q -v craMayaFileBrowserProjectMenu`, "--------") || 
		`optionMenu -q -v craMayaFileBrowserProjectMenu` == "" ||
		startsWith(`optionMenu -q -v craMayaFileBrowserProjectMenu`, "You have ")
		)
	{
		craMayaFileBrowserSetActiveProject;
		warning "Select a project folder.\n";
	}
	else if( endsWith(`optionMenu -q -v craMayaFileBrowserProjectMenu`," - EMPTY") )
	{
		craMayaFileBrowserSetActiveProject;
		craMayaFileBrowserSettings;
	}
	else
	{
		string $craSelectedProjectName = `optionMenu -q -v craMayaFileBrowserProjectMenu`;
		$craSetSelectedProjectName = substituteAllString($craSelectedProjectName, "-", "_");
		$craSetSelectedProjectName = substituteAllString($craSetSelectedProjectName, " ", "_");
		
		string $craSetSelectedProjectName = `optionMenu -q -v craMayaFileBrowserProjectMenu`;

                string $invalidCharacters[] = {"-", " ", "[", "]", "$", "(", ")", "^", "'", "{", "}", "&", "%", "@", "#", "?", "!"};
                for($chr in $invalidCharacters)
                        $craSetSelectedProjectName = substituteAllString($craSetSelectedProjectName, $chr, "_");
		
		string $craSetThisProject;
		
		string $path;
		if( `endsWith $craSelectedProjectName "/"`)
			$path = $craSelectedProjectName;
		else
			$path = `menuItem -q -docTag ("cra" + $craSetSelectedProjectName + "MI")`;
		
		int $craInsideProjectFolders = 0;
		for( $pathOV in `optionVar -q craMayaFileBrowserProjectFoldersOV` )
		{
			if ( `tolower ("\"" + $path + "\"")` == `tolower ("\"" + $pathOV + "\"")`)
				$craInsideProjectFolders = 1;
		}
		
		if( $craInsideProjectFolders )
			$craSetThisProject = ( `menuItem -q -docTag ("cra" + $craSetSelectedProjectName + "MI")` + $craSelectedProjectName );
		else
			$craSetThisProject = $craSelectedProjectName;
		
		setProject $craSetThisProject;
		
		string $craScenesProjectPath = `workspace -q -fre "scene"`;
		if($craScenesProjectPath == "" && `filetest -d ($craSetThisProject + "/" + $craScenesProjectPath)`)
			$craScenesProjectPath = "scenes";
		string $craFinalProjectPath = ( $craSetThisProject  + "/" + $craScenesProjectPath + "/" );
		
		if(!`file -q -ex $craFinalProjectPath`)
                        sysFile -makeDir $craFinalProjectPath;
                
		textField -e -tx $craFinalProjectPath craMayaFileBrowserFilePath;
		craMayaFileBrowserPathChanged;
		textScrollList -e -sii 1 craMayaFileBrowserFileListTSL;
		textScrollList -e -da craMayaFileBrowserFileListTSL;
		print ( " " + $craSelectedProjectName + " project has been set.\n" );
		craMayaFileBrowserViewThumbnailsUpdate;
	}
}

global proc craMayaFileBrowserLoadFileList()
{		
	global string $craMayaFileBrowserFileListBuffer[];
	$craMayaFileBrowserFileListBuffer = {};
	string $craFilePath =`textField -q -tx craMayaFileBrowserFilePath` + "/";
	string $craFolderList[] = `getFileList -folder $craFilePath -fs "*"`;
	
	for ($craFolder in sort($craFolderList))
		if(`filetest -d ($craFilePath + $craFolder)` && !`startsWith $craFolder "."` )
			$craMayaFileBrowserFileListBuffer[size($craMayaFileBrowserFileListBuffer)] = ("< " + $craFolder + " >");
	
	string $craMayaFileBrowserFileTypes[] = {"flw", "3ds","atom", "ai", "abc", "avi", "bat", "bin", "rpc", "sd",  "cmd", "dae", "exr", "rla", "hdr", "ma", "mb", "fbx", "iff", "jpg", "bmp", "mel", "htm", "map", "mov", "mp4", "mpg","nk", "obj", "png", "py", "psd", "tif", "tga" ,"txt", "wav", "mp3" , "ogg", "aiff", "xml", "xpm", "ui"};	
	
	if( !`about -win` )
	{
	    int $size = size($craMayaFileBrowserFileTypes);
	    for ( $craFileType=0; $craFileType < $size; $craFileType++ )
	    {
		string $craUpperCaseExtension = `toupper $craMayaFileBrowserFileTypes[$craFileType]`;
		$craMayaFileBrowserFileTypes[size($craMayaFileBrowserFileTypes)] = $craUpperCaseExtension;
	    }
	}
	
	for ( $craFileType in sort($craMayaFileBrowserFileTypes) )
	{			
		string $craFileList[] = `getFileList -folder $craFilePath -fs ( "*." + $craFileType)`;
		for ($craProperType in $craFileList)
			if(!`startsWith $craProperType "."`)
				$craMayaFileBrowserFileListBuffer[size($craMayaFileBrowserFileListBuffer)] = $craProperType;
	}
	
	if(!`optionVar -q "craMayaFileBrowserSortByNameOV"`)
		$craMayaFileBrowserFileListBuffer = sort($craMayaFileBrowserFileListBuffer);
		
	textScrollList -e -ra craMayaFileBrowserFileListTSL;
	
	textScrollList -e -a "< .. >" craMayaFileBrowserFileListTSL;
	for($file in $craMayaFileBrowserFileListBuffer)
		textScrollList -e -a $file craMayaFileBrowserFileListTSL;
	
	textScrollList -e -da craMayaFileBrowserFileListTSL;
	string $crafolderNames[]={ "[ .mayaSwatches ]", "[ .craData ]", "[ .DS_Store ]", "[ System Volume Information ]","[ RECYCLER ]", "[ $RECYCLE.BIN ]", ".mayaSwatches", ".craData", ".DS_Store", "System Volume Information","RECYCLER"};
	string $craselectedFileName[]= `textScrollList -q -ai craMayaFileBrowserFileListTSL`;
	for ( $crai in $crafolderNames )
		for ( $crai2 in $craselectedFileName )
			if ( $crai == $crai2 ) 
				textScrollList -e -ri $crai craMayaFileBrowserFileListTSL;
			
	$craMayaFileBrowserFileListBuffer = stringArrayRemoveExact($crafolderNames, $craMayaFileBrowserFileListBuffer);
}

global proc craMayaFileBrowserClearFileInfo()
{
	if(size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`))
		for($crathumb in `tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`)
			deleteUI $crathumb;
	iconTextButton -en 0 -i "SP_MessageBoxCritical.png" -ann "No thumbnails available" -p "craMayaFileBrowserSceneFileInfoImageTL" -w 480 -h 270 craSceneThumbnailImg;
	tabLayout -e -tabLabel ("craSceneThumbnailImg") "No thumbnails available" craMayaFileBrowserSceneFileInfoImageTL;
	scrollField -e -cl craMayaFileBrowserSceneDesc;
	for($crat=0;$crat<10;$crat++)
		iconTextButton -e -en 0 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
	iconTextButton -e -en 0 -image "renderable_dim.png" -bgc .4 .4 .4 -l "  No Playblast" -c "craCreateScenePlayblast" craMayaFileBrowserSceneViewPlayblastBTN;
	iconTextButton -e -en 0 -bgc .4 .4 .4 craMayaFileBrowserSceneDeletePlayblastBTN;
}

global proc craMayaFileBrowserListFolder( string $craFolderName )
{
	string $craMayaFileBrowserMainProjectDir;
	string $craSelectedProjectName;
	string $craCompleteFolder;
	
	string $path = dirname(`workspace -q -rd`);
	int $craInsideProjectFolders = 0;
	for( $pathOV in `optionVar -q craMayaFileBrowserProjectFoldersOV` )
		if ( `tolower ("\"" + $path + "\"")` == `tolower ("\"" + $pathOV + "\"")`)
			$craInsideProjectFolders = 1;
		
	if( $craInsideProjectFolders )
	{
		string $craSelectedProject = `optionMenu -q -v craMayaFileBrowserProjectMenu`;
		
                string $invalidCharacters[] = {"-", " ", "[", "]", "$", "(", ")", "^", "'", "{", "}", "&", "%", "@", "#", "?", "!"};
                for($chr in $invalidCharacters)
                        $craSelectedProject = substituteAllString($craSelectedProject, $chr, "_");
                        
		$craMayaFileBrowserMainProjectDir = `menuItem -q -docTag ("cra" + $craSelectedProject + "MI")`;
		$craSelectedProjectName =`optionMenu -q -v craMayaFileBrowserProjectMenu`;
		if(`substring $craSelectedProjectName  2 2` == ":")
			$craCompleteFolder = $craSelectedProjectName;
		else
			$craCompleteFolder = ( $craMayaFileBrowserMainProjectDir + $craSelectedProjectName );
	}
	else 
	{
		$craCompleteFolder = `workspace -q -rd`;
		$craMayaFileBrowserMainProjectDir = `workspace -q -rd`;
	}
	
	if( $craFolderName == "scenes"){
		string $craScenesProjectPath = `workspace -q -fre "scene"`;
		if($craScenesProjectPath == "" && filetest("-d", (`workspace -q -rd` + $craScenesProjectPath)))
			$craScenesProjectPath = "scenes/";
		$craCompleteFolder += ($craScenesProjectPath + "/");
		textScrollList -e -sii 1 craMayaFileBrowserFileListTSL;
	}
	
	else if( $craFolderName == "sourceimages" ){
		string $craSourceimagesProjectPath = `workspace -q -fre "sourceImages"`;
		if($craSourceimagesProjectPath == "" && filetest("-d", (`workspace -q -rd` + $craSourceimagesProjectPath)))
			$craSourceimagesProjectPath = "sourceimages/";
		$craCompleteFolder += ($craSourceimagesProjectPath + "/");
		textScrollList -e -sii 1 craMayaFileBrowserFileListTSL;
	}
	
	else if( $craFolderName == "playblast" && filetest("-d", (`workspace -q -rd` + "playblast"))){
		$craCompleteFolder = (`workspace -q -rd` + "playblast/");
		textScrollList -e -sii 1 craMayaFileBrowserFileListTSL;
	}
	else if( $craFolderName == "images"){
		string $craImagesProjectPath = `workspace -q -fre "images"`;
		if($craImagesProjectPath == "" && filetest("-d", (`workspace -q -rd` + $craImagesProjectPath)))
			$craImagesProjectPath = "images/";
		$craCompleteFolder += ($craImagesProjectPath + "/");
		textScrollList -e -sii 1 craMayaFileBrowserFileListTSL;
	}
	
	else {
		
		$craCompleteFolder = ( $craMayaFileBrowserMainProjectDir + $craSelectedProjectName         + $craFolderName + "/");
	}
	
	if(!`file -q -ex $craCompleteFolder`)
		sysFile -makeDir $craCompleteFolder;
	
	textField -e -tx $craCompleteFolder craMayaFileBrowserFilePath;
	craMayaFileBrowserPathChanged;
	if(`iconTextButton -q -en craMayaFileBrowserClearFilterFieldBTN`)
		craMayaFileBrowserFileFilter 1;
	for($crat=0;$crat<10;$crat++)
		iconTextButton -e -en 0 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
	
	craMayaFileBrowserClearFileInfo;
	scrollField -e -en 0 craMayaFileBrowserSceneDesc;
	rowLayout -e -en 0 craMayaFileBrowserSceneDescDeleteNodeRL;
	
	craMayaFileBrowserViewThumbnailsUpdate;
}

global proc craMayaFileBrowserListSystemFolder(string $folder)
{
	if(`about -win`)
	{
		switch ($folder)
		{
			case "Desktop":
				string $cragetUSERPROFILE = `getenv USERPROFILE`;
				textField -e -tx ( $cragetUSERPROFILE + "/Desktop/") craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
			
			case "Documents":
				string $myDocsPath = `getenv USERPROFILE` + "/Documents/";
				textField -e -tx $myDocsPath craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
			
			case "Temp":
				string $myTempPath = `getenv TEMP` + "/";
				textField -e -tx $myTempPath craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
		}
	}
	else if(`about -linux`)
	{
		python("import os, re\ndef get_user_path(folder):\n    D_paths = list()\n    try:\n        fs = open(os.sep.join((os.path.expanduser(\"~\"), \".config\", \"user-dirs.dirs\")),'r')\n        data = fs.read()\n        fs.close()\n    except:\n        data = \"\"\n    D_paths = re.findall(r'XDG_'+folder+'_DIR=\\\"([^\\\"]*)', data)\n    if len(D_paths) == 1:\n        D_path = D_paths[0]\n        D_path = re.sub(r'\\$HOME', os.path.expanduser(\"~\"), D_path)\n    else:\n        D_path = os.sep.join((os.path.expanduser(\"~\"), folder))\n    if os.path.isdir(D_path):\n        return D_path\n    else:\n        return None\n");
		
		switch ($folder)
		{
			case "Home":
				string $cragetUSERHOME = `getenv HOME`;
				textField -e -tx $cragetUSERHOME craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
			
			case "Desktop":
				string $craGetUSERDesktop = python("get_user_path('DESKTOP')");
				if( `filetest -d $craGetUSERDesktop` )
				{
					textField -e -tx $craGetUSERDesktop  craMayaFileBrowserFilePath;
					craMayaFileBrowserListPath;
				}
				else 
					warning ($craGetUSERDesktop + " does not exist!.\n");
				break;
			
			case "Documents":
				string $craGetUSERDocuments = python("get_user_path('DOCUMENTS')");
				if( `filetest -d $craGetUSERDocuments` )
				{
					textField -e -tx $craGetUSERDocuments  craMayaFileBrowserFilePath;
					craMayaFileBrowserListPath;
				}
				else 
					warning ($craGetUSERDocuments + " does not exist!.\n");
			break;
			
			case "Videos":
				string $craGetUSERVideos = python("get_user_path('VIDEOS')");
				if( `filetest -d $craGetUSERVideos` )
				{
					textField -e -tx $craGetUSERVideos  craMayaFileBrowserFilePath;
					craMayaFileBrowserListPath;
				}
				else 
					warning ($craGetUSERVideos + " does not exist!.\n");
			break;
			
			case "Media":
				textField -e -tx "/media/" craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
			
			case "Temp":
				string $craTempPath = `getenv TMPDIR` + "/";
				textField -e -tx $craTempPath craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
		}
	}
	else if(`about -macOS`)
	{
		switch ($folder)
		{
			case "Home":
				string $cragetUSERHOME = `getenv HOME`;
				textField -e -tx $cragetUSERHOME craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
			
			case "Desktop":
				string $cragetUSERHOME = `getenv HOME` + "/Desktop";
				textField -e -tx $cragetUSERHOME craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
			
			case "Temp":
				string $craTempPath = `getenv TMPDIR` + "/";
				textField -e -tx $craTempPath craMayaFileBrowserFilePath;
				craMayaFileBrowserListPath;
			break;
		}
	}
	
	craMayaFileBrowserClearFileInfo;
	scrollField -e -en 0 craMayaFileBrowserSceneDesc;
	rowLayout -e -en 0 craMayaFileBrowserSceneDescDeleteNodeRL;
	if(`iconTextButton -q -en craMayaFileBrowserClearFilterFieldBTN`)
		craMayaFileBrowserFileFilter 1;
	
	craMayaFileBrowserViewThumbnailsUpdate;
}

global proc craMayaFileBrowserListDrive( string $craDriveName )
{
	textField -e -tx ( $craDriveName + ":/" ) craMayaFileBrowserFilePath;
	craMayaFileBrowserPathChanged;
	craMayaFileBrowserViewThumbnailsUpdate;
}

global proc craMayaFileBrowserListPath()
{  
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	
	if(!`endsWith $craGetCurrentPath "/"` && !`endsWith $craGetCurrentPath "\\"`)
		$craGetCurrentPath += "/";
	
	string $craSelectedItems[] = `craMayaFileBrowserGetSelectedFiles`;
	if(`file -q -ex $craGetCurrentPath`)
	{
		textField -e -tx `fromNativePath $craGetCurrentPath` craMayaFileBrowserFilePath;
		craMayaFileBrowserLoadFileList;
		if(size($craSelectedItems))
        {			
			for($craSelectedItem in `textScrollList -q -ai craMayaFileBrowserFileListTSL`)
			{
				for($craOrigItem in $craSelectedItems)
				{
					if($craOrigItem == $craSelectedItem)
						textScrollList -e -si $craOrigItem craMayaFileBrowserFileListTSL;					
				}
			}
		}
		craMayaFileBrowserDetectFileType;
		if(`iconTextButton -q -en craMayaFileBrowserClearFilterFieldBTN`)
			craMayaFileBrowserFileFilter 1;
		
		craMayaFileBrowserAppendRecentFolder;		
	}
	else	
	{
		warning ( "" + $craGetCurrentPath + " does not exist.\n" );
		// textField -e -tx $craGetCurrentPath craMayaFileBrowserFilePath;
	}
	
	craMayaFileBrowserViewThumbnailsUpdate;
}	

global proc craMayaFileBrowserOpenFilePath()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	
	if ( $craGetCurrentPath == "")
		warning "Please define a path";
	else
	{
		string $craSelectedItems[] = `craMayaFileBrowserGetSelectedFiles`;
		string $craFirstItem;
		$craFirstItem = substituteAllString($craSelectedItems[0], "< ", "");
		$craFirstItem = substituteAllString($craFirstItem, " >", "");
		string $craFinalFilePath = $craGetCurrentPath + $craFirstItem;
		print  "\n";
		print $craFinalFilePath;
		if(`about -linux`)
			system ("xdg-open " + `toNativePath $craGetCurrentPath` + "&");
		else if(`about -macOS`)
			system ("open " + `toNativePath $craGetCurrentPath`);
		else
            system ("start explorer /select, \"" + `toNativePath $craFinalFilePath` + "\"");
	}
}	

global proc craMayaFileBrowserNavigateIn()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $crafolderName[] = `craMayaFileBrowserGetSelectedFiles`;
	string $craNewPath = ( $craGetCurrentPath +  $crafolderName[0] );
	$craNewPath = substituteAllString($craNewPath, "< ", "");
	$craNewPath = substituteAllString($craNewPath, " >", "");
	
	if ( `filetest -d $craNewPath` )
	{
		textField -e -tx ( $craNewPath + "/" ) craMayaFileBrowserFilePath;
		craMayaFileBrowserPathChanged;
		if(`iconTextButton -q -en craMayaFileBrowserClearFilterFieldBTN`)
			craMayaFileBrowserFileFilter 1;
		for($crat=0;$crat<10;$crat++)
			iconTextButton -e -en 0 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
	}
}

global proc craMayaFileBrowserGoToParentFolder()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	if(!`endsWith $craGetCurrentPath "/"` && !`endsWith $craGetCurrentPath "\\"`)
		$craGetCurrentPath += "/";
	
	textField -e -tx `fromNativePath $craGetCurrentPath` craMayaFileBrowserFilePath;
	
	if(!`endsWith $craGetCurrentPath ":/"` || $craGetCurrentPath == "/")
	{
		string $currentDir = basenameEx($craGetCurrentPath);
		string $parentFolder = dirname($craGetCurrentPath) + "/";
		textField -e -tx $parentFolder craMayaFileBrowserFilePath;
		string $craSelectFolder = basenameEx($currentDir);
		textScrollList -e -da craMayaFileBrowserFileListTSL;
		craMayaFileBrowserPathChanged;
		craMayaFileBrowserLoadFileList;
		if(`iconTextButton -q -en craMayaFileBrowserClearFilterFieldBTN`)
			craMayaFileBrowserFileFilter 1;
		catchQuiet(`textScrollList -e -si ("< " + $craSelectFolder + " >") craMayaFileBrowserFileListTSL`);
		for($crat=0;$crat<10;$crat++)
			iconTextButton -e -en 0 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
		craMayaFileBrowserViewThumbnailsUpdate;
	}
	else
		warning "No parent folder. Reached root folder.";
}

global proc craMayaFileBrowserSaveSceneNote()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $crafile = $craselectedFile[0];
	string $crafileDir = `craMayaFileBrowserGetInfoPath`;
	
	string $crafinalPath = ( $crafileDir + "/.craData/craNote/");
		
	if ( 	size($craselectedFile[0]) != 0 
		&& `endsWith $craselectedFile[0] ".ma"`
		|| `endsWith $craselectedFile[0] ".mb"`
		|| `endsWith $craselectedFile[0] ".MA"`
		|| `endsWith $craselectedFile[0] ".MB"`)
	{
		craMayaFileBrowserAddNoteInfo;
		sysFile -md ( $crafinalPath );
		string $crafileName = basenameEx($craselectedFile[0]);
		$craWriterFile = ( $crafinalPath + $crafileName );
		$craFileID = `fopen $craWriterFile "w"`;		
		string $cragetWriterName = `scrollField -q -tx craMayaFileBrowserSceneDesc`;
		fprint $craFileID ( $cragetWriterName );	
		fclose $craFileID;  
		print ( "Note for " + $crafile + " has been saved.\n" );
	}
	else
	{
		scrollField -e -cl craMayaFileBrowserSceneDesc;
		warning ( "Please select a Maya scene to add note to.\n" );
	}
}

global proc craMayaFileBrowserLoadNote ( string $crafileName )
{
	scrollField -e -cl -ed 1 craMayaFileBrowserSceneDesc;
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $file = `basenameEx $craselectedFile[0]`;
	
	string $crafile = $crafileName;
	string $crafileDir = `craMayaFileBrowserGetInfoPath`;
	string $crafinalPath = ( $crafileDir + "/.craData/craNote/");
	string $filePath = $crafinalPath + $file;
	if( `file -q -exists $filePath`)
	{
		int $crafileId = `fopen $filePath "r"`;
		
		string $nextLine = `fgetline $crafileId`;
		scrollField -e -it $nextLine craMayaFileBrowserSceneDesc;
		while ( size( $nextLine ) > 0 ) 
		{
		    $nextLine = `fgetline $crafileId`;
		    scrollField -e -it $nextLine craMayaFileBrowserSceneDesc;
		}
				
		fclose $crafileId;
		scrollField -e -ip 1 -it "" craMayaFileBrowserSceneDesc;
	}
}

global proc craMayaFileBrowserAddNoteInfo()
{	
	string $craGetUser = `getenv USER`;
	string $craGetDate = `date -date`; 
	string $craGetTime = `date -time`;
	string $craLine = "_______________________________________________________________________";
	scrollField -e -it ( "\n" + $craLine + "\n" + "USER: " + $craGetUser + "\t    " + "DATE: " + strip($craGetDate) + "        TIME: " + strip($craGetTime) ) craMayaFileBrowserSceneDesc;
}

global proc craMayaFileBrowserDetectFileType()
{	
	string $craSelectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	if( $craSelectedFile[0] == " No matches found!")
		return;
	iconTextButton -e -en 0 craMayaFileBrowserImportFileToSceneBTN;
	iconTextButton -e -en 0 craMayaFileBrowserReferenceFileToSceneBTN;
	iconTextButton -e -en 0 craCreateMaterialsFromSelectedFilesBTN;
	scrollField -e -en 1 craMayaFileBrowserSceneDesc;
	rowLayout -e -en 0 craMayaFileBrowserSceneDescDeleteNodeRL;
	
	
	string $crafileName = $craSelectedFile[0];
	string $cragetFileExtension[];
	tokenize $crafileName "." $cragetFileExtension;
	int $craSize = size($cragetFileExtension)-1;
	
	string $crafileExtension = $cragetFileExtension[$craSize];
	
	textField -e -text "" craMayaFileBrowserSceneFileNamePathTF;
	textField -e -text "" craMayaFileBrowserSceneFileSizeTF;
	textField -e -text "" craMayaFileBrowserSceneCreationDateTF;
	textField -e -text "" craMayaFileBrowserSceneFileModDateTF;
	
	if ( !`startsWith $crafileName "< "` && !`endsWith $crafileName " >"` )
	{	
		textField -e -ann "Importing and referencing namespace" -text "" craMayaFileBrowserNamespaceTXT;
		textField -e -ann (`textField -q -tx  craMayaFileBrowserFilePath` + $crafileName) -text (`textField -q -tx craMayaFileBrowserFilePath` + $crafileName) craMayaFileBrowserSceneFileNamePathTF;
		textField -e -ip 1 -it "" craMayaFileBrowserSceneFileNamePathTF;
		python("import maya.cmds as mc\nimport os\ncraMayaFileBrowserFilename = \"" + `textField -q -tx  craMayaFileBrowserFilePath` + $crafileName + "\"\nsize = os.path.getsize(craMayaFileBrowserFilename)/(1024*1024.0)\nmc.textField('craMayaFileBrowserSceneFileSizeTF', e=True, ann='%0.2f MB' % size, text='%0.2f  MB' % size)");
		python("import os.path, time\nimport maya.cmds as mc\nmod_year, mod_mon, mod_day, mod_hour, mod_min, mod_sec, mod_wday, mod_yday, mod_isdst = time.gmtime(os.path.getmtime(craMayaFileBrowserFilename))\ncreat_year, creat_mon, creat_day, creat_hour, creat_min, creat_sec, creat_wday, creat_yday, creat_isdst = time.gmtime(os.path.getctime(craMayaFileBrowserFilename))\nmodTime = '%s/%s/%s %s:%s:%s' % (str(mod_mon).zfill(2), str(mod_day).zfill(2),str(mod_year).zfill(2),str(mod_hour).zfill(2),str(mod_min).zfill(2),str(mod_sec).zfill(2))\ncreatTime = '%s/%s/%s %s:%s:%s' % (str(creat_mon).zfill(2), str(creat_day).zfill(2), str(creat_year).zfill(2), str(creat_hour).zfill(2), str(creat_min).zfill(2), str(creat_sec).zfill(2))\nmc.textField('craMayaFileBrowserSceneCreationDateTF', edit=True, ann=creatTime, text=creatTime)\nmc.textField('craMayaFileBrowserSceneFileModDateTF', edit=True, ann=modTime, text=modTime)");
		
		string $craMayaSceneFiles[] = {"ma", "mb"};
		for ( $crai in $craMayaSceneFiles)
		{
			if( `tolower $crafileExtension` == $crai )
			{
				craMayaFileBrowserShowThumbnail $crafileName;
				craMayaFileBrowserLoadNote $crafileName;
				iconTextButton -e -en 1 craMayaFileBrowserImportFileToSceneBTN;
				iconTextButton -e -en 1 craMayaFileBrowserReferenceFileToSceneBTN;
				rowLayout -e -en 1 craMayaFileBrowserSceneDescDeleteNodeRL;
				return;
			}
		}
		
		string $craMayaPlayblastFiles[] = {"mov", "avi"};
		for ( $crai in $craMayaPlayblastFiles)
		{
			if( `tolower $crafileExtension` == $crai )
			{
				iconTextButton -e -en 0 craMayaFileBrowserImportFileToSceneBTN;
				iconTextButton -e -en 0 craMayaFileBrowserReferenceFileToSceneBTN;
				if(`craMayaFileBrowserCheckPlayblastFile`)
				{
					craMayaFileBrowserShowThumbnail $crafileName;
					craMayaFileBrowserLoadNote $crafileName;
					rowLayout -e -en 1 craMayaFileBrowserSceneDescDeleteNodeRL;
					return;
				}
			}
		}
		
		string $craImageFiles[];
		if(`about -win`)
			$craImageFiles = {"avi", "bmp", "jpg", "png", "tga", "exr", "iff", "map", "tif", "hdr", "psd", "xpm"};
		else
			$craImageFiles = {"bmp", "jpg", "png", "tga", "exr", "iff", "map" , "MAP" ,"tif", "hdr", "psd", "xpm"};
		
		for ( $crai in $craImageFiles)
		{
			if( `tolower $crafileExtension` == $crai )
			{
				craMayaFileBrowserShowImage;
				return;
			}
		}
		
		string $craTextFiles[] ={"atom", "mel", "py", "txt", "xml", "css" , "ui", "nk", "bat", "cmd"};
		for ( $crai in $craTextFiles)
		{
			if( `tolower $crafileExtension` == $crai )
			{
				craMayaFileBrowserShowTextInNotes;
				break;
			}
		}
			
		string $craMayaFileBrowserOtherTypes[] = {"atom", "ai", "abc", "3ds", "bin", "rpc", "sd", "dae", "fbx", "htm", "mp4", "mpg", "mov", "obj", "wav", "mp3" , "ogg", "aiff"};
		for ( $crai in $craMayaFileBrowserOtherTypes)
		{
			if( `tolower $crafileExtension` == $crai )
			{
				if( `tolower $crafileExtension` == "aiff" || 
 				    `tolower $crafileExtension` == "3ds" || 
				    `tolower $crafileExtension` == "fbx" || 
				    `tolower $crafileExtension` == "obj" || 
				    `tolower $crafileExtension` == "wav" )
				{
					iconTextButton -e -en 1 craMayaFileBrowserImportFileToSceneBTN;
					iconTextButton -e -en 1 craMayaFileBrowserReferenceFileToSceneBTN;
				}

				else if( `tolower $crafileExtension` == "abc" || 
					 `tolower $crafileExtension` == "atom" || 
				 	 `tolower $crafileExtension` == "bin" ||
				 	 `tolower $crafileExtension` == "rpc" ||
				 	 `tolower $crafileExtension` == "sd" ||
				 	 `tolower $crafileExtension` == "dae")
                                 {
					iconTextButton -e -en 1 craMayaFileBrowserImportFileToSceneBTN;
                                 }

                                craMayaFileBrowserShowThumbnail $crafileName;
                                craMayaFileBrowserLoadNote $crafileName;
                                break;
			}
		}
		
		if( `tolower $crafileExtension` == "obj" || `tolower $crafileExtension` == "fbx") 
			textField -ip 1 -e -ann `basenameEx $crafileName` -text `basenameEx $crafileName` craMayaFileBrowserNamespaceTXT;
	}	
	else
	{
		craMayaFileBrowserClearFileInfo;
		textField -e -ann "Importing and referencing namespace" -text "" craMayaFileBrowserNamespaceTXT;
		$crafileName = substituteAllString($crafileName, "< ", "");
		$crafileName = substituteAllString($crafileName, " >", "");
		textField -e -ann (`textField -q -tx  craMayaFileBrowserFilePath` + $crafileName + "/") -text (`textField -q -tx craMayaFileBrowserFilePath` + $crafileName + "/") craMayaFileBrowserSceneFileNamePathTF;
		textField -e -ip 1 -it "" craMayaFileBrowserSceneFileNamePathTF;
		python("craMayaFileBrowserFilename = \"" + `textField -q -tx craMayaFileBrowserFilePath` + $crafileName + "\"");
		python("import os.path, time\nimport maya.cmds as mc\nmod_year, mod_mon, mod_day, mod_hour, mod_min, mod_sec, mod_wday, mod_yday, mod_isdst = time.gmtime(os.path.getmtime(craMayaFileBrowserFilename))\ncreat_year, creat_mon, creat_day, creat_hour, creat_min, creat_sec, creat_wday, creat_yday, creat_isdst = time.gmtime(os.path.getctime(craMayaFileBrowserFilename))\nmodTime = '%s/%s/%s %s:%s:%s' % (str(mod_mon).zfill(2), str(mod_day).zfill(2),str(mod_year).zfill(2),str(mod_hour).zfill(2),str(mod_min).zfill(2),str(mod_sec).zfill(2))\ncreatTime = '%s/%s/%s %s:%s:%s' % (str(creat_mon).zfill(2), str(creat_day).zfill(2), str(creat_year).zfill(2), str(creat_hour).zfill(2), str(creat_min).zfill(2), str(creat_sec).zfill(2))\nmc.textField('craMayaFileBrowserSceneCreationDateTF', edit=True, ann=creatTime, text=creatTime)\nmc.textField('craMayaFileBrowserSceneFileModDateTF', edit=True, ann=modTime, text=modTime)");
		for($crat=0;$crat<10;$crat++)
			iconTextButton -e -en 0 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
	}
}	

global proc craMayaFileBrowserOpenFile()
{
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $craGetCurrentPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $crafileName = $craselectedFile[0];
	string $craFinalFilePath = $craGetCurrentPath + $crafileName;
	
	string $cragetFileExtension[];
	tokenize $crafileName "." $cragetFileExtension;
	int $craSize = size($cragetFileExtension)-1;
	string $crafileExtension = $cragetFileExtension[$craSize];

	if (`getModifiers` == 8 )
	{
		craMayaFileBrowserRenameFile;
		return;
	}
	else if (`getModifiers` == 1)
	{
		craMayaFileBrowserCopyFile;
		return;
	}
		
	string $craSceneFiles[]={"ma", "mb"};
	for ( $crai in $craSceneFiles)
	{
		if( `tolower $crafileExtension` == $crai )
		{
			craMayaFileBrowserOpenSceneFile;
			return;
		}
	}
	
	string $craMediaFiles[]={"bat", "cmd", "avi", "mov", "mp4", "mpg","nk", "flv", "flw", "mp3", "ogg", "aiff", "wav", "bmp", "exr", "hdr", "iff", "jpg", "png", "psd", "tga", "tif"};
	for ( $crai in $craMediaFiles)
	{
		if( `tolower $crafileExtension` == $crai )
		{
			craMayaFileBrowserOpenMediaFile;
			return;
		}
	}
		
	string $crawebFiles[]={ "htm", "html"};
	for ( $crai in $crawebFiles)
	{
		if( `tolower $crafileExtension` == $crai )
		{
			craMayaFileBrowserOpenWebFile;
			return;
		}
	}
	
	if( `tolower $crafileExtension` == "mel" )
	{
		craMayaFileBrowserSourceMel;
		return;
	}
	
	if( `tolower $crafileExtension` == "py" || `tolower $crafileExtension` == "pyc" )
	{
		craMayaFileBrowserImportReloadPythonModule;
		return;
	}
	
	if( `tolower $crafileExtension` == "ui"  )
	{
		craMayaFileBrowserOpenUiFile;
		return;
	}
	
	if( `tolower $crafileExtension` == "txt" )
	{
		craMayaFileBrowserOpenTextFile;
		return;
	}
	
	string $craobjFiles[]={"atom", "ai", "abc", "bin", "rpc", "sd",  "dae", "obj", "fbx", "3ds"};
	for ( $crai in $craobjFiles)
	{
		if( `tolower $crafileExtension` == $crai )
		{
			craMayaFileBrowserImportFileToScene;
			return;
		}
	}
	
	if( $crafileName == "< .. >")
		craMayaFileBrowserGoToParentFolder;
	else 
		craMayaFileBrowserNavigateIn;
}	

global proc craMayaFileBrowserOpenSceneFile()
{
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $craGetCurrentPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $craopenFile = ( $craGetCurrentPath + $craselectedFile[0] );
	file -f -ignoreVersion -o $craopenFile;
	addRecentFile($craopenFile, "Best Guess");
	craSceneUtilsInitMenuItems;
	evalDeferred ("print (\"" + $craopenFile + " has been opened.\\n\")");
}	

global proc craMayaFileBrowserOpenWebFile()
{
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $craGetCurrentPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $craopenFile = ( $craGetCurrentPath + $craselectedFile[0] );
	showHelp -a $craopenFile;
}

global proc craMayaFileBrowserFileListCheckPopupItems()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $craMayaFileBrowserVideoFile = basenameEx($cra_selectedFile[0]);
	string $craGetCurrentPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $craFullFilePath = $craGetCurrentPath + $cra_selectedFile[0];  
	string $craFilenameParts[];
	
	tokenize $cra_selectedFile[0] "." $craFilenameParts;
	string $craFileExtension = $craFilenameParts[size($craFilenameParts)-1];
	
	popupMenu -e -dai craMayaFileBrowserFileListCommands;
		menuItem
			-label "Go to parent folder"
			-p "craMayaFileBrowserFileListCommands"
			-command "craMayaFileBrowserGoToParentFolder"
			-rp "N"
			craMayaFileBrowserGoToParentFolderMI;
	
		menuItem
			-p "craMayaFileBrowserFileListCommands"
			-label "Refresh File List"
			-command "craMayaFileBrowserListPath"
			-rp "SW"
			craMayaFileBrowserListPathMI;
			
		menuItem
			-label "Rename file"
			-p "craMayaFileBrowserFileListCommands"
			-rp "S"
			-command "craMayaFileBrowserRenameFile"
			craMayaFileBrowserRenameFileMI;
		
		menuItem
			-label "Show selected file(s) path"
			-p "craMayaFileBrowserFileListCommands"
			-rp "E"
			-command "craMayaFileBrowserShowFilePaths"
			craMayaFileBrowserShowFilePathsMI;
			
		menuItem
			-label "Select opened file"
			-p "craMayaFileBrowserFileListCommands"
			-rp "SE"
			-command "craMayaFileBrowserSelectOpenedScene"
			craMayaFileBrowserCurrentFilePathMI;
		
		menuItem
			-label "Duplicate file"
			-p "craMayaFileBrowserFileListCommands"
			-command "craMayaFileBrowserCopyFile"
			craMayaFileBrowserCopyFileMI;
		
		menuItem -d 1 -p "craMayaFileBrowserFileListCommands";
		
		menuItem
			-label "Delete selected file(s)"
			-p "craMayaFileBrowserFileListCommands"
			-command "craMayaFileBrowserDeleteSelectedFiles"
			craMayaFileBrowserDeleteSelectedFilesMI;
		
	if(!size($cra_selectedFile))
	{
		deleteUI craMayaFileBrowserShowFilePathsMI;
		deleteUI craMayaFileBrowserRenameFileMI;
		deleteUI craMayaFileBrowserDeleteSelectedFilesMI;;
		return;
	}
	else
	{
		menuItem -d 1 -p "craMayaFileBrowserFileListCommands";
		
		menuItem
                        -label "Import selected"
                        -rp "NW"
                        -p "craMayaFileBrowserFileListCommands"
                        -command "craMayaFileBrowserImportFileToScene"
		craMayaFileBrowserImportFileToSceneMI;
		
		menuItem
                        -label "Import Options"
                        -p "craMayaFileBrowserFileListCommands"
                        -rp "NW"
                        -command "ImportOptions"
                        -ob 1
		;
		
		menuItem
                        -p "craMayaFileBrowserFileListCommands"
                        -rp "NE"
                        -label "Reference selected"
                        -command "craMayaFileBrowserReferenceFileToScene"
		craMayaFileBrowserReferenceFileToSceneMI;
		
		
		menuItem
                        -label "Reference Options"
                        -p "craMayaFileBrowserFileListCommands"
                        -rp "NE"
                        -command "CreateReferenceOptions"
                        -ob 1
		;
	}
	
	string $craImageFiles[]={"ma", "mb"};
	for ( $crai in $craImageFiles)
	{
		if( `tolower $craFileExtension` == `tolower $crai` )
		{
			menuItem
                                -label "View playblast"
                                -rp "W"
                                -p "craMayaFileBrowserFileListCommands"
                                -command "craMayaFileBrowserOpenPlayblastFile"
			craMayaFileBrowserPlayblastMovieMI
			;
			
			//check if playblast file exists
			if( `craMayaFileBrowserCheckPlayblastFile`)
				menuItem -e -en 1 -l "View Playblast" craMayaFileBrowserPlayblastMovieMI;
			else
				menuItem -e -en 0 -l "No Playblast" craMayaFileBrowserPlayblastMovieMI;
			
			return;
		}
	}
	
	string $craImageFiles[]={"bmp", "exr", "hdr", "iff", "jpg", "png", "psd", "tga", "tif"};
	for ( $crai in $craImageFiles)
	{
		if( `tolower $craFileExtension` == `tolower $crai` )
		{
			deleteUI craMayaFileBrowserReferenceFileToSceneMI;
			deleteUI craMayaFileBrowserDeleteSelectedFilesMI;
			
			menuItem
			-label "View sequence"
			-rp "S"
			-p "craMayaFileBrowserFileListCommands"
			-command "craMayaFileBrowserOpenSequence"
			craMayaFileBrowserViewSequenceMI
			;
			
			menuItem
			-label "View sequence"
			-rp "S"
			-ob 1
			-p "craMayaFileBrowserFileListCommands"
			-command "craMayaFileBrowserOpenSequenceOptions"
			craMayaFileBrowserViewSequenceOBMI
			;
			
			deleteUI craMayaFileBrowserRenameFileMI;
			menuItem
			-label "Rename file"
			-p "craMayaFileBrowserFileListCommands"
			-command "craMayaFileBrowserRenameFile"
			craMayaFileBrowserRenameFileMI
			;
			
			menuItem -p "craMayaFileBrowserFileListCommands" -d 1;
			menuItem -en 0 -p "craMayaFileBrowserFileListCommands" -l "Maya Software Shaders";
			menuItem -p "craMayaFileBrowserFileListCommands" -d 1;
			menuItem -p "craMayaFileBrowserFileListCommands" -l "Lambert from texture(s)" -c ("craMaterialPerImage \"lambert\" 1");
			menuItem -rp "W" -p "craMayaFileBrowserFileListCommands" -l "Blinn from texture(s)" -c ("craMaterialPerImage \"blinn\" 1");
			menuItem -rp "SW" -p "craMayaFileBrowserFileListCommands" -l "Surface Shader from texture(s)" -c ("craMaterialPerImage \"surfaceShader\" 1");
			menuItem -p "craMayaFileBrowserFileListCommands" -d 1;
			menuItem -p "craMayaFileBrowserFileListCommands" -l "Phong from texture(s)" -c ("craMaterialPerImage \"phong\" 1");
			menuItem -p "craMayaFileBrowserFileListCommands" -d 1;
			menuItem -en 0 -p "craMayaFileBrowserFileListCommands" -l "Mental Ray Shaders";
			menuItem -p "craMayaFileBrowserFileListCommands" -d 1;
			menuItem -p "craMayaFileBrowserFileListCommands" -l "dgs_material from texture(s)" -c ("craMaterialPerImage \"dgs_material\" 1");
			menuItem -p "craMayaFileBrowserFileListCommands" -l "dielectric_material from texture(s)" -c ("craMaterialPerImage \"dielectric_material\" 1");
			menuItem -p "craMayaFileBrowserFileListCommands" -l "mia_material from texture(s)" -c ("craMaterialPerImage \"mia_material\" 1");
			menuItem -p "craMayaFileBrowserFileListCommands" -l "mia_material_x from texture(s)" -c ("craMaterialPerImage \"mia_material_x\" 1");
			
			menuItem -e -rp "NE" craMayaFileBrowserListPathMI;
			
			menuItem -p "craMayaFileBrowserFileListCommands" -d 1;
			menuItem
				-label "Delete selected file(s)"
				-p "craMayaFileBrowserFileListCommands"
				-command "craMayaFileBrowserDeleteSelectedFiles"
				craMayaFileBrowserDeleteSelectedFilesMI;
			return;
		}
	}
	
	string $craImageFiles[]={"py", "pyc"};
	for ( $crai in $craImageFiles)
	{
		if( `tolower $craFileExtension` == `tolower $crai` )
		{
			deleteUI craMayaFileBrowserReferenceFileToSceneMI;
			deleteUI craMayaFileBrowserImportFileToSceneMI;
			menuItem -rp "W" -p "craMayaFileBrowserFileListCommands" -l ("Import/Reload " + $cra_selectedFile[0] + " module") -c "craMayaFileBrowserImportReloadPythonModule" ;
			menuItem -rp "NW" -p "craMayaFileBrowserFileListCommands"  -l ("Run " + $craMayaFileBrowserVideoFile + "." + $craMayaFileBrowserVideoFile + "() function") -c "craMayaFileBrowserRunFilenameFunction";
			return;	
		}
	}
	
	if( `tolower $craFileExtension` == "mel" )
	{
		deleteUI craMayaFileBrowserReferenceFileToSceneMI;
		deleteUI craMayaFileBrowserImportFileToSceneMI;
		menuItem -rp "NW" -p "craMayaFileBrowserFileListCommands" -l ("Source " + $cra_selectedFile[0]) -c "craMayaFileBrowserSourceMel";
		menuItem -rp "W" -p "craMayaFileBrowserFileListCommands" -l ("Run " +  $craMayaFileBrowserVideoFile + " procedure") -c "craMayaFileBrowserRunFilenameProcedure" ;
		return;
	}
	
	if( `tolower $craFileExtension` == "obj" )
	{
		menuItem -rp "W" -p "craMayaFileBrowserFileListCommands" -l ("Import as OBJ Sequence") -c "craMayaFileBrowserImportOBJSequence(craMayaFileBrowserGetSelectedFilesPath(),1)" ;
		menuItem -rp "W" -ob 1 -p "craMayaFileBrowserFileListCommands" -l ("Import as OBJ Sequence") -c "craMayaFileBrowserImportOBJSequence(craMayaFileBrowserGetSelectedFilesPath(),0)" ;
		return;
	}
	
	if( `tolower $craFileExtension` == "fbx")
			return;
		
	if( `tolower $craFileExtension` == "atom" || `tolower $craFileExtension` == "dae")
	{
		deleteUI craMayaFileBrowserReferenceFileToSceneMI;
		return;
	}
	
	if( `tolower $craFileExtension` == "bat" || `tolower $craFileExtension` == "cmd")
	{
		deleteUI craMayaFileBrowserReferenceFileToSceneMI;
		deleteUI craMayaFileBrowserImportFileToSceneMI;
		return;
	}
	
	deleteUI craMayaFileBrowserReferenceFileToSceneMI;
	deleteUI craMayaFileBrowserImportFileToSceneMI;
}

global proc int craMayaFileBrowserCheckPlayblastFile()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_playblastFile = basenameEx($cra_selectedFile[0]);
	string $cra_workspaceDir = `workspace -q -rd`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $craVideoFileExtension = ".mov";
		
	if(`about -win64` && `getApplicationVersionAsFloat` < 2013 )
	{
		if( file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".avi"))) 
			$craVideoFileExtension = ".avi";
	}
	else
	{
		if( !file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".mov"))) 
			$craVideoFileExtension = ".avi";
	}
	
	string $file = (`workspace -q -rd` + "playblast/" + $cra_playblastFile + $craVideoFileExtension);
	
	return file("-q", "-exists", $file);
}

global proc string craMayaFileBrowserGetPlayblastFile()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_playblastFile = basenameEx($cra_selectedFile[0]);
	string $cra_workspaceDir = `workspace -q -rd`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $craVideoFileExtension = ".mov";
		
	if(`about -win64` && `getApplicationVersionAsFloat` < 2013 )
	{
		if( file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".avi"))) 
			$craVideoFileExtension = ".avi";
	}
	else
	{
		if( !file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".mov"))) 
			$craVideoFileExtension = ".avi";
	}
	
	string $file = (`workspace -q -rd` + "playblast/" + $cra_playblastFile + $craVideoFileExtension);
	
	if(file("-q", "-exists", $file))
		return $file;
	else 
		return "";
}

global proc craMayaFileBrowserOpenPlayblastFile()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_playblastFile = basenameEx($cra_selectedFile[0]);
	string $cra_workspaceDir = `workspace -q -rd`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $craVideoFileExtension = ".mov";
	
	if(`about -win64` && `getApplicationVersionAsFloat` < 2013 )
	{
		if( file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".avi"))) 
			$craVideoFileExtension = ".avi";
	}
	else
	{
		if( !file("-q", "-exists",(`workspace -q -rd` + "playblast/" + $cra_playblastFile + ".mov"))) 
			$craVideoFileExtension = ".avi";
	}
	
	string $file = (`workspace -q -rd` + "playblast/" + $cra_playblastFile + $craVideoFileExtension);
	
	if( file("-q", "-exists", $file)) 
	{	
		if(`about -windows`)
			system ("start explorer " + `toNativePath $file`);
		if(`about -macOS`)
			system ("open " + `toNativePath $file`);
		if(`about -linux`)
			system ("xdg-open " + `toNativePath $file` + "&");
		
		print ($file + "\n");
	}
}

global proc craMayaFileBrowserOpenUiFile()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $cra_openFile = ( $cra_getPath + $cra_selectedFile[0] );
	string $craWindow = `loadUI -f $cra_openFile`;
	showWindow $craWindow;
	print ($craWindow + "\n");
}

global proc craMayaFileBrowserRunFilenameFunction()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $cra_openFile = ( $cra_getPath + $cra_selectedFile[0] );
	string $craModuleName = `basenameEx $cra_selectedFile[0]`;
	if($craModuleName != "")
	{
		string $cmd = "python(\"try:\\n    reload(" + $craModuleName + ")\\nexcept:\\n    import " + $craModuleName + " \\n" +$craModuleName + "." + $craModuleName + "()\")";
		eval($cmd);
		print ("\n" + $craModuleName + " imported/reloaded.\n");
	}
	else 
		error "No python file selected.\n";
}

global proc craMayaFileBrowserRunFilenameProcedure()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $cra_openFile = ( $cra_getPath + $cra_selectedFile[0] );
	string $craProcedureName = `basenameEx $cra_selectedFile[0]`;
	
	eval("source \"" + $cra_openFile + "\"");
	
	int $catch = catch(`eval($craProcedureName)`);
	
	if($catch)
		warning ("No prodecure with name " + $craProcedureName + " found or the procedure needs arguments!\n"); 
	else
		print ("\n" + $craProcedureName + " executed.\n");
}


global proc craMayaFileBrowserImportReloadPythonModule()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $cra_openFile = ( $cra_getPath + $cra_selectedFile[0] );
	string $craModuleName = `basenameEx $cra_selectedFile[0]`;
	if($craModuleName != "")
	{
		string $cmd = "python(\"import sys\\nif not '" + $cra_getPath + "' in sys.path:\\n    sys.path.append('" + $cra_getPath + "')\\ntry:\\n    reload(" + $craModuleName + ")\\nexcept:\\n    import " + $craModuleName + "\\n\")";
		eval($cmd);
		print ("\n" + $cra_openFile + " imported/reloaded.\n");
	}
	else 
		error "No python file selected.\n";
}

global proc craMayaFileBrowserOpenMediaFile()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $cra_openFile = ( $cra_getPath + $cra_selectedFile[0] );
	
	print (`toNativePath $cra_openFile` + "\n");
	
	if(`about -windows`)
		system ("start explorer \"" + `toNativePath $cra_openFile` + "\"");
	if(`about -macOS`)
		system ("open \"" + `toNativePath $cra_openFile` + "\"");
	if(`about -linux`)
		system ("xdg-open \"" + `toNativePath $cra_openFile` + "\"&");
}

global proc craMayaFileBrowserOpenSequence()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $cra_openFile = ( $cra_getPath + $cra_selectedFile[0] );
	
	if(`optionVar -exists craMayaFileBrowserOpenSequenceExternalViewerOV`)
	{
		if(`about -windows`)
			system ("start \"" + `optionVar -q craMayaFileBrowserOpenSequenceExternalViewerOV`  + "\" \"" + `toNativePath $cra_openFile` + "\"");
		if(`about -macOS`)
			system ("open \"" + `optionVar -q craMayaFileBrowserOpenSequenceExternalViewerOV`  + "\" \"" + `toNativePath $cra_openFile` + "\"");
		if(`about -linux`)
			system ("xdg-open \"" + `optionVar -q craMayaFileBrowserOpenSequenceExternalViewerOV`  + "\" \"" + `toNativePath $cra_openFile` + "\"&");
	}
	else 
		launchFcheckCmd ($cra_openFile,1);
	
}

global proc craMayaFileBrowserOpenTextFile()
{
	string $cra_selectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $cra_getPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $cra_openFile = ( $cra_getPath + $cra_selectedFile[0] );
	if(`about -windows`)
		system ("start notepad " + $cra_openFile);
	if(`about -macOS`)
		system ("open " + `toNativePath $cra_openFile`);
	if(`about -linux`)
		system ("xdg-open " + `toNativePath $cra_openFile` + "&");
}

global proc craMayaFileBrowserOpenSequenceOptions()
{
	 if (`window -exists craMayaFileBrowserOpenSequenceOptionsUI`)
	 	 deleteUI craMayaFileBrowserOpenSequenceOptionsUI;
	 
	 window -t " View sequence options" -tlb 1 -s 0 craMayaFileBrowserOpenSequenceOptionsUI;
	 frameLayout -mw 5 -mh 5 -lv 0;
		 columnLayout -adj 1;
		 rowLayout -nc 2 -adj 2;
			 text -l "Sequence viewer type: ";
			 int $viewerType;
			 
			 if(`optionVar -exists craMayaFileBrowserOpenSequenceExternalViewerOV`)
			 	 $viewerType = 2;
			 	 
			 radioButtonGrp -nrb 2 -l1 "Internal (fcheck)" -l2 "External" -sl $viewerType -onc "craMayaFileBrowserOpenSequenceSetExternalViewer" craMayaFileBrowserOpenSequenceExternalViewerRBG; 
		 setParent ..;
	 
		 rowLayout -nc 3 -adj 2 -en `optionVar -exists craMayaFileBrowserOpenSequenceExternalViewerOV` craMayaFileBrowserOpenSequenceViewerTypeRL;
		 text -l "External viewer path: ";
			 string $craViewerPath = "";
			 if(`optionVar -exists craMayaFileBrowserOpenSequenceExternalViewerOV`)
				 $craViewerPath = `optionVar -q craMayaFileBrowserOpenSequenceExternalViewerOV`;
			 else
			 	 if(`about -windows`)
					 $craViewerPath = "C:/Program Files/DJV/bin/djv_view.exe";
				 else if(`about -linux`)
					 $craViewerPath = "/usr/local/djv/bin/djv_view";
				 
			 
			 textField -w 400 -text $craViewerPath craMayaFileBrowserOpenSequenceViewerTypeTXT;
			 
			 iconTextButton -i "SP_DirOpenIcon" -c "craMayaFileBrowserOpenSequenceGetExternalViewer";
		 setParent ..;
		 
		 rowLayout -nc 2 -adj 1;
			 button -l "Save" -c "craMayaFileBrowserOpenSequenceSaveOptions" craMayaFileBrowserOpenSequenceSaveOptionsBTN;
			 button -w 200 -l "Close" -c " deleteUI craMayaFileBrowserOpenSequenceOptionsUI";
		 setParent ..;
	 setParent ..;
	 showWindow craMayaFileBrowserOpenSequenceOptionsUI;
	
}

global proc craMayaFileBrowserOpenSequenceSaveOptions()
{
	
	if(`radioButtonGrp -q -sl craMayaFileBrowserOpenSequenceExternalViewerRBG` == 1)
	{
		if(`optionVar -exists craMayaFileBrowserOpenSequenceExternalViewerOV`)
			optionVar -rm craMayaFileBrowserOpenSequenceExternalViewerOV;
		
		print "View sequence options saved. Using fcheck.\n";
	}
	else
	{
		optionVar -sv craMayaFileBrowserOpenSequenceExternalViewerOV `textField -q -text craMayaFileBrowserOpenSequenceViewerTypeTXT`;
		print "View sequence options saved. Using external application.\n";
	}
	
}

global proc craMayaFileBrowserOpenSequenceGetExternalViewer()
{
	
	string $craViewerExecutable[];
	
	if(`about -windows`)
		$craViewerExecutable = `fileDialog2 -caption "Select viewer executable" -okCaption "Set" -fileMode 1 -fileFilter "Windows executables (*.exe)(*.exe)" -sff "Windows executables (*.exe) (*.exe)" -dialogStyle 2`;
	else
		$craViewerExecutable = `fileDialog2 -caption "Select viewer executable" -okCaption "Set" -fileMode 1 -fileFilter "All files (*.*) (*.*)" -sff "All files (*.*) (*.*)" -dialogStyle 2`;
	
	if(size($craViewerExecutable))
		 textField -e -text $craViewerExecutable[0] craMayaFileBrowserOpenSequenceViewerTypeTXT;

}

global proc craMayaFileBrowserOpenSequenceSetExternalViewer()
{
	if(`radioButtonGrp -q -sl craMayaFileBrowserOpenSequenceExternalViewerRBG` == 1)
		rowLayout -e -en 0 craMayaFileBrowserOpenSequenceViewerTypeRL;
	else
		rowLayout -e -en 1 craMayaFileBrowserOpenSequenceViewerTypeRL;
}

global proc craMayaFileBrowserReferenceFileToScene()
{
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	if ( size($craselectedFile) )
	{	
		for($file in $craselectedFile)
		{
			string $crafileName = $file;
			string $cragetFileExtension[];
			tokenize $crafileName "." $cragetFileExtension;
			int $craSize = size($cragetFileExtension)-1;
			string $crafileExtension = $cragetFileExtension[$craSize];
			
			string $craMayaFileBrowserFileTypes[] = { "ma", "mb", "obj", "fbx"};
			for ( $craMayaFileBrowserFileType in $craMayaFileBrowserFileTypes )
			{
				if ( `tolower $crafileExtension` == $craMayaFileBrowserFileType)
				{
					string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
					string $crarefFile = ( $craGetCurrentPath + $file );
					if(`checkBox -q -v craMayaFileBrowserUseNamespaceCB`)
					{
						string $craRefNamespace = `textField -q -text craMayaFileBrowserNamespaceTXT`;
						if(size($craselectedFile)>1)
							file -f -namespace $cragetFileExtension[0] -r $crarefFile;
						else
							file -f -namespace $craRefNamespace -r $crarefFile;
						print ( $file + " has been referenced with namespace " + $craRefNamespace + ".\n" );
					}
					else
					{
						file -f -r $crarefFile;
						print ( $file + " has been referenced.\n" );
					}
					break;
				}
			}		
		}		
	}
	else
		warning ( "Please select a file to reference" );
}	

global proc craMayaFileBrowserImportFileToScene()
{
	string $craSelectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	int $craSizeFile = (size($craSelectedFile));
	if ( size($craSelectedFile) )
	{	
		for($file in $craSelectedFile)
		{
			string $crafileName = $file;
			string $cragetFileExtension[];
			tokenize $crafileName "." $cragetFileExtension;
			string $crafileExtension = $cragetFileExtension[size($cragetFileExtension)-1];
			string $craAssetFile = ( $craGetCurrentPath + $file );
			
			string $craImageFiles[] = {"jpg", "png", "exr", "tga", "iff", "tif", "psd","bmp", "map", "xpm", "hdr"};
			for ( $crai in $craImageFiles)
			{
				if( `tolower $crafileExtension` == $crai )
				{
					craMayaFileBrowserImportImage $craAssetFile;
					continue;
				}
			}			
			
			string $craMayaFileBrowserFileTypes[] = {"atom", "ai", "abc", "bin", "rpc", "sd",  "dae", "ma", "mb", "obj", "fbx", "3ds", "wav"};
			for ( $craMayaFileBrowserFileType in $craMayaFileBrowserFileTypes )
			{
				if ( `tolower $crafileExtension` == $craMayaFileBrowserFileType)
				{
					if( `tolower $crafileExtension` == "wav")
					{
						source updateSoundMenu;
						string $craAudioNode = `sound -name ($cragetFileExtension[0] + "_audio") -file $craAssetFile`;
						setSoundDisplay $craAudioNode 1;
						print ( $craAssetFile + " has been imported and set to timeline sound.\n" );
						return;
					}
					else if( `tolower $crafileExtension` == "obj")
					{
						if(!`pluginInfo -q -l "objExport"`)
							loadPlugin -quiet "objExport";
						if(`checkBox -q -v craMayaFileBrowserUseNamespaceCB`)
						{
							string $craRefNamespace = `textField -q -text craMayaFileBrowserNamespaceTXT`;
							catchQuiet(`file -f -namespace $cragetFileExtension[0] -i $craAssetFile`);
							print ( $craAssetFile + " has been imported.\n" );
						}
						else
						{
							catchQuiet(`file -f -i $craAssetFile`);
							print ( $craAssetFile + "  has been imported.\n" );
						}
						continue;
					}
					else if( `tolower $crafileExtension` == "abc")
					{
						if(`getApplicationVersionAsFloat` > 2011)
						{
							if(!`pluginInfo -q -l "AbcImport"`)
								loadPlugin -quiet "AbcImport";
							
							AbcImport $craAssetFile;
							print ( $craAssetFile + " has been imported.\n" );
						}
						else
							warning "Requires Maya 2012+\n";
						continue;
					}
					else if( `tolower $crafileExtension` == "fbx")
					{
						if(!`pluginInfo -q -l "fbxmaya"`)
							loadPlugin -quiet "fbxmaya";
						
						file -f -i $craAssetFile;
						print ( $craAssetFile + " has been imported.\n" );
						
						continue;
					}
					else if( `tolower $crafileExtension` == "dae")
					{
						if(!`pluginInfo -q -l "fbxmaya"`)
							loadPlugin -quiet "fbxmaya";
						
						FBXImport -f $craAssetFile -caller "FBXDAEMayaTranslator";
						print ( $craAssetFile + " has been importdded.\n" );
						
						continue;
					}
					else if( `tolower $crafileExtension` == "atom")
					{
						if(`getApplicationVersionAsFloat` > 2012)
						{
							if(!`pluginInfo -q -l "atomImportExport"`)
								loadPlugin -quiet "atomImportExport";
							
							performImportAnim 1;
							textFieldGrp -e -tx $craAssetFile importFileWidget;
						}
						else
							warning "Requires Maya 2013+\n";
						continue;
					}
					else if( `tolower $crafileExtension` == "bin")
					{
						if(!`pluginInfo -q -l "realflow"`)
							loadPlugin -quiet "realflow";
						if(!`pluginInfo -q -loaded "realflow"`)
							error "The RealFlow plug-in is not loaded.";
						file -i $craAssetFile;
						print ( $craAssetFile + " has been importdded.\n" );
						
						continue;
					}
					else if( `tolower $crafileExtension` == "rpc")
					{
						if(!`pluginInfo -q -l "rfrk4"`)
							loadPlugin -quiet "rfrk4";
						if(!`pluginInfo -q -loaded "rfrk4"`)
							error "The RFRK 2014 plug-in is not loaded.";
						rfrk4CreateNode "rfrk_particler4" $craAssetFile "";
						print ( $craAssetFile + " has been importdded.\n" );
						
						continue;
					}
					else
					{
						if(`checkBox -q -v craMayaFileBrowserUseNamespaceCB`)
						{
							string $craRefNamespace = `textField -q -text craMayaFileBrowserNamespaceTXT`;
							if( size($craSelectedFile) > 1 )
								file -f -namespace $cragetFileExtension[0] -i $craAssetFile;
							else
								file -f -namespace $craRefNamespace -i $craAssetFile;
							print ( $craAssetFile + " has been imported.\n" );
						}
						else
						{
							file -f -i $craAssetFile;
							print ( $craAssetFile + "  has been imported.\n" );
						}
						continue;
					}
				}
			}	
		}
	}
	else
		warning ( "Please select a file to import" );
}		

global proc craMayaFileBrowserDeleteSelectedFiles()
{
	if(`frameLayout -q -manage craMayaFileBrowserFileDeleteFilesFL`)
	{
		frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;
		frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFilePathsFL;
		if(`optionVar -q craMayaFileBrowserViewThumbsOV`)
		{
			frameLayout -e -manage 1 craMayaFileBrowserThumbnailsMainFL;
			textScrollList -e -manage 0 -vis 0 craMayaFileBrowserFileListTSL;
		}
		else
                        textScrollList -e -manage 1 -vis 1 craMayaFileBrowserFileListTSL;
	}
	else
	{
		string $files[] = `craMayaFileBrowserGetSelectedFiles`;
		if(!size($files) || $files[0] == "< .. >")
			error "No file(s) or empty directories selected.\n";
		
		textScrollList -e -manage 0 -vis 0 craMayaFileBrowserFileListTSL;
		frameLayout -e -manage 1 -vis 1 craMayaFileBrowserFileDeleteFilesFL;
		frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFilePathsFL;
		frameLayout -e -manage 0 craMayaFileBrowserThumbnailsMainFL;
		
		string $currentPath = `textField -q -tx craMayaFileBrowserFilePath`;
		string $message;
		frameLayout -e -l (" Delete " + size($files) + " selected file(s)?")  craMayaFileBrowserFileDeleteFilesFL;
		for($file in $files)
		{
			$file = substituteAllString($file, "<", "[");
			$file = substituteAllString($file, ">", "]");
			$message += $file + "\n";
		}
		
		scrollField -e -text $message craMayaFileBrowserFileDeleteFilesSF;
		setFocus craMayaFileBrowserDeleteConfirmSelectedFilesBTN;
	}
}

global proc craMayaFileBrowserDeleteConfirmSelectedFiles()
{
	string $fileDir = `craMayaFileBrowserGetInfoPath`;
	
	for($file in craMayaFileBrowserGetSelectedFiles())
	{
		
		string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
		$file = substituteAllString($file, "< ", "");
		$file = substituteAllString($file, " >", "");
		string $cramayaFile = ( $craGetCurrentPath + $file);
		
		if(`filetest -d $cramayaFile`)
		{
			if(!`sysFile -removeEmptyDir $cramayaFile`)
				warning ($cramayaFile + " folder is not empty!\n");
		}	
		else
		{
			if(!`sysFile -delete $cramayaFile`)
			{
				print ($cramayaFile + " cannot be deleted!\n");
				continue;
			}
			
			sysFile -delete ($fileDir + "/.craData/craNote/" + `basenameEx $cramayaFile`);
			
			if(filetest("-d", ($fileDir + "/.craData/craThumbnail/" + `basenameEx $cramayaFile` + "/")))
			{
				if(`about -win`)
					system("rmdir /s /q \"" + $fileDir + "/.craData/craThumbnail/" + `basenameEx $cramayaFile` + "/\"");
				else
					system("rm -r -f \"" + $fileDir + "/.craData/craThumbnail/" + `basenameEx $cramayaFile` + "\"");
			}
		}
	}

	
	if(`optionVar -q craMayaFileBrowserViewThumbsOV`)
	{
		frameLayout -e -manage 1 craMayaFileBrowserThumbnailsMainFL;
		textScrollList -e -manage 0 -vis 0 craMayaFileBrowserFileListTSL;
	}	
	else
                textScrollList -e -manage 1 -vis 1  craMayaFileBrowserFileListTSL;
	
	frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;
	frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFilePathsFL;
	craMayaFileBrowserClearFileInfo;
	craMayaFileBrowserLoadFileList;
	textScrollList -e -sii 1 craMayaFileBrowserFileListTSL;
	textScrollList -e -da craMayaFileBrowserFileListTSL;
	
	if(`iconTextButton -q -en craMayaFileBrowserClearFilterFieldBTN`)
		craMayaFileBrowserFileFilter 1;

        if(`dockControl -q -exists craMayaFileBrowserDock` && `optionVar -q craMayaFileBrowserViewThumbsOV`)
                craMayaFileBrowserListPath;	
	
        setFocus craMayaFileBrowserFileListTSL;
}
global proc craMayaFileBrowserShowThumbnail( string $crafile )
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	if(`filetest -f ($craGetCurrentPath + $crafile)`)
	{
		string $crafileDir = `craMayaFileBrowserGetInfoPath`;
		string $craThumbnails[] = getFileList("-folder",( $crafileDir + "/.craData/craThumbnail/" + `basenameEx $crafile` + "/"),"-filespec", (`basenameEx $crafile` + "*_T*" + ".png"));
		if(size($craThumbnails))
		{
			if(size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`))
				for($crathumb in `tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`)
					deleteUI $crathumb;
			for ($crai=0;$crai<size($craThumbnails);$crai++)
			{
				string $crathumbIndex = `substring $craThumbnails[$crai] (size($craThumbnails[$crai])-4) (size($craThumbnails[$crai])-4)`;
				string $craMayaFileBrowserThumb = ( $crafileDir + "/.craData/craThumbnail/" + `basenameEx $crafile` + "/" + $craThumbnails[$crai]);
				image -bgc 0 0 0 -w 480 -h 270 -p "craMayaFileBrowserSceneFileInfoImageTL" -image ($crafileDir+ "/.craData/craThumbnail/" + `basenameEx $crafile` + "/" + $craThumbnails[$crai]) ("craMayaFileBrowserThumbnail" + $crathumbIndex);
				string $crabuffer[];
				int $cranumTokens = `tokenize $craThumbnails[$crai] "_" $crabuffer`;
				tabLayout -e -tabLabel ("craMayaFileBrowserThumbnail" + $crathumbIndex)("  " + `substituteAllString $crabuffer[size($crabuffer)-1] ".png" ""` + "  ") craMayaFileBrowserSceneFileInfoImageTL;
			}
		} 
		else 
		{
			if(size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`))
				for($crathumb in `tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`)
					deleteUI $crathumb;
			
			iconTextButton -en 0 -i "SP_MessageBoxCritical.png" -ann "No thumbnails available" -p "craMayaFileBrowserSceneFileInfoImageTL" -w 480 -h 270 craMayaFileBrowserNoThumbnail;
			tabLayout -e -tabLabel "craMayaFileBrowserNoThumbnail" "No thumbnails available" craMayaFileBrowserSceneFileInfoImageTL;
			for($crat=0;$crat<10;$crat++)
			{
				iconTextButton -e -en 1 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
			}
		}
		
		for($crat=0;$crat<10;$crat++){
			iconTextButton -e -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
			if( file("-q", "-exists", ( $crafileDir + "/.craData/craThumbnail/" + basenameEx($crafile)  +"/" + basenameEx($crafile)  + "_T" + $crat + ".png")))
				iconTextButton -e -en 1 -bgc 0.4 .6 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
			else
				iconTextButton -e -en 1 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
		}	
			
		
		if( file("-q","-ex", (`workspace -q -rd`+ "playblast/" + `basenameEx $crafile` + ".avi")) 
		|| file("-q","-ex", (`workspace -q -rd`+ "playblast/" + `basenameEx $crafile` + ".mov")))
		{
			iconTextButton -e -en 1 -image "renderable.png" -bgc 0.4 .8 0.4 -l " View Playblast" -c "craMayaFileBrowserOpenPlayblastFile" craMayaFileBrowserSceneViewPlayblastBTN;
			iconTextButton -e -en 1 -bgc .6 .4 .4 craMayaFileBrowserSceneDeletePlayblastBTN;
		}
		else
		{
			iconTextButton -e -en 0 -image "renderable_dim.png" -bgc .4 .4 .4 -l "  No Playblast" -c "craCreateScenePlayblast" craMayaFileBrowserSceneViewPlayblastBTN;
			iconTextButton -e -en 0 -bgc .4 .4 .4 craMayaFileBrowserSceneDeletePlayblastBTN;
		}
		
		textField -e -ip 1 -ann `basenameEx $crafile` -text `basenameEx $crafile` craMayaFileBrowserNamespaceTXT;
	}
}

global proc craMayaFileBrowserShowImage()
{
	craMayaFileBrowserClearFileInfo;
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $crathumbnail = ( $craGetCurrentPath + $craselectedFile[0] );
	string $ext = `fileExtension $crathumbnail`;
	
	iconTextButton -e -en 1 craMayaFileBrowserImportFileToSceneBTN;
	iconTextButton -e -en 1 craCreateMaterialsFromSelectedFilesBTN;
	
	if(size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`))
		for($crathumb in `tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`)
			deleteUI $crathumb;

	for($crat=0;$crat<10;$crat++)
		iconTextButton -e -en 0 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
	
	string $mySel[] = `ls -sl`;
	
	// get image dimensions start
	string $craTextureFileNode = `createNode -n "tempFileNode" file`;
	catchQuiet(`setAttr ".fileTextureName" -type "string" $crathumbnail`);
	float $craImageSize[] = `getAttr ".outSize"`;
	delete $craTextureFileNode;
	// get image dimensions end
	
	select -r $mySel;
	
	if($craImageSize[0] == 0 || $craImageSize[1] == 0)
	{
		catchQuiet(`iconTextButton -bgc .15 0 0 -l ("Error reading image!") -p craMayaFileBrowserSceneFileInfoImageTL -style "textOnly" -ann $crathumbnail -image "invisibleCursor.png" -w 480 -h 270 craImageAsThumbnail`);
		tabLayout -e -tabLabel "craImageAsThumbnail" ($craselectedFile[0] + " - READ ERROR") craMayaFileBrowserSceneFileInfoImageTL;
		return;                                        
	}
	
	int $w = ($craImageSize[0] * 270) / $craImageSize[1];
	int $h = 270;
        
	// print ("width: " + $w + " height: " + $h + "\n");
	
	if($w >= 480)
	{
		$w = 480;
		$h = (($craImageSize[1] * 480) / $craImageSize[0]);
		rowLayout -p craMayaFileBrowserSceneFileInfoImageTL -w $w -h $h craImageAsThumbnail;
	}
	else
	{
		rowLayout -p craMayaFileBrowserSceneFileInfoImageTL -w $w -h $h -nc 2  craImageAsThumbnail;
		catchQuiet(`text -l "" -w ((480 - $w)/2) -h $h`);
	}
	
	if ( tolower($ext) == "exr" )
		catchQuiet(`iconTextButton -bgc 0 0 0 -l ("No preview for EXR files") -p craImageAsThumbnail -style "textOnly" -ann $crathumbnail -image "invisibleCursor.png" -w $w -h $h craImageAsThumbnail`);
	else
		catchQuiet(`iconTextButton -bgc 0 0 0 -p craImageAsThumbnail -ann $crathumbnail -image $crathumbnail -w $w -h $h craShowImageThumbnail`);

	setParent craMayaFileBrowserSceneFileInfoImageTL;
	tabLayout -e -tabLabel "craImageAsThumbnail" ($craselectedFile[0] + " - " + $craImageSize[0] + " x " + $craImageSize[1]) craMayaFileBrowserSceneFileInfoImageTL;
	
}	

global proc craMayaFileBrowserShowTextInNotes()
{
	craMayaFileBrowserClearFileInfo;
	scrollField -e -cl -ed 0 craMayaFileBrowserSceneDesc;
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	string $crasoMelFile = ( $craGetCurrentPath + $craselectedFile[0] );
	$crafileId=`fopen $crasoMelFile "r"`;
	
	string $nextLine = `fgetline $crafileId`;
	scrollField -e -it $nextLine craMayaFileBrowserSceneDesc;
	
	while ( size( $nextLine ) > 0 ) 
	{
	    $nextLine = `fgetline $crafileId`;
	    scrollField -e -it $nextLine craMayaFileBrowserSceneDesc;
	}
			
	fclose $crafileId;
	scrollField -e -ip 1 -it "" craMayaFileBrowserSceneDesc;
}

global proc craMayaFileBrowserSourceMel()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
	catch  ( eval ( " source " + ( "\"" + $craGetCurrentPath + $craselectedFile[0] + "\"" +";") ) );
	print ( $craGetCurrentPath + $craselectedFile[0] + " has been sourced.\n" );
}

global proc craMayaFileBrowserGetFromPath()
{
	if(`window -q -exists craMayaFileBrowserUI`)
	{
		string $craFilePath =`textField -q -tx craMayaFileBrowserFilePath`;
		textField -e -tx $craFilePath craMayaFileBrowserTo;
	}
	else
		warning ( "craMayaFileBrowser windoe is not active" );
}

global proc craMayaFileBrowserSettings()
{
	int $count = 1;
	
	if(`window -q -exists craMayaFileBrowserSettingsUI`) 
		deleteUI craMayaFileBrowserSettingsUI; 
	
	window -s 0 -tlb 1 -title "CharlieWales' File Browser - Set Project Folders" craMayaFileBrowserSettingsUI;
	frameLayout -lv 0 -mw 5 -mh 5 craMayaFileBrowseProjectFoldersFL;
	columnLayout -adj 1 craMayaFileBrowseProjectFoldersCL;
		craMayaFileBrowserGetProjectFolders;
	setParent ..;
	
	columnLayout -adj 1 ;
		rowLayout -nc 2 -adj 2;
			button -l "Save and Close" -w 280 -ann "Save and Close" -c "craMayaFileBrowserSaveAndCloseOptionUI";
			button -l "Close" -ann "Close" -c "deleteUI craMayaFileBrowserSettingsUI;";
		setParent ..;
	setParent ..;
		
	window -e -w 700 -h 75 craMayaFileBrowserSettingsUI;
	showWindow craMayaFileBrowserSettingsUI;
}

global proc craMayaFileBrowserSelectProjectPath( string $num ) 
{ 
	string $path[] =`fileDialog2 -caption "Set Main Projects Folder" -fileMode 3 -okCaption "Set"`;
	int $nextFolder = int($num) + 1;
	if( $path[0] != "" )
	{
		textField -e -ed 0 -tx (`fromNativePath $path[0]` + "/") -ann $path[0] ("craMayaFileBrowserProjectsFolderTF" + $num);
		if(!`textField -exists ("craMayaFileBrowserProjectsFolderTF" + string($nextFolder))`)
		{
			string $rowLayout = `rowLayout -p craMayaFileBrowseProjectFoldersCL -nc 4 -adj 2`;
				text -l ("  Projects Folder " + string($nextFolder) + ": ");
				textField -ed 1 -tx "NOT SET, SELECT A FOLDER" -w 400 ("craMayaFileBrowserProjectsFolderTF" + string($nextFolder));
				iconTextButton -i "fileOpen.png" -l " Browse Path  " -ann "Browse Path" -h 24 -w 24 -c ("craMayaFileBrowserSelectProjectPath " + string($nextFolder));
				iconTextButton -i "removeRenderable.png" -l " Remove Path  " -ann "Remove Path" -h 24 -w 24 -c ("textField -e -ed 1 -tx \"NOT SET, SELECT A FOLDER\" craMayaFileBrowserProjectsFolderTF" + string($nextFolder));
			setParent..;
		}
	}
} 

global proc craMayaFileBrowserSaveAndCloseOptionUI()
{
	int $sizeCL = size(`columnLayout -q -ca craMayaFileBrowseProjectFoldersCL`);
	
	if ( $sizeCL == 0 )
	{
		warning "Please define a folder";
	}
	else
	{
		optionVar -rm "craMayaFileBrowserProjectFoldersOV";
		int $count = 0;
		
		for( $i=1; $i <= $sizeCL ;$i++ )
		{
			string $craMayaFileBrowserMainProjectDir = `textField -q -tx ("craMayaFileBrowserProjectsFolderTF" + string($i))`;
			if( $craMayaFileBrowserMainProjectDir != "NOT SET, SELECT A FOLDER")
			{
				optionVar -sva "craMayaFileBrowserProjectFoldersOV" $craMayaFileBrowserMainProjectDir;
				$count++;
			}
		}
		if(!$count)
			optionVar -sva "craMayaFileBrowserProjectFoldersOV" "NOT SET, SELECT A FOLDER";
			
		if(`dockControl -q -exists craMayaFileBrowserDock`)
		{
			craMayaFileBrowserGetProjectList;
			craMayaFileBrowserSetActiveProject;
		}
		else
			craMayaFileBrowser;
		
		evalDeferred ("deleteUI craMayaFileBrowserSettingsUI");
	}
}

global proc craMayaFileBrowserGetProjectFolders()
{
	string $craMayaFileBrowserMainProjectDir[] = `optionVar -q craMayaFileBrowserProjectFoldersOV`;
	int $count = 1;
	
	if(size(`columnLayout -q -ca craMayaFileBrowseProjectFoldersCL`))
		for($i in `columnLayout -q -ca craMayaFileBrowseProjectFoldersCL`)
			deleteUI $i;
	
	for($i in `optionVar -q "craMayaFileBrowserProjectFoldersOV"`)
	{
		if($i != "NOT SET, SELECT A FOLDER")
		{
			string $rowLayout = `rowLayout -p craMayaFileBrowseProjectFoldersCL -nc 4 -adj 2`;
				text -l ("  Projects Folder " + string($count) + ": ");
				textField -ec ("craMayaFileBrowserProjectFolder " + string($count)) -ed 0 -tx $i -w 400 ("craMayaFileBrowserProjectsFolderTF" + string($count));     
				iconTextButton -i "fileOpen.png" -l " Browse Path  " -ann "Browse Path" -h 24 -w 24 -c ("craMayaFileBrowserSelectProjectPath " + string($count));
				iconTextButton -i "removeRenderable.png" -l " Remove Path  " -ann "Remove Path" -h 24 -w 24 -c ("textField -e -ed 1 -tx \"NOT SET, SELECT A FOLDER\" \"craMayaFileBrowserProjectsFolderTF" + string($count) + "\"");
			setParent..;
			$count++;
		}
	}
	
	string $rowLayout = `rowLayout -nc 4 -adj 2`;
		text -l ("  Projects Folder " + string($count) + ": ");
		textField -ec ("craMayaFileBrowserProjectFolder " + string($count)) -ed 1 -tx "NOT SET, SELECT A FOLDER" -w 400 ("craMayaFileBrowserProjectsFolderTF" + string($count));
		iconTextButton -i "fileOpen.png" -l " Browse Path  " -ann "Browse Path" -h 24 -w 24 -c ("craMayaFileBrowserSelectProjectPath " + string($count));
		iconTextButton -i "removeRenderable.png" -l " Remove Path  " -ann "Remove Path" -h 24 -w 24 -c ("textField -e -ed 1 -tx \"NOT SET, SELECT A FOLDER\" \"craMayaFileBrowserProjectsFolderTF" + string($count) + "\";");
	setParent..;
}

global proc craMayaFileBrowserProjectFolder( int $count )
{
        string $folder = fromNativePath(`textField -q -text ("craMayaFileBrowserProjectsFolderTF" + string($count))`);
        if(!`endsWith $folder "/"`)
                $folder += "/";
        textField -e -ed 0 -text $folder ("craMayaFileBrowserProjectsFolderTF" + string($count));
}


global proc craMayaFileBrowserDeleteNote()
{
		string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
		string $craselectedFile[]= `craMayaFileBrowserGetSelectedFiles`;
		string $crafile = $craselectedFile[0];
		
		string $crafileDir = `craMayaFileBrowserGetInfoPath`;
		
		string $crafinalPath = ( $crafileDir + "/.craData/craNote/");
		string $crafileNameWithPath = ( $crafinalPath + `basenameEx $craselectedFile[0]` );
		
		if ( `file -q -ex $crafileNameWithPath` )
			sysFile -delete $crafileNameWithPath;
		
		scrollField -e -clear craMayaFileBrowserSceneDesc;
		print ( "Note for " + $crafile + " has been deleted.\n" );
}

global proc craMayaFileBrowserWriteFileInfo()
{	
	string $cragetUser = `getenv userName`;
	string $cragetDate = `system("date /t")`; 
	string $cragetTime = `system("time /t")`;
	string $craline = "_______________________________________________________________";
	scrollField -e -it ( "\n" + $craline + "\n" + "USUARIO: " + $cragetUser + "\t    " + "FECHA: " + strip($cragetDate) + "        HORA: " + strip($cragetTime) ) craMayaFileBrowserSceneDesc;
}

global proc craMayaFileBrowserDeleteThumbnail(int $cranum)
{
	string $craData = "/.craData";
	string $craThumbnail = "craThumbnail";
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $craSelectedFile[] = `craMayaFileBrowserGetSelectedFiles`;
	string $crafileName = basenameEx($craSelectedFile[0]);
	string $crafile = ($craGetCurrentPath + $crafileName);
	string $crafileDir = `craMayaFileBrowserGetInfoPath`;
	
	string $craselectedFile = basenameEx($craSelectedFile[0]);
	string $crafinalPath = ( $crafileDir + "/" + $craData + "/" + $craThumbnail + "/" + $craselectedFile + "/");
	
	string $crafileNameWithPath = ( $crafinalPath + $craselectedFile + "_T" + $cranum + ".png");
	if ( `file -q -ex $crafileNameWithPath` )
	{
		sysFile -delete $crafileNameWithPath;
		iconTextButton -e -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($cranum));
		if(`dockControl -q -exists craSceneFileInfoDC` && `textField -q  -text craSceneFileNamePathTF` == `textField -q  -text craMayaFileBrowserSceneFileNamePathTF`)
		{
		    deleteUI ("craThumbnail" + string($cranum));
		    button -e -bgc 0.4 .4 0.4 ("craThumbnailBTN" + string($cranum));
		}
		if(`image -exists ("craMayaFileBrowserThumbnail" + string($cranum))`)
			deleteUI ("craMayaFileBrowserThumbnail" + string($cranum));
		if(!size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`)){
			symbolButton -w 480 -h 270 -en 0 -p "craMayaFileBrowserSceneFileInfoImageTL" -image "invisibleCursor.png" craMayaFileBrowserNoThumbnail;
			tabLayout -e -tabLabel "craMayaFileBrowserNoThumbnail" "No thumbnails available" craMayaFileBrowserSceneFileInfoImageTL;
			if(`dockControl -q -exists craSceneFileInfoDC`)
			{
			    symbolButton -w 480 -h 270 -en 0 -p "craSceneFileInfoImageTL" -image "invisibleCursor.png" craNoThumbnail;
			    tabLayout -e -tabLabel "craNoThumbnail" "No Thumbnails Available" craSceneFileInfoImageTL;
			}
		}
		if(`dockControl -q -exists craMayaFileBrowserDock` && `optionVar -q craMayaFileBrowserViewThumbsOV`)
                        craMayaFileBrowserListPath;
	}
}

global proc craMayaFileBrowserUpdateUI()
{
	craMayaFileBrowserGetProjectList;
	craMayaFileBrowserSetActiveProject;
	craMayaFileBrowserLoadFileList;
	craMayaFileBrowserSelectOpenedScene;
}

global proc craMayaFileBrowserShowFilePaths()
{
	string $paths;
	string $files[] = `craMayaFileBrowserGetSelectedFiles`;
	string $currentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	
	if(!`endsWith $currentPath "/"` && !`endsWith $currentPath "\\"`)
		$currentPath += "/";
	
	$currentPath = `fromNativePath $currentPath`;
	
	frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;
	textScrollList -e -manage 0 -vis 0  craMayaFileBrowserFileListTSL;
	frameLayout -e -manage 1 -vis 1 -l (" " + size($files) + " selected file(s) path(s)") craMayaFileBrowserFilePathsFL;
	
	for($file in $files)
	{
		if ( `startsWith $file "< "` && `endsWith $file " >"` )
		{
			$file = substituteAllString($file, "< ", "");
			$file = substituteAllString($file, " >", "");
			$paths += "\"" + $currentPath + $file + "/\"\n";
		}
		else
			$paths += "\"" + $currentPath + $file + "\"\n";
		
	}
	
	scrollField -e -text $paths craMayaFileBrowserFilePathsSF;
	setFocus craMayaFileBrowserFilePathsBTN;
}

global proc craMayaFileBrowserPathChanged()
{
	craMayaFileBrowserClearFileInfo;
	craMayaFileBrowserLoadFileList;
	iconTextButton -e -en 0 craCreateMaterialsFromSelectedFilesBTN;
	craMayaFileBrowserAppendRecentFolder;
}

global proc craMayaFileBrowserNewFolder()
{
	if(`frameLayout -q -vis craNewFolderFL`)
		frameLayout -e -vis 0 craNewFolderFL;
	else
	{
		frameLayout -e -vis 1 craNewFolderFL;
		setFocus craMayaFileBrowserCreateNewFolderNameTXT;
	}
}

global proc craMayaFileBrowserCreateNewFolder()
{
	
	string $currentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $folderName = `textField -q -text craMayaFileBrowserCreateNewFolderNameTXT`;
	
	if(!`endsWith $currentPath "/"` && !`endsWith $currentPath "\\"`)
		$currentPath += "/";
	
	$currentPath = `fromNativePath $currentPath`;
	
	if($folderName != "")
	{
		sysFile -md ($currentPath + $folderName);
		print ($currentPath + $folderName + " folder created.\n");
		craMayaFileBrowserListPath;
		textScrollList -e -da craMayaFileBrowserFileListTSL;
		textScrollList -e -si ("< " + $folderName + " >") craMayaFileBrowserFileListTSL;
	}
	
	textField -e -text "" craMayaFileBrowserCreateNewFolderNameTXT;
}

global proc craMayaFileBrowserDeleteScenePlayblast()
{
	string $files[] = `craMayaFileBrowserGetSelectedFiles`;
	string $currentPath = `textField -q -tx craMayaFileBrowserFilePath`;	
	string $filePath = $currentPath + $files[0];	
	string $craFilenameNoExtension = basenameEx($files[0]);
	
	string $craPlayblastFiles = `workspace -q -rd` + "playblast/" + $craFilenameNoExtension;
	
	if( file("-q", "-exists", ($craPlayblastFiles + ".mov")) || file("-q", "-exists", ($craPlayblastFiles + ".avi")) )
	{
		if(`confirmDialog -title "Delete Playblast" -defaultButton "OK" -message "         Are you sure?" -cancelButton "Cancel" -dismissString "Cancel" -button "OK" -button "Cancel"` == "OK")
		{
			if( file("-q", "-exists", ($craPlayblastFiles + ".mov")) )
			{
				sysFile -delete ($craPlayblastFiles + ".mov");
				print ($craPlayblastFiles + ".mov" + " deleted.");
			}
			if( file("-q", "-exists", ($craPlayblastFiles + ".avi")) )
			{
				sysFile -delete ($craPlayblastFiles + ".avi");
				print ($craPlayblastFiles + ".avi" + " deleted.");
			}
			
			
		}
	} else
		error "No scene playblast.";
		
	craRefreshSceneInfo;
	craRefreshPlaybastItems;
	craSceneUtilsInitMenuItems;
}

global proc craMayaFileBrowserManageFavorites()
{
	frameLayout -e -manage 1 craMayaFileBrowserManageFavoritesMainFL;
	textScrollList -e -manage 0 -vis 0 craMayaFileBrowserFileListTSL;
	frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;
	frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFilePathsFL;
	frameLayout -e -manage 0 craMayaFileBrowserThumbnailsMainFL;
	
	textScrollList -e -ra craMayaFileBrowserManageFavoritesTSL;
	string $favorites[];
	if(`optionVar -exists "craMayaFileBrowserFavoritesOV"`)
		$favorites = sort(`optionVar -q "craMayaFileBrowserFavoritesOV"`);
	
	if(size($favorites))
		for($favorite in $favorites)
			textScrollList -e -a $favorite craMayaFileBrowserManageFavoritesTSL;
}

global proc craMayaFileBrowserSaveFavorites(  int $mode )
{
	string $favorites[] = `textScrollList -q -ai craMayaFileBrowserManageFavoritesTSL`;
	
	if($mode)
	{
                optionVar -rm "craMayaFileBrowserFavoritesOV";
                for( $favorite in $favorites )
                        optionVar -sva "craMayaFileBrowserFavoritesOV" $favorite;
        }
        
	frameLayout -e -manage 0 craMayaFileBrowserManageFavoritesMainFL;
	frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFileDeleteFilesFL;
	frameLayout -e -manage 0 -vis 0 craMayaFileBrowserFilePathsFL;
	if(`optionVar -q craMayaFileBrowserViewThumbsOV`)

        {

                frameLayout -e -manage 1 craMayaFileBrowserThumbnailsMainFL;

                textScrollList -e -manage 0 -vis 0 craMayaFileBrowserFileListTSL;

        }

        else

                textScrollList -e -manage 1 -vis 1 craMayaFileBrowserFileListTSL;
	
	print ( "Favorites have been saved." );
}

global proc craMayaFileBrowserAddFavorite()
{
	string $craFavoritePath = `textField -q -tx craMayaFileBrowserFilePath`;
	optionVar -sva "craMayaFileBrowserFavoritesOV" $craFavoritePath;
	print ( "Favorite has been added.\n" );
}
global proc craMayaFileBrowserLoadFavorite( string $path )
{
	textField -e -tx `fromNativePath $path` craMayaFileBrowserFilePath;
	craMayaFileBrowserPathChanged;	
	for($crat=0;$crat<10;$crat++)
		iconTextButton -e -en 0 -bgc 0.4 .4 0.4 ("craMayaFileBrowserThumbnailBTN" + string($crat));
	if(`iconTextButton -q -en craMayaFileBrowserClearFilterFieldBTN`)
		craMayaFileBrowserFileFilter 1;
	craMayaFileBrowserViewThumbnailsUpdate;	
}

global proc craMayaFileBrowserFavorites()
{
	popupMenu -e -dai craMayaFileBrowserFavoritesPUM;
	popupMenu -e -dai craMayaFileBrowserFilePathFavoritesPUM;
	
	menuItem -p "craMayaFileBrowserFavoritesPUM" -l "- Add Favorite -" -c "craMayaFileBrowserAddFavorite";
	menuItem -p "craMayaFileBrowserFavoritesPUM" -d 1;
	
	if(size(`optionVar -q "craMayaFileBrowserFavoritesOV"`)){
		string $favorites[] = sort(`optionVar -q "craMayaFileBrowserFavoritesOV"`);
		for( $favorite in $favorites ){
			if($favorite != "")
			{
			$favorite = `fromNativePath $favorite`;
			menuItem -p "craMayaFileBrowserFavoritesPUM" -l $favorite -c ("craMayaFileBrowserLoadFavorite \"" + $favorite + "\"");
			menuItem -p "craMayaFileBrowserFilePathFavoritesPUM" -l $favorite -c ("craMayaFileBrowserLoadFavorite \"" + $favorite + "\"");
			}
		}
	}
	else
		menuItem -en 0 -p "craMayaFileBrowserFilePathFavoritesPUM" -l "No favorites";
			
	menuItem -p "craMayaFileBrowserFavoritesPUM" -d 1;
	menuItem-p "craMayaFileBrowserFavoritesPUM"  -l "- Manage Favorites -" -c "craMayaFileBrowserManageFavorites";
}

global proc craMayaFileBrowserSelectOpenedScene()
{
	string $craFilePath = `file -q -loc`;
	if( dirname($craFilePath) != "")
	{
		textField -e -tx (dirname($craFilePath) + "/") craMayaFileBrowserFilePath;
		craMayaFileBrowserListPath;
		catchQuiet(textScrollList("-e", "-da", "craMayaFileBrowserFileListTSL"));
		catchQuiet(textScrollList("-e", "-si", `file -q -sn -shn`, "craMayaFileBrowserFileListTSL"));
		craMayaFileBrowserDetectFileType;
	}
}

global proc craMayaFileBrowserUpdateRecentProjects()
{
	string $craRecentProjects[];
	if(`optionVar -exists "RecentProjectsList"`)
		$craRecentProjects = `optionVar -query "RecentProjectsList"`;
	popupMenu -e -dai "craMayaFileBrowserRecentProjectsPUM";
	if(size($craRecentProjects))
	{
		menuItem -p "craMayaFileBrowserRecentProjectsPUM" -en 0 -l "Recent Projects";
		menuItem -p "craMayaFileBrowserRecentProjectsPUM" -d 1;
		for($i=size($craRecentProjects)-1; $i>=0; $i--)
		{
			menuItem -p "craMayaFileBrowserRecentProjectsPUM" -l $craRecentProjects[$i] -c ("setProject \"" + $craRecentProjects[$i] + "\";evalDeferred (\"craMayaFileBrowserSetActiveProject;\");");
			menuItem -p "craMayaFileBrowserRecentProjectsPUM" -d 1;
		}
		menuItem -p "craMayaFileBrowserRecentProjectsPUM" -d 1;
		menuItem -p "craMayaFileBrowserRecentProjectsPUM" -en 1 -l "Set Project" -c "setProject \"\";evalDeferred (\"craMayaFileBrowserSetActiveProject;\")";
		
	}
	else
	{
		menuItem -p "craMayaFileBrowserRecentProjectsPUM" -en 0 -l "No Recent Projects";
	}
	
}

global proc craMayaFileBrowserFileFilter( int $forceFilter )
{
	global string $craMayaFileBrowserLastFilterString;
	global string $craMayaFileBrowserFileListBuffer[];
	string $craMayaFileBrowserFilterString = `textField -q -text craMayaFileBrowserFileListFilterTXT`;
	$craMayaFileBrowserFilterString = ("*" + tolower($craMayaFileBrowserFilterString) + "*");
	
	if( $craMayaFileBrowserLastFilterString != $craMayaFileBrowserFilterString || $forceFilter )
	{
		iconTextButton -e -en 1 craMayaFileBrowserClearFilterFieldBTN;
		string $currentItems[] = $craMayaFileBrowserFileListBuffer;
		textScrollList -e -ra craMayaFileBrowserFileListTSL;
		textScrollList -e -a "< .. >" craMayaFileBrowserFileListTSL;
		for($item in $currentItems)
		{
			$searchItem = tolower($item);
			if( `gmatch $searchItem $craMayaFileBrowserFilterString`)
				textScrollList -e -a $item craMayaFileBrowserFileListTSL;
		}
		
		$craMayaFileBrowserLastFilterString = `tolower $craMayaFileBrowserFilterString`;
		
		if (`textField -q -text craMayaFileBrowserFileListFilterTXT` != "")
		{
			string $craMayaFileBrowserListItems[] = `textScrollList -q -ai craMayaFileBrowserFileListTSL`;
			checkBox -e -bgc .2 1 .2 craMayaFileBrowserFileFilterCB;
			if(size($craMayaFileBrowserListItems) > 1 )
			{
                                for($item in `textScrollList -q -ai craMayaFileBrowserFileListTSL`)
                                        textScrollList -e -si $item craMayaFileBrowserFileListTSL;
                                textScrollList -e -di "< .. >" craMayaFileBrowserFileListTSL;
			}
			else
			{
				
				textScrollList -e -a " No matches found!" craMayaFileBrowserFileListTSL;
				textScrollList -e -si " No matches found!" craMayaFileBrowserFileListTSL;
			}
		}
		else
		{
			iconTextButton -e -en 0 craMayaFileBrowserClearFilterFieldBTN;
			checkBox -e -bgc .4 .4 .4 craMayaFileBrowserFileFilterCB;
			textScrollList -e -si "< .. >" craMayaFileBrowserFileListTSL;
			textScrollList -e -di "< .. >" craMayaFileBrowserFileListTSL;
		}
		
		craMayaFileBrowserViewThumbnailsUpdate;
	}
}

global proc craMayaFileBrowserUpdateProjectFolders()
{
	popupMenu -e -dai craMayaFileBrowserUpdateProjectFoldersPUM;
	
	if(`workspace -q -fre "images"` != "")
		menuItem -p "craMayaFileBrowserUpdateProjectFoldersPUM" -l "images" -c "craMayaFileBrowserListFolder images";
	
	if(filetest("-d", `workspace -q -rd` + "playblast")) 
		menuItem -p "craMayaFileBrowserUpdateProjectFoldersPUM" -l "playblasts" -c "craMayaFileBrowserListFolder playblast";
	
	if(`workspace -q -fre "sourceImages"` != "")
		menuItem -p "craMayaFileBrowserUpdateProjectFoldersPUM" -l "sourceimages" -c "craMayaFileBrowserListFolder sourceimages";
	
	menuItem -p "craMayaFileBrowserUpdateProjectFoldersPUM" -d 1;
	menuItem -en 0 -l "MORE" -p "craMayaFileBrowserUpdateProjectFoldersPUM";
	menuItem -p "craMayaFileBrowserUpdateProjectFoldersPUM" -d 1;
	
	string $fileEntryRules[] = {"3dPaintTextures", "Alembic", "atomExport", "atomImport", "audio", "Autodesk", "autoSave", "clips", "depth", "diskCache", "File", "fileCache", "fluidCache", "furAttrMap", "furEqualMap", "furFiles", "furImages", "furShadowMap", "illustrator", "iprImages", "mayaAscii", "mayaBinary", "mel", "movie", "OBJexport", "offlineEdit", "Packet", "particles", "playblasts", "renderData", "scripts", "shaders", "sound", "templates"};
	
	for ($fre in $fileEntryRules)
	{
		if(`workspace -q -fre $fre` != "")
			menuItem -p "craMayaFileBrowserUpdateProjectFoldersPUM" -l $fre -c ("craMayaFileBrowserListFolder  \"" + `workspace -q -fre $fre` + "\"");
	}
}

global proc craMayaFileBrowserRenderSceneThumbnail(int $number, int $mode)
{
	string $craData = "/.craData";
	string $craThumbnail = "craThumbnail";
	string $fileDir = `craMayaFileBrowserGetInfoPath`;
	string $fileNames[] = craMayaFileBrowserGetSelectedFiles();
	string $fileName = `basenameEx $fileNames[0]`;
	int $closeRenderView = 1;
	if(`window -ex renderViewWindow`)
	        $closeRenderView = 0; 
	
	if(`filetest -d ($fileDir + "/.craData")`) {
		sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
		if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
	} else {
		sysFile -md ($fileDir + "/.craData");
		sysFile -md ($fileDir + "/.craData/craThumbnail/" + $fileName);
		if(`about -win`)
			system( "attrib +H \"" + $fileDir + "/.craData\"" );
	}
	string $finalPath = ( $fileDir + "/" + $craData + "/" + $craThumbnail + "/" + $fileName +"/" );
	
        int $useVfb;
        int $prevWidth = `getAttr defaultResolution.width`;
        int $prevHeight = `getAttr defaultResolution.height`;
        int $prevFormat = `getAttr defaultRenderGlobals.outf`;
        float $prevDevAspectRatio = `getAttr "defaultResolution.deviceAspectRatio"`;
        float $prevPixelAspect = `getAttr "defaultResolution.pixelAspect"`;
        string $currentRenderer = `currentRenderer`;
        
        if ($currentRenderer == "vray")
	{
                if(`objExists vraySettings`)
                {
                        craSetRenderRes 480 270;
                        $useVfb = `getAttr "vraySettings.vfbOn"`;
                        setAttr "vraySettings.vfbOn" 0;
	        }
	}
	
	string $shortName[];
	string $sceneName = $fileName;
	string $sceneThumbsDir = ( $fileDir + "/.craData/craThumbnail/");
	
	setAttr "defaultResolution.width" 480;
	setAttr "defaultResolution.height" 270;	
	setAttr "defaultResolution.deviceAspectRatio" 1.777;
	setAttr "defaultResolution.pixelAspect" 1;
	
	setAttr defaultRenderGlobals.outf 32;
	setAttr defaultRenderGlobals.imfkey -type "string" "";
	
	setAttr defaultRenderGlobals.outf 32;
	setAttr defaultRenderGlobals.imfkey -type "string" "";
	if($mode)
		RenderIntoNewWindow;
	
	renderWindowSaveImageCallback "renderView" ($finalPath + $sceneName + "_T" + $number )"PNG";
	
	setAttr defaultRenderGlobals.outf $prevFormat;
	setAttr defaultRenderGlobals.imfkey -type "string" "";
	setAttr defaultResolution.deviceAspectRatio $prevDevAspectRatio;
	setAttr defaultResolution.pixelAspect $prevPixelAspect;	
	
	setAttr "defaultResolution.width" $prevWidth;
	setAttr "defaultResolution.height" $prevHeight;
	
	if ($currentRenderer == "vray")
	{
	        craSetRenderRes $prevWidth $prevWidth;
                setAttr "vraySettings.vfbOn" $useVfb;
	}
	
	if($closeRenderView){
		if (`window -exists renderViewWindow`)
			evalDeferred "deleteUI renderViewWindow";
	}
	
	if(`dockControl -q -exists craSceneFileInfoDC`)
	{
	        if(`control -exists craNoThumbnail`)	
	                deleteUI craNoThumbnail;
	        
	        if(`image -exists ("craThumbnail" + $number)`)
	                deleteUI ("craThumbnail" + $number);
	        
	        image -bgc 0 0 0 -w 480 -h 270 -p "craSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craThumbnail" + $number);
	        
	        
	        int $thumbNum = size(`tabLayout -q -ca craSceneFileInfoImageTL`);
	        int $tabNum = 0;
	        for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
	        {
	                if(`image -exists ("craThumbnail" + $CurrentThumbnails)`)
	                        $tabNum++;
	        }
	        
	        tabLayout -e -moveTab $thumbNum $tabNum craSceneFileInfoImageTL;
	        
	        tabLayout -e -tabLabel ("craThumbnail" + $number) ("  T" + $number + "  ") -st ("craThumbnail" + $number) craSceneFileInfoImageTL;
	        iconTextButton -style "textOnly" -e -en 1 -bgc 0.4 .6 0.4 ("craThumbnailBTN" + string($number));
		
	        tabLayout -e -st ("craThumbnail" + string($number)) craSceneFileInfoImageTL;
	}
	
	if(`dockControl -q -exists craMayaFileBrowserDock`)
	{
	        if(`control -exists craMayaFileBrowserNoThumbnail`)	
	                deleteUI craMayaFileBrowserNoThumbnail;
	        
	        if(`image -exists ("craMayaFileBrowserThumbnail" + $number)`)
	                deleteUI ("craMayaFileBrowserThumbnail" + $number);
	        
	        image -bgc 0 0 0 -w 480 -h 270 -p "craMayaFileBrowserSceneFileInfoImageTL" -image ($finalPath + $fileName + "_T" + $number + ".png") ("craMayaFileBrowserThumbnail" + $number);
	        
	        
	        int $thumbNum = size(`tabLayout -q -ca craMayaFileBrowserSceneFileInfoImageTL`);
	        int $tabNum = 0;
	        for($CurrentThumbnails=0; $CurrentThumbnails <= $number; $CurrentThumbnails++)
	        {
	                if(`image -exists ("craMayaFileBrowserThumbnail" + $CurrentThumbnails)`)
	                        $tabNum++;
	        }
	        
	        tabLayout -e -moveTab $thumbNum $tabNum craMayaFileBrowserSceneFileInfoImageTL;
	        
	        tabLayout -e -tabLabel ("craMayaFileBrowserThumbnail" + $number) ("  T" + $number + "  ") -st ("craMayaFileBrowserThumbnail" + $number) craMayaFileBrowserSceneFileInfoImageTL;
	        iconTextButton -e -en 1 -bgc 0.4 .6 0.4 ("craMayaFileBrowserThumbnailBTN" + string($number));
	        craMayaFileBrowserViewThumbnailsUpdate;
	}
}

global proc string craMayaFileBrowserGetInfoPath()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	
	if(`optionVar -q craSceneInfoOptionsOV` == 1)
		return $craGetCurrentPath;
	else if(`optionVar -q craSceneInfoOptionsOV` == 2)
		return `optionVar -q craSceneToolsCustomInfoPathOV`;
	else	
	        return (`workspace -q -rd` + "data/");
}

global proc string[] craMayaFileBrowserGetSelectedFiles()
{
	return `textScrollList -q -si craMayaFileBrowserFileListTSL`;
}

global proc string[] craMayaFileBrowserGetSelectedFilesPath()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $craFilesPath[];
	for ( $i in `textScrollList -q -si craMayaFileBrowserFileListTSL`)
		$craFilesPath[size($craFilesPath)] = $craGetCurrentPath + $i;
	
	return $craFilesPath;
}

global proc craMayaFileBrowserSetSystemFolders()
{
	if(`about -win`)
	{
		popupMenu -p craMayaFileBrowserListDesktop -b 1 -mm 0 craDriveLinks ;
			menuItem -l "Desktop" -ann "Go to Desktop" -c "craMayaFileBrowserListSystemFolder \"Desktop\"" craMayaFileBrowserListDesktop;
			menuItem -l "My Documents" -ann "Go to My Documents" -c "craMayaFileBrowserListSystemFolder \"Documents\"" craMayaFileBrowserListMyDocs;
			menuItem -l "Temp" -ann "Go to Temp folder" -c "craMayaFileBrowserListSystemFolder \"Temp\"" craMayaFileBrowserListMyTemp;
			menuItem -d 1;
			menuItem -l "Maya Application" -ann "Go to Temp folder" -c "textField -e -tx `internalVar -uad` craMayaFileBrowserFilePath;craMayaFileBrowserListPath;";
			menuItem -l "Maya User Script " -ann "Go to Temp folder" -c "textField -e -tx `internalVar -usd` craMayaFileBrowserFilePath;craMayaFileBrowserListPath;";
			menuItem -d 1;
			menuItem -l "Scene Info Data" -ann "Go to Scene Info folder" -c "textField -e -tx (`craSceneToolsGetInfoPath` + \".craData/\") craMayaFileBrowserFilePath;craMayaFileBrowserListPath;";

			menuItem -d 1;

			menuItem -l "System Drives" -en 0;
			menuItem -d 1;
			python("import maya.cmds as cmds\nimport string\nfrom ctypes import windll\n\ndef get_drives():\n    drives = []\n    bitmask = windll.kernel32.GetLogicalDrives()\n    for letter in string.uppercase:\n        if bitmask & 1:\n            drives.append(letter)\n        bitmask >>= 1\n\n    return drives\nfor i in get_drives():\n    cmds.menuItem(l='Drive ' + i + ':/', p='craDriveLinks', c='import maya.mel as mel;mel.eval(\"craMayaFileBrowserListDrive %s\")' % i);cmds.menuItem(d=True)")
		setParent -m ..;
	}
	else if(`about -linux`)
	{
		popupMenu -p craMayaFileBrowserListDesktop -b 1 -mm 0 craDriveLinks ;
			menuItem -l "User HOME" -ann "User HOME" -c "craMayaFileBrowserListSystemFolder \"Home\"";
			menuItem -d 1;
			menuItem -l "Desktop" -ann "Go to Desktop" -c "craMayaFileBrowserListSystemFolder \"Desktop\"" ;
			menuItem -l "Documents" -ann "Go to My Documents" -c "craMayaFileBrowserListSystemFolder \"Documents\"";
			menuItem -l "Media" -ann "Go to media folder" -c "craMayaFileBrowserListSystemFolder \"Media\"";
			menuItem -l "Temp" -ann "Go to Temp folder" -c "craMayaFileBrowserListSystemFolder \"Temp\"";
			menuItem -d 1;
			menuItem -l "Maya Application" -ann "Go to Temp folder" -c "textField -e -tx `internalVar -uad` craMayaFileBrowserFilePath;craMayaFileBrowserListPath;";
			menuItem -l "Maya User Script " -ann "Go to Temp folder" -c "textField -e -tx `internalVar -usd` craMayaFileBrowserFilePath;craMayaFileBrowserListPath;";
		setParent -m ..;
	}
	else if(`about -macOS`)
	{
		popupMenu -p craMayaFileBrowserListDesktop -b 1 -mm 0 craDriveLinks ;
			menuItem -l "User HOME" -ann "User HOME" -c "craMayaFileBrowserListSystemFolder \"Home\"";

			menuItem -d 1;

			menuItem -l "Desktop" -ann "Go to Desktop" -c "craMayaFileBrowserListSystemFolder \"Desktop\"" ;

			menuItem -l "Temp" -ann "Go to Temp folder" -c "craMayaFileBrowserListSystemFolder \"Temp\"";

			menuItem -d 1;

			menuItem -l "Maya Application" -ann "Go to Temp folder" -c "textField -e -tx `internalVar -uad` craMayaFileBrowserFilePath;craMayaFileBrowserListPath;";

			menuItem -l "Maya User Script " -ann "Go to Temp folder" -c "textField -e -tx `internalVar -usd` craMayaFileBrowserFilePath;craMayaFileBrowserListPath;";

		setParent -m ..;

	}					

}

global proc craMayaFileBrowserImportImage(string $image)
{
	string $craTextureFileNode;
	string $craFileNodeName = basenameEx($image);
	if(fileExtension(`tolower $image`) == "psd")
		 $craTextureFileNode = `shadingNode -n ($craFileNodeName + "_psdFile") -asTexture psdFileTex`;
	 else
		$craTextureFileNode = `shadingNode -n ($craFileNodeName + "_file") -asTexture file`;
	
	string $craTextureFilePlacement2D = `shadingNode -n ($craFileNodeName + "_place2D") -asUtility place2dTexture`;
	///////////////////////////////////////////////////////////////////////
	connectAttr -f ($craTextureFilePlacement2D + ".coverage") ($craTextureFileNode + ".coverage");
	connectAttr -f ($craTextureFilePlacement2D + ".translateFrame") ($craTextureFileNode + ".translateFrame");
	connectAttr -f ($craTextureFilePlacement2D + ".rotateFrame") ($craTextureFileNode + ".rotateFrame");
	connectAttr -f ($craTextureFilePlacement2D + ".mirrorU") ($craTextureFileNode + ".mirrorU");
	connectAttr -f ($craTextureFilePlacement2D + ".mirrorV") ($craTextureFileNode + ".mirrorV");
	connectAttr -f ($craTextureFilePlacement2D + ".stagger") ($craTextureFileNode + ".stagger");
	connectAttr -f ($craTextureFilePlacement2D + ".wrapU") ($craTextureFileNode + ".wrapU");
	connectAttr -f ($craTextureFilePlacement2D + ".wrapV") ($craTextureFileNode + ".wrapV");
	connectAttr -f ($craTextureFilePlacement2D + ".repeatUV") ($craTextureFileNode + ".repeatUV");
	connectAttr -f ($craTextureFilePlacement2D + ".offset") ($craTextureFileNode + ".offset");
	connectAttr -f ($craTextureFilePlacement2D + ".rotateUV") ($craTextureFileNode + ".rotateUV");
	connectAttr -f ($craTextureFilePlacement2D + ".noiseUV") ($craTextureFileNode + ".noiseUV");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexUvOne") ($craTextureFileNode + ".vertexUvOne");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexUvTwo") ($craTextureFileNode + ".vertexUvTwo");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexUvThree") ($craTextureFileNode + ".vertexUvThree");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexCameraOne") ($craTextureFileNode + ".vertexCameraOne");
	connectAttr -f ($craTextureFilePlacement2D + ".outUV") ($craTextureFileNode + ".uv");
	connectAttr -f ($craTextureFilePlacement2D + ".outUvFilterSize") ($craTextureFileNode + ".uvFilterSize");
	///////////////////////////////////////////////////////////////////////
	
	setAttr ( $craTextureFileNode + ".fileTextureName") -type "string" $image;
	
	select -r $craTextureFileNode;
	print ($craTextureFileNode + " node created.\n");
}

global proc craMaterialPerImage(string $type, int $assign)
{
	string $craSelectedFiles[]= `craMayaFileBrowserGetSelectedFiles`;
	string $craGetCurrentPath =`textField -q -tx craMayaFileBrowserFilePath`;
	string $sel[] = `ls -sl`;
	if(size($craSelectedFiles))
	{
		for($image in $craSelectedFiles)
		{
			string $craFullFilePath = $craGetCurrentPath + $image;
			craMaterialPerImageCmd($type, $craFullFilePath, $assign); 
		}
	}
	select -r $sel;
}

global proc craMaterialPerImageCmd(string $type, string $image, int $assign)
{
	string $sel[] = `ls -sl`;
	string $craBaseName = basenameEx($image);
	string $craFileExtension = fileExtension($image);
	// string $craTextureFileNode = `shadingNode -n ($craBaseName + "_file") -asTexture file`;
	
	if(fileExtension(`tolower $image`) == "psd")
		$craTextureFileNode = `shadingNode -n ($craBaseName + "_psdFile") -asTexture psdFileTex`;
	else
		$craTextureFileNode = `shadingNode -n ($craBaseName + "_file") -asTexture file`;
	
	string $craTextureFilePlacement2D = `shadingNode -n ($craBaseName + "_place2D") -asUtility place2dTexture`;
	///////////////////////////////////////////////////////////////////////
	connectAttr -f ($craTextureFilePlacement2D + ".coverage") ($craTextureFileNode + ".coverage");
	connectAttr -f ($craTextureFilePlacement2D + ".translateFrame") ($craTextureFileNode + ".translateFrame");
	connectAttr -f ($craTextureFilePlacement2D + ".rotateFrame") ($craTextureFileNode + ".rotateFrame");
	connectAttr -f ($craTextureFilePlacement2D + ".mirrorU") ($craTextureFileNode + ".mirrorU");
	connectAttr -f ($craTextureFilePlacement2D + ".mirrorV") ($craTextureFileNode + ".mirrorV");
	connectAttr -f ($craTextureFilePlacement2D + ".stagger") ($craTextureFileNode + ".stagger");
	connectAttr -f ($craTextureFilePlacement2D + ".wrapU") ($craTextureFileNode + ".wrapU");
	connectAttr -f ($craTextureFilePlacement2D + ".wrapV") ($craTextureFileNode + ".wrapV");
	connectAttr -f ($craTextureFilePlacement2D + ".repeatUV") ($craTextureFileNode + ".repeatUV");
	connectAttr -f ($craTextureFilePlacement2D + ".offset") ($craTextureFileNode + ".offset");
	connectAttr -f ($craTextureFilePlacement2D + ".rotateUV") ($craTextureFileNode + ".rotateUV");
	connectAttr -f ($craTextureFilePlacement2D + ".noiseUV") ($craTextureFileNode + ".noiseUV");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexUvOne") ($craTextureFileNode + ".vertexUvOne");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexUvTwo") ($craTextureFileNode + ".vertexUvTwo");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexUvThree") ($craTextureFileNode + ".vertexUvThree");
	connectAttr -f ($craTextureFilePlacement2D + ".vertexCameraOne") ($craTextureFileNode + ".vertexCameraOne");
	connectAttr -f ($craTextureFilePlacement2D + ".outUV") ($craTextureFileNode + ".uv");
	connectAttr -f ($craTextureFilePlacement2D + ".outUvFilterSize") ($craTextureFileNode + ".uvFilterSize");
	///////////////////////////////////////////////////////////////////////
	
	setAttr ( $craTextureFileNode + ".fileTextureName") -type "string" $image;
	
	string $material = `shadingNode -n ($craBaseName + "_" + $type) -asShader $type`;
	select -cl;
	string $sg = `sets -renderable true -noSurfaceShader true -empty -name ($material + "SG")`;
	defaultNavigation -connectToExisting -source $material -destination $sg;
	
	if($type == "surfaceShader")
	{
		connectAttr -f ( $craTextureFileNode + ".outColor" ) ( $material + ".outColor");
		if ( `getAttr ( $craTextureFileNode + ".fileHasAlpha")`)
			connectAttr -f ( $craTextureFileNode + ".outTransparency" ) ( $material + ".outTransparency");
	}
	else if($type == "dgs_material" || $type == "mia_material" || $type == "mia_material_x")
	{
		if(!`pluginInfo -q -l Mayatomr`)
			warning "Mayatomr plug-in is not loaded.\n";
		connectAttr -f ( $craTextureFileNode + ".outColor" ) ( $material + ".diffuse");
		if ( `getAttr ( $craTextureFileNode + ".fileHasAlpha")`)
			connectAttr -f ( $craTextureFileNode + ".outAlpha" ) ( $material + ".diffuseA");
	}
	else if($type == "dielectric_material")
	{
		if(!`pluginInfo -q -l Mayatomr`)
			error "Mayatomr plug-in is not loaded.\n";
		connectAttr -f ( $craTextureFileNode + ".outColor" ) ( $material + ".col");
		if ( `getAttr ( $craTextureFileNode + ".fileHasAlpha")`)
			connectAttr -f ( $craTextureFileNode + ".outAlpha" ) ( $material + ".colA");
	}
	else
	{
		connectAttr -f ( $craTextureFileNode + ".outColor" ) ( $material + ".color");
		if ( `getAttr ( $craTextureFileNode + ".fileHasAlpha")`)
			connectAttr -f ( $craTextureFileNode + ".outTransparency" ) ( $material + ".transparency");
	}
	
	if($assign && size($sel))
	{
		select -r $sel;
		catchQuiet(`hyperShade -assign $sg`);
	}
	
	print ($type + " material created: " + $material + "\n");
}

global proc craMayaFileBrowserChangeLayout()
{
        int $sizes[] = `optionVar -q craMayaFileBrowserPanelSizesOV`;
     
	if( `paneLayout -q -cn craMayaFileBrowserPaneLayout` == "horizontal2")
	{
                iconTextButton -e -i "defaultTwoStackedLayout.png" -ann "Change UI Layout to Stacked" craMayaFileBrowserChangeLayoutITBTN;
                optionVar -sv "craMayaFileBrowserUILayoutOV" "vertical2";
                paneLayout -e -cn "vertical2" craMayaFileBrowserPaneLayout;
                paneLayout -e -ps 1 $sizes[0] (100-$sizes[1]) craMayaFileBrowserPaneLayout;
                formLayout -e -manage 1 craMayaFileBrowserSceneInfoMainForm;
	}
	else
	{
                iconTextButton -e -i "defaultTwoSideBySideLayout.png"  -ann "Change UI Layout to Side by Side" craMayaFileBrowserChangeLayoutITBTN;
                optionVar -sv "craMayaFileBrowserUILayoutOV" "horizontal2";
                paneLayout -e -cn  "horizontal2" craMayaFileBrowserPaneLayout;
                dockControl -e -w 505 craMayaFileBrowserDock;
                paneLayout -e -ps 1 50 50 craMayaFileBrowserPaneLayout;
                formLayout -e -manage `optionVar -q craMayaFileBrowserViewSceneInfoStateOV` craMayaFileBrowserSceneInfoMainForm;
	}
}

global proc craMayaFileBrowserImportOBJSequence( string $OBJfiles[], int $mode )
{
	$startTime = `timerX`;
	string $craErrors[];
	int $craCancelled;
			
	string $origMeshNodes[] = `ls -l -type "mesh"`;
	string $craOrigObjectSetNodes[] = `ls -type "objectSet"`;
	string $currentMeshNodes[] = `ls -l -type "mesh"`;
	if(!$mode)
		if(!`objExists "OBJ_Sequences_grp"`)
		group -em -n "OBJ_Sequences_grp";
	
	string $filename = basenameEx("\"" + $OBJfiles[0] + "\"");
	string $groupName[];
	tokenize $filename "." $groupName;
	tokenize $groupName[0] "_" $groupName;
	
	select -cl;
	int $status = `scriptEditorInfo -q -sr`;
	scriptEditorInfo -sr 1;
	int $count = 1;
	int $maxValue = size($OBJfiles);
	
	progressWindow  -status "Importing OBJ Sequence" -maxValue $maxValue -title "Importing" -isInterruptable true;
	
	for($file in $OBJfiles)
	{
		if ( `progressWindow -query -isCancelled` )
		{
			$craCancelled = 1;
			break;
		}
		progressWindow -e -step 1 ;
		if(catchQuiet(`file -force -import -type "OBJ" -options "mo=0" $file`))
		{
			$craErrors[size($craErrors)] = $file;
			continue;
		}
		
		select -r `ls -l -type "mesh"`;
		select -deselect $currentMeshNodes;
		if(!$mode)
			pickWalkUp;
		string $newMesh[] = `ls -sl`;
		catchQuiet(`rename $newMesh[0] ( $groupName[0] + "_" + craNumberPadding(string($count), 4, 0) + "_mesh" )`);
		if(!$mode)
		{
			select -add "OBJ_Sequences_grp"; 
			parent;
		}
		
		hide;
		
		$currentMeshNodes = `ls -l -type "mesh"`;
		$count++;
	}
	
	select -r `ls -l -type "mesh"`;
	select -deselect $origMeshNodes;
	
	if(!$mode)
	{
		pickWalkUp;
		$newGroup = `group -n ($groupName[0] + "_OBJ_seq")`;
		select -r `listRelatives -f -c $newGroup`;
	}
	
	craConnectToChoice $groupName[0] $mode;
	
	scriptEditorInfo -sr $status;
	
	// remove imported sets
	string $craCurrentSets[] = `ls -type "objectSet"`;
	string $craRemoveSets[] = `stringArrayRemove $craOrigObjectSetNodes $craCurrentSets`;
	if(size($craRemoveSets))
		delete $craRemoveSets;
	
	$totalTime = `timerX -startTime $startTime`;
	if(size($craErrors))
	{
		for($i in $craErrors)
			print ($i + " failed to import.\n");
		warning ("There were errors importing " + size($craErrors) + " files. See Script Editor for details.\n");
	}
	else
	{
		if($craCancelled)
			warning "Importing OBJ sequence cancelled.\n";
		else
			print ("All done! " + $groupName[0] + " imported successfully in " + $totalTime + " seconds.\n");
	}

	progressWindow -endProgress;
}

// Usage:
//    Select your objects and run. It creates a new choice node, and a new target mesh.
//    Connects every shape node to the choice node. No error checking so select only meshes.

global proc craConnectToChoice( string $craName , int $mode)
{
	// get selection
	string $mySel[] = `ls -sl`;
	
	// create choice node with name
	string $choice = `createNode -n ($craName + "_OBJ_Seq_choice") choice`;
	
	// create new mesh to hold the animation
	string $newMesh[] = `polyCube -ch 0 -n ($craName + "_OBJ_Seq_Mesh")`;
	
	// connect choice output to new mesh inMesh attr
	string $meshShape[] = `listRelatives -s $newMesh[0]`;
	connectAttr -f ($choice + ".output") ($meshShape[0] + ".inMesh");
	
	// connect time to choice selector attr
	connectAttr -f time1.outTime ($choice + ".selector");
	
	// connect obj outMesh to choice input attr
	for( $i=0; $i<size($mySel) ;$i++ )
	{
		if(!$mode)
		{
			string $shapes[] = `listRelatives -s -f $mySel[$i]`;
			connectAttr -f ($shapes[0] + ".outMesh") ($choice + ".input[" + ($i+1) + "]");
		}
		else
		{
			connectAttr -f ($mySel[$i] + ".outMesh") ($choice + ".input[" + ($i+1) + "]");
			setAttr ($mySel[$i] + ".intermediateObject") 1;
			setAttr ($mySel[$i] + ".visibility") 1;
			parent -s -add $mySel[$i] $newMesh[0];
		}
	}
	if($mode)
		delete `listRelatives -f -p $mySel`;
}

global proc craMayaFileBrowserRenameFile()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $nombres[] = `craMayaFileBrowserGetSelectedFiles`;
	string $nombre = $nombres[0];
	int $isDir;
	string $extension = `fileExtension $nombre`;
	
	
	if ( `startsWith $nombre "< "` && `endsWith $nombre " >"` )
	{
		$nombre = substituteAllString($nombre, "< ", "");
		$nombre = substituteAllString($nombre, " >", "");
		$isDir = 1;
	}
	string $craResult = `promptDialog
				-title "Rename File" 
				-message ("Enter new name for " + $nombre) 
				-button "OK" -button "Cancel"
				-text $nombre
				-defaultButton "OK" -cancelButton "Cancel"
				-dismissString "Cancel"`
			;
	string $text = `promptDialog -q -text`;
	string $newExtension = `fileExtension $text`;
	if($craResult == "Cancel")
	{
		print "File renaming cancelled.\n";
		return;
	}
	
	if(`tolower $extension` == `tolower $newExtension`)
	{
		if($text == $nombre)
		{
			warning "Enter a different file name.\n";
			return;
		}
		sysFile -rename ($craGetCurrentPath + $text) ($craGetCurrentPath + $nombre);
		craMayaFileBrowserListPath;
		if($isDir)
			textScrollList -e -si ("< " + $text + " >") craMayaFileBrowserFileListTSL;
		else
			textScrollList -e -si $text craMayaFileBrowserFileListTSL;
		print ($craGetCurrentPath + $nombre + " has been renamed to " + $craGetCurrentPath + $text + "\n");
	}
	else
		warning "New file name must have the same extension.\n";
}

global proc craMayaFileBrowserCopyFile()
{
	string $craGetCurrentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	string $nombres[] = `craMayaFileBrowserGetSelectedFiles`;
	string $nombre = $nombres[0];
	int $isDir;
	string $extension = `fileExtension $nombre`;
	
	if ( `startsWith $nombre "< "` && `endsWith $nombre " >"` )
	{
		warning "Only file copy available.\n";
		return;
	}
	string $craResult = `promptDialog
				-title "Duplicate File" 
				-message ("Enter new name for " + $nombre) 
				-button "OK" -button "Cancel"
				-text $nombre
				-defaultButton "OK" -cancelButton "Cancel"
				-dismissString "Cancel"`
			;
	if($craResult == "Cancel")
	{
		print "File copying cancelled.\n";
		return;
	}

	string $text = `promptDialog -q -text`;
	string $newExtension = `fileExtension $text`;
	
	if(`tolower $extension` == `tolower $newExtension`)
	{
		if($text == $nombre)
		{
			warning "Enter a different file name.\n";
			return;
		}
		sysFile -copy ($craGetCurrentPath + $text) ($craGetCurrentPath + $nombre);
		craMayaFileBrowserListPath;
		textScrollList -e -si $text craMayaFileBrowserFileListTSL;
		print ($craGetCurrentPath + $nombre + " has been copied to " + $craGetCurrentPath + $text + "\n");
	}
	else
		warning "New file name must have the same extension.\n";
}

global proc craMayaFileBrowserChangeFileSort()
{
	string $files[] = `craMayaFileBrowserGetSelectedFiles`;
	
	if(`optionVar -q "craMayaFileBrowserSortByNameOV"`)
	{
		optionVar -iv "craMayaFileBrowserSortByNameOV" 0;
		iconTextButton -iol "" -e -ann "Sort file list by extension" craMayaFileBrowserSortByBTN;
		print "Sort file list by name.\n";
	}
	else
	{
		optionVar -iv "craMayaFileBrowserSortByNameOV" 1;
		iconTextButton -iol "ext" -e -ann "Sort file list by name" craMayaFileBrowserSortByBTN;
		print "Sort file list by extension.\n";
	}

	craMayaFileBrowserLoadFileList;
	craMayaFileBrowserFileFilter 1;
	
	for($file in $files)
		textScrollList -e -si $file craMayaFileBrowserFileListTSL;	
}
		
global proc craMayaFileBrowserRecentFolders()
{
	if ( !`optionVar -exists "craMayaFileBrowserRecentFoldersOV"`)
		optionVar -sva "craMayaFileBrowserRecentFoldersOV" "";
	
	popupMenu -e -dai craMayaFileBrowserRecentFoldersPUM;
	
	menuItem -en 0 -p "craMayaFileBrowserRecentFoldersPUM" -l "- Recent Folders -";
	menuItem -p "craMayaFileBrowserRecentFoldersPUM" -d 1;
	
	if(size(`optionVar -q "craMayaFileBrowserRecentFoldersOV"`))
	{
		string $folders[];
		string $tempFolders[] = `optionVar -q "craMayaFileBrowserRecentFoldersOV"`;
		for ($i=(size($tempFolders)-1);$i>=0;$i--)

			$folders[$i] = $tempFolders[(size($tempFolders)-1)-$i];

		
		for( $folder in $folders )
		{
			if($folder != "")
			{
				$folder = `fromNativePath $folder`;
				menuItem -p "craMayaFileBrowserRecentFoldersPUM" -l $folder -c ("textField -e -text \"" + $folder + "\" craMayaFileBrowserFilePath;craMayaFileBrowserListPath");
			}
		}
	}
	
	menuItem -p "craMayaFileBrowserRecentFoldersPUM" -d 1;
	menuItem -en 0 -p "craMayaFileBrowserRecentFoldersPUM" -l "- Oldest Folder -";


	menuItem -p "craMayaFileBrowserRecentFoldersPUM" -d 1;
	menuItem -p "craMayaFileBrowserRecentFoldersPUM" -l "Clear recent folders" -c "optionVar -rm craMayaFileBrowserRecentFoldersOV";

}

global proc craMayaFileBrowserAppendRecentFolder()
{
	if(size(`optionVar -q "craMayaFileBrowserRecentFoldersOV"`))
	{
		string $recentFolders[] = `optionVar -q "craMayaFileBrowserRecentFoldersOV"`;
		if(size($recentFolders) > 19)
			stringArrayRemoveAtIndex(0, $recentFolders);
	

	string $currentPath = `textField -q -tx craMayaFileBrowserFilePath`;
	$recentFolders = stringArrayRemoveExact({$currentPath}, $recentFolders);
	$recentFolders[size($recentFolders)] = `textField -q -tx craMayaFileBrowserFilePath`;

	optionVar -ca "craMayaFileBrowserRecentFoldersOV";

	for($recentFolder in $recentFolders)
		optionVar -sva "craMayaFileBrowserRecentFoldersOV" $recentFolder;
	}
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
// CharlieWales' File Browser end

global proc craSceneToolsClearOVs()
{
	string $craSceneToolsOV[] = {"craAddChannelBoxButtonsOV", "craAutoLoadSceneToolsOV", "craSceneInfoOptionsOV", "craSceneInfoHUDsOV", "craFileOptionsFLStateOV", "craPlayblastModelPanelFlagsOV", "craMayaFileBrowserFloatingUIOV", "craMayaFileBrowserUILayoutOV", "craMayaFileBrowserLiveSearchOV", "craMayaFileBrowserProjectFoldersOV", "craMayaFileBrowserOpenSequenceExternalViewerOV", "craMayaFileBrowserFavoritesOV","craMayaFileBrowserPanelSizesOV", "craMayaFileBrowserLiveSearchOV", "craMayaFileBrowserRecentFoldersOV"};
	
	if(`confirmDialog -t "Warning" -ma "center" -m "Clear all optionVars?" -b "Yes" -b "No" -db "Yes" -cb "No"` == "Yes")
	{
		for ($craOV in $craSceneToolsOV)
		{
			if(`optionVar -exists $craOV`);
				optionVar -remove $craOV;
		}
		
		print "craSceneTools optionVars cleared!\n";
	}
}


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// craExportAllSelected start

global proc craExportAllSelected()
{
	layoutDialog -title "Scene Tools - Export All/Selected..." -ui "craSceneToolsCustomExportDialog";
}

global proc craSceneToolsCustomExportDialog()
{
	// Get the dialog's formLayout.
	string $form = `setParent -q`;
	string $craOutputPath;
	string $exportName;
	
	if(`textField -exists craMayaFileBrowserFilePath`)
		$craOutputPath = `textField -q -text craMayaFileBrowserFilePath`;
	else if(dirname(`file -q -loc`) != "")
		$craOutputPath = dirname(`file -q -loc`) + "/";
	else
		$craOutputPath = (`workspace -q -rd` + `workspace -q -fre "scene"` + "/");
	
	if(size(basenameEx(`file -q -sn -shn`)))
		$exportName = basenameEx(`file -q -sn -shn`)  + ".ma";
	else
		$exportName = "newExport.ma";
	
	int $craInsertPosition = size(basenameEx($exportName)) + 1;
	
	formLayout -e -width 600 -h 610 $form;
	frameLayout -w 600 -mw 5 -mh 5 -lv 0 craMainFrameL;
		frameLayout -mw 5 -mh 5 -lv 0;
			columnLayout -adj 1;
				rowLayout -nc 2 -adj 2;
					text -w 80 -l "Output  path: ";
					textField -text $craOutputPath -ann $craOutputPath -cc "craExportAllSelectedChangePath" -ec "craExportAllSelectedChangePath" craSceneToolsExportOutputPathTF;
				setParent ..;
				
				rowLayout -nc 2 -adj 2;
					text -w 80 -label "Export name: " craExportFileNameTX;
					textField -ip $craInsertPosition -text $exportName -cc "setFocus craSceneToolsExportBTN" -ec "craExportAllSelectedCmd" craSceneToolsExportFileNameTF;
					
				setParent ..;
				
				radioCollection craExportModeRBC;
					rowLayout -nc 4;   
						text -w 70 -l "";
						radioButton -onc "textField -e -en 1 craSceneToolsExportFileNameTF" -l "All" craSceneToolsExportAllRB;
						radioButton -onc "textField -e -en 1 craSceneToolsExportFileNameTF"  -l "Selected" craSceneToolsExportSelectedSingleRB;
						radioButton -onc "textField -e -en 0 craSceneToolsExportFileNameTF" 
							-l ("Each selected - " + size(`ls -sl`) + " file" + (size(`ls -sl`) > 1 ? "s" : "") +" - (one file per object, file names = object names)") craSceneToolsExportSelectedMultipleRB;
					setParent ..;
				setParent ..;
				
				rowLayout -nc 2 -adj 2;   
					text -l "Output type   ";
					optionMenu -w 503 -cc "craExportAllSelectedChangeType" craExportFileTypesOM;
				
					for($type in stringToStringArray (buildWritableFileFilterList(), ";;"))
					{
						menuItem -l $type ;
					}	
					setParent -m ..;
				setParent ..;
				
				frameLayout -cll 0 -cl 0 -lv 1 -l "Options..." craExportFileOptionsFL;
					fileOperationsOptionsUISetup ExportActive craExportFileOptionsFL;
					fileOperationsOptionsUIInitValues ExportActive craExportFileOptionsFL "Maya ASCII";
				setParent ..;
				
				rowLayout -nc 2 -adj 1 -p "craMainFrameL";       
					button -label "Export" -c "craExportAllSelectedCmd" craSceneToolsExportBTN;
					button -w 300 -label "Cancel" -c "layoutDialog -dismiss \"Cancel\"" craQuitBTN;
				setParent ..;
			setParent ..;
		setParent ..;
        setParent ..;
        
        int $top = 0;
        int $edge = 5;       
        
        
        formLayout -edit
		-attachForm  craMainFrameL   "top"    $top
		-attachForm  craMainFrameL   "left"    $top
		-attachForm  craMainFrameL   "right"    $top
		-attachForm  craMainFrameL   "bottom"    $top
        $form;
        
        if(size(`ls -sl`))
		radioButton -e -sl craSceneToolsExportSelectedSingleRB;
	else
	{
		radioButton -e -en 0 craSceneToolsExportSelectedSingleRB;
		radioButton -e -en 0 craSceneToolsExportSelectedMultipleRB;
		radioButton -e -sl craSceneToolsExportAllRB;
	}
	
	setFocus craSceneToolsExportFileNameTF;
	
	evalDeferred("textField -e -ip " + $craInsertPosition + " craSceneToolsExportFileNameTF");
}

global proc craExportAllSelectedChangePath()
{
	if(!endsWith(`textField -q -text craSceneToolsExportOutputPathTF`, "/"))
		textField -e -text (`textField -q -text craSceneToolsExportOutputPathTF` + "/") -ann (`textField -q -text craSceneToolsExportOutputPathTF` + "/") craSceneToolsExportOutputPathTF;
	string $path = `textField -q -text craSceneToolsExportOutputPathTF`;
	int $craPathExists = `filetest -d $path`;
	if( !$craPathExists )
	{
		if(`confirmDialog -title "Not existing folder" -message "Create folder?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"` == "Yes")
		{
			sysFile -md $path;
			if(`dockControl -q -exists craMayaFileBrowserDock`)
			{
				craMayaFileBrowserListPath;
				textScrollList -e -si ("< " + basenameEx($path) + " >") craMayaFileBrowserFileListTSL;
			}
			setFocus craSceneToolsExportFileNameTF;
			print ($path + " folder has been created.\n");
		}
		else
		{
			textField -e -text `textField -q -tx craMayaFileBrowserFilePath` -ann `textField -q -tx craMayaFileBrowserFilePath` craSceneToolsExportOutputPathTF;
			warning "Output folder does not exist!\n";
		}
	}
	else
	{
		setFocus craSceneToolsExportFileNameTF;
		print ("Output folder set to " + $path + "\n");
	}
}

global proc craExportAllSelectedCmd()
{
	string $craExportOutputPath = `textField -q -text craSceneToolsExportOutputPathTF`;
	if(!endsWith($craExportOutputPath, "/"))
		$craExportOutputPath += "/";
	
	string $craNewSceneName = `textField -q -text craSceneToolsExportFileNameTF`;
	if ($craNewSceneName == "")
	{
		warning "Enter a file name.\n";
		return;
	}
	string $currentType =  `optionMenu -q -v craExportFileTypesOM`;
	string $currentName = basenameEx(`textField -q -text craSceneToolsExportFileNameTF`);
	
	string $buffer[];
	string $buffer2[];
	string $buffer3[];
	string $buffer4[];
	
	tokenize $currentType "(" $buffer;
	tokenize $buffer[1] ")" $buffer2;
	tokenize $buffer2[0] "." $buffer3;
	tokenize $buffer3[1] " " $buffer4;
	
	string $type = strip($buffer[0]);
	string $extension = strip($buffer4[0]);
	
	if ($craNewSceneName == "")
	{
		warning "Enter a file name.\n";
		return;
	}
	else if(!endsWith($craNewSceneName, $extension))
		$craNewSceneName += "." + $extension;
	
	string $craExportFiles = ($craExportOutputPath + $craNewSceneName);
	string $mySel[] = `ls -sl`;
	
	if($type == "Maya ASCII")
		$type = "mayaAscii";
	else if($type == "Maya Binary")
		$type = "mayaBinary";

	string $actionOptions[];
	
	if (`radioButton -q -select craSceneToolsExportAllRB`)
	{
		if( $craExportFiles == `file -q -loc`)
			warning "Enter a different file name!\n";
		else
		{	
			int $overwrite = 1;
			if (`file -q -exists $craExportFiles`)
			{
				string $state = `confirmDialog -title "Existing scene" -defaultButton "OK" -message "Overwrite?" -cancelButton "Cancel"  -dismissString "Cancel" -button "OK" -button "Cancel"`;
				if($state == "OK")
					$overwrite = 1;
				else if ($state == "Cancel")
				{
					$overwrite = 0;
					warning "Export cancelled.\n";
				}
			}
			if($overwrite == 1)
			{
				$actionOptions =  craPv_ActionSetup("ExportAll");
				$actionOptions[1] = fileTypeToFilterDescription($actionOptions[1]);
				fileOperationsOptionsUICallback ExportAll craExportFileOptionsFL;
				if(`getApplicationVersionAsFloat` == 2011)
					eval ("performFileAction \"" + $craExportFiles + "\" " + $actionOptions[2]);
				else
					eval ("performFileAction \"" + $craExportFiles + "\" " + $actionOptions[2] + " \"" + $type + "\"");
				layoutDialog -dismiss "Export";
				print ("Exported: " + $craExportFiles + "\n");
			}
		}
	}
	
	if (`radioButton -q -select craSceneToolsExportSelectedSingleRB`)
	{
		if( $craExportFiles == `file -q -loc`)
				warning "Enter a different file name!\n";
		else
		{
			int $overwrite = 1;
			if (`file -q -exists $craExportFiles`)
			{
				string $state = `confirmDialog -title "Existing scene" -defaultButton "OK" -message "Overwrite?" -cancelButton "Cancel"  -dismissString "Cancel" -button "OK" -button "Cancel"`;
				if($state == "OK")
					$overwrite = 1;
				else if ($state == "Cancel")
				{
					$overwrite = 0;
					warning "Export cancelled.\n";
				}
			}
			if($overwrite == 1)
			{
				$actionOptions =  craPv_ActionSetup("ExportActive");
				$actionOptions[1] = fileTypeToFilterDescription($actionOptions[1]);
				fileOperationsOptionsUICallback ExportActive craExportFileOptionsFL;
				if(`getApplicationVersionAsFloat` == 2011)
					eval ("performFileAction \"" + $craExportFiles + "\" " + $actionOptions[2]);
				else
					eval ("performFileAction \"" + $craExportFiles + "\" " + $actionOptions[2] + " \"" + $type + "\"");
				layoutDialog -dismiss "Export";
				print ("Exported: " + $craExportFiles + "\n");
			}
		}
	}
	
	if (`radioButton -q -select craSceneToolsExportSelectedMultipleRB`)
	{
		$actionOptions =  craPv_ActionSetup("ExportActive");
		$actionOptions[1] = fileTypeToFilterDescription($actionOptions[1]);
		int $overwrite = 2;
		
		
		fileOperationsOptionsUICallback ExportActive craExportFileOptionsFL;
		
		for($outputFile in $mySel)
		{
			if(`objExists $outputFile`)
				select -r $outputFile;
			else
				continue;
			
			if (`file -q -exists ($craExportOutputPath + $outputFile + "." + $extension)`)
			{
				if($overwrite >= 1 && $overwrite < 3)
				{
					string $state = `confirmDialog -title "Existing scene" -defaultButton "Yes" -message ("Overwrite " + ($craExportOutputPath + $outputFile + "." + $extension) + "?") -cancelButton "Cancel"  -dismissString "Cancel" -button "Yes" -button "Yes to all" -button "No" -button "Cancel"`;
					if($state == "Yes to all")
					{
						print "Yes to all";
						$overwrite = 3;
					}
					else if($state == "Yes")
					{
						print "Yes";
						$overwrite = 2;
					}
					else if($state == "No")
					{
						print "No";
						$overwrite = 1;
					}
					else if ($state == "Cancel")
					{
						print "Cancel";
						$overwrite = 0;
						break;
					}
				}
			}
			
			if($overwrite >= 2)
			{
				if(`getApplicationVersionAsFloat` == 2011)
					eval ("performFileAction \"" + $craExportOutputPath + $outputFile + "." + $extension + "\" " + $actionOptions[2]);
				else
					eval ("performFileAction \"" + $craExportOutputPath + $outputFile + "." + $extension + "\" " + $actionOptions[2] + " \"" + $type + "\"");
				print ("Exported: " + $craExportOutputPath + $outputFile + "." + $extension + "\n");
			}
			
		}
		
		if($overwrite > 0)
			layoutDialog -dismiss "Export";
		else
			warning "Export cancelled.\n";
	}
		
	if(`dockControl -q -exists craMayaFileBrowserDock`)
	{
		textField -e -tx $craExportOutputPath craMayaFileBrowserFilePath;
		craMayaFileBrowserListPath;
	}
	
	select -cl;
	
	for($obj in $mySel)
	{
		if(`objExists $obj`)
			select -add $obj;
	}
}

global proc craExportAllSelectedChangeType()
{
	string $currentType =  `optionMenu -q -v craExportFileTypesOM`;
	string $currentName = basenameEx(`textField -q -text craSceneToolsExportFileNameTF`);
	
	string $buffer[];
	string $buffer2[];
	string $buffer3[];
	string $buffer4[];
	
	tokenize $currentType "(" $buffer;
	tokenize $buffer[1] ")" $buffer2;
	tokenize $buffer2[0] "." $buffer3;
	tokenize $buffer3[1] " " $buffer4;
	
	string $type = $buffer[0];
	string $extension = $buffer4[0];
	string $action;
	if (`radioButton -q -select craSceneToolsExportAllRB`)
		$action = "ExportAll";
	else
		$action = "ExportActive";
	
	setCurrentFileTypeOption $action craExportFileOptionsFL $type;
	
	textField -e -text ($currentName + "." + $extension) craSceneToolsExportFileNameTF;
	
	int $craInsertPosition = size(basenameEx(($currentName + "." + $extension))) + 1;
	
	textField -e -ip $craInsertPosition -it "" craSceneToolsExportFileNameTF;
	setFocus craSceneToolsExportFileNameTF;
}

// copy of original maya local proc pv_ActionSetup() found in projectViewer.mel
// in order to get export options as Maya does
global proc string[] craPv_ActionSetup ( string $newAction )
//
//	Description:
//		This proc sets up the viewer to perform the action specified when the
//      action button is pressed by the user.
//
{
	global string $gv_operationMode;
	$gv_operationMode = $newAction;

	string $saveType;
	string $readType;
	string $workspace = `workspace -fn`;

	string $actionOptions[11];
	//$actionOptions[0] == Localized label for the action. eg. "Save As"
	//$actionOptions[1] == File type for the action.  eg. "mayaBinary", "Best Guess" 
	//$actionOptions[2] == File mode for the dialog.
	//					Value:    Returns
	//					  0          Any file.  The name of a file, whether it exists or not.
	//					  1          Existing file.  The name of a single existing file.
	//					  2          Directory.  The name of a directory. Both files and directories are displayed in the dialog.
	//					  3          Directory only.  The name of a directory. The file dialog will only display directories.
	//					  4          Existing files.  The names of zero or more existing files.
	//
	//$actionOptions[3] == Callback for options UI creation.  The Maya dialog will call this procedure to allow the UI for
	//					   the actions options to be inserted into the dialog.
	//$actionOptions[4] == Callback to intialize the values of the options UI.
	//$actionOptions[5] == Callback for when a new file has been chosen in the dialog.
	//$actionOptions[6] == Callback for options UI after a selection has been made but before the dialog goes away.  In our case this is
	//					   used to make sure that the optionVar's match what is in the UI.
	//$actionOptions[7] == Callback for when the file filter changes
	//$actionOptions[8] == File filters list.  Each entry is separated by double semi-colons  eg. "All Files (*.*);;Maya Scenes (*.mb *.mb)"
	//$actionOptions[9] == Directory to open the dialog in.

	$saveType = "mayaBinary";
	$readType = (uiRes("m_fileOptions.kBestGuess"));
	string $reference = (uiRes("m_projectViewer.kReference"));

	switch ($newAction) {
      case "Open": {
		if (`optionVar -exists defaultFileOpenType`) {
			$readType = `optionVar -q defaultFileOpenType`;
		}
        $actionOptions[0] = (uiRes("m_projectViewer.kOpen"));
        $actionOptions[1] = $readType;
        $actionOptions[2] = "1";
		$actionOptions[3] = "fileOperationsOptionsUISetup Open";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues Open";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback Open";
		$actionOptions[6] = "fileOperationsOptionsUICallback Open";
		$actionOptions[7] = "setCurrentFileTypeOption Open";
		$actionOptions[8] = buildDefaultMayaOpenFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }
      case "Reference": {
		if (`optionVar -exists defaultFileReferenceType`) {
			$readType = `optionVar -q defaultFileReferenceType`;
		}
        $actionOptions[0] = $reference;
        $actionOptions[1] = $readType;
        $actionOptions[2] = "1";
		$actionOptions[3] = "fileOperationsOptionsUISetup Reference";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues Reference";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback Reference";
		$actionOptions[6] = "fileOperationsOptionsUICallback Reference";
		$actionOptions[7] = "setCurrentFileTypeOption Reference";
		$actionOptions[8] = buildReadableFileFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }
      case "Import": {
		if (`optionVar -exists defaultFileImportType`) {
			$readType = `optionVar -q defaultFileImportType`;
		}
        $actionOptions[0] = (uiRes("m_projectViewer.kImport"));
        $actionOptions[1] = $readType;
        $actionOptions[2] = "1";
		$actionOptions[3] = "fileOperationsOptionsUISetup Import";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues Import";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback Import";
		$actionOptions[6] = "fileOperationsOptionsUICallback Import";
		$actionOptions[7] = "setCurrentFileTypeOption Import";
		$actionOptions[8] = buildReadableFileFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }
	  case "ReplaceReference": {
		if (`optionVar -exists defaultFileReferenceType`) {
			$readType = `optionVar -q defaultFileReferenceType`;
		}
        $actionOptions[0] = $reference;
        $actionOptions[1] = $readType;
        $actionOptions[2] = "1";
		$actionOptions[8] = buildReadableFileFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;

        break;
	  }
	  case "Proxy": {
		if (`optionVar -exists defaultFileReferenceType`) {
			$readType = `optionVar -q defaultFileReferenceType`;
		}
        $actionOptions[0] = (uiRes("m_projectViewer.kProxy"));
        $actionOptions[1] = $readType;
        $actionOptions[2] = "1";
		$actionOptions[3] = "fileOperationsOptionsUISetup Proxy";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues Proxy";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback Proxy";
		$actionOptions[6] = "fileOperationsOptionsUICallback Proxy";
		$actionOptions[7] = "setCurrentFileTypeOption Proxy";
		$actionOptions[8] = buildReadableFileFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
	  }
      case "Save": 
	  {
		$gv_operationMode = "SaveAs";
		if (`optionVar -exists defaultFileSaveType`) 
		{
			$saveType = `optionVar -q defaultFileSaveType`;
		}
		$actionOptions[0] = (uiRes("m_projectViewer.kSave"));
		$actionOptions[1] = $saveType;
		$actionOptions[2] = 0;
		$actionOptions[8] = buildDefaultMayaSaveFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
		break;
      }
      case "SaveAs": 
	  {
		if (`optionVar -exists defaultFileSaveType`) 
		{
			$saveType = `optionVar -q defaultFileSaveType`;
		}
		$actionOptions[0] = (uiRes("m_projectViewer.kSaveAs"));
		$actionOptions[1] = $saveType;
		$actionOptions[2] = 0;
		$actionOptions[3] = "fileOperationsOptionsUISetup SaveAs";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues SaveAs";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback SaveAs";
		$actionOptions[6] = "fileOperationsOptionsUICallback SaveAs";
		$actionOptions[7] = "setCurrentFileTypeOption SaveAs";
		$actionOptions[8] = buildDefaultMayaSaveFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
		break;
      }
      case "ExportAll": {
		if (`optionVar -exists defaultFileExportAllType`) {
			$saveType = `optionVar -q defaultFileExportAllType`;
		}
        $actionOptions[0] = (uiRes("m_projectViewer.kExportAll"));
        $actionOptions[1] = $saveType;
        $actionOptions[2] = "0";
		$actionOptions[3] = "fileOperationsOptionsUISetup ExportAll";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues ExportAll";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback ExportAll";
		$actionOptions[6] = "fileOperationsOptionsUICallback ExportAll";
		$actionOptions[7] = "setCurrentFileTypeOption ExportAll";
		$actionOptions[8] = buildWritableFileFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }
      case "ExportActive": {
		if (`optionVar -exists defaultFileExportActiveType`) {
			$saveType = `optionVar -q defaultFileExportActiveType`;
		}
        $actionOptions[0] = (uiRes("m_projectViewer.kExportSelection"));
        $actionOptions[1] = $saveType;
        $actionOptions[2] = "0";
		$actionOptions[3] = "fileOperationsOptionsUISetup ExportActive";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues ExportActive";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback ExportActive";
		$actionOptions[6] = "fileOperationsOptionsUICallback ExportActive";
		$actionOptions[7] = "setCurrentFileTypeOption ExportActive";
		$actionOptions[8] = buildWritableFileFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }	  
      case "ExportSelectionAsReference": {
		if (`optionVar -exists defaultFileExportSelectionAsReferenceType`) {
			$saveType = `optionVar -q defaultFileExportSelectionAsReferenceType`;
		}
		string $MayaAscii     = (uiRes("m_projectViewer.kMayaAscii"));
		string $MayaBinary    = (uiRes("m_projectViewer.kMayaBinary"));
		$MayaAscii += " (*.ma)";
		$MayaBinary += " (*.mb)";


        $actionOptions[0] = (uiRes("m_projectViewer.kExportSelectionAsReference"));
        $actionOptions[1] = $saveType;
        $actionOptions[2] = "0";
		$actionOptions[3] = "fileOperationsOptionsUISetup ExportSelectionAsReference";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues ExportSelectionAsReference";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback ExportSelectionAsReference";
		$actionOptions[6] = "fileOperationsOptionsUICallback ExportSelectionAsReference";
		$actionOptions[7] = "setCurrentFileTypeOption ExportSelectionAsReference";
		$actionOptions[8] = $MayaAscii + ";;" + $MayaBinary;
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }
	case "ExportOfflineFileFromRefEd":		  
      case "ExportOfflineFile": {
		if (`optionVar -exists defaultFileExportEditsType`) {
			$saveType = `optionVar -q defaultFileExportEditsType`;
		}
        $actionOptions[0] = (uiRes("m_projectViewer.kExportOfflineFile"));
        $actionOptions[1] = $saveType;
        $actionOptions[2] = "0";
		$actionOptions[3] = "fileOperationsOptionsUISetup " + $newAction;
        $actionOptions[4] = "fileOperationsOptionsUIInitValues " + $newAction;
		$actionOptions[5] = "fileOperationsSelectionChangedCallback " + $newAction;
		$actionOptions[6] = "fileOperationsOptionsUICallback " + $newAction;
		$actionOptions[7] = "setCurrentFileTypeOption " + $newAction;
		$actionOptions[8] = buildDefaultReadWriteOfflineEditFilterList();
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "offlineEdit"`;
        break;
      }
	  case "ApplyOfflineFileFromRefEd":
	  case "ApplyOfflineFile":
	  {
		if (`optionVar -exists defaultFileApplyEditsType`) {
			$readType = `optionVar -q defaultFileApplyEditsType`;
		}
        $actionOptions[0] = (uiRes("m_projectViewer.kAssignOfflineFile"));
        $actionOptions[1] = $readType;
        $actionOptions[2] = "1";
		$actionOptions[3] = "fileOperationsOptionsUISetup " + $newAction;
        $actionOptions[4] = "fileOperationsOptionsUIInitValues " + $newAction;
		$actionOptions[5] = "fileOperationsSelectionChangedCallback " + $newAction;
		$actionOptions[6] = "fileOperationsOptionsUICallback " + $newAction;
		$actionOptions[7] = "setCurrentFileTypeOption " + $newAction;
		$actionOptions[8] = buildDefaultReadWriteOfflineEditFilterList();		
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }
      case "CreateReference":
	  {
		if (`optionVar -exists defaultFileCreateReferenceType`) {
			$saveType = `optionVar -q defaultFileCreateReferenceType`;
		}
        $actionOptions[0] = $reference;
        $actionOptions[1] = $saveType;
        $actionOptions[2] = "1";
		$actionOptions[9] = `setWorkingDirectory $workspace $readType "scene"`;
        break;
      }
      case "AssignTemplate":
	  {
		$actionOptions[0] = (uiRes("m_projectViewer.kAssignTemplate"));
		$actionOptions[1] = "";
		$actionOptions[2] = "1";
		$actionOptions[3] = "fileOperationsOptionsUISetup AssignTemplate";
        $actionOptions[4] = "fileOperationsOptionsUIInitValues AssignTemplate";
		$actionOptions[5] = "fileOperationsSelectionChangedCallback AssignTemplate";
		$actionOptions[6] = "fileOperationsOptionsUICallback AssignTemplate";
		$actionOptions[7] = "setCurrentFileTypeOption AssignTemplate";
		$actionOptions[8] = buildContainerTemplateFilterList();		
		$actionOptions[9] = `setWorkingDirectory $workspace "templates" ""`;
		break;
      }
	}

    return $actionOptions;
}

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// craExportAllSelected end


// craSceneFilePath start
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
global proc craSceneFilePath() 
{
	if (`window -exists craSceneFilePathWin`)
		deleteUI craSceneFilePathWin;
	
	window -w 650 -h 30 -title " Open/Import/Reference Path..." -tlb 1 -tb 1 -s 0 craSceneFilePathWin;
	frameLayout -bs "etchedIn" -mw 2 -mh 2 -lv 0;
		frameLayout -bs "etchedIn" -mw 3 -mh 3 -lv 0;
			rowLayout -nc 5 -adj 2;
				text -l " File path:";
				textField -w 400  
					-cc "setFocus craSceneFilePathBTN;textField -e -ann `textField -q -text craSceneFilePathTextField` craSceneFilePathTextField;" -enterCommand "craSceneFilePathCmd \"open\";evalDeferred -lp \"deleteUI craSceneFilePathWin\";"
					-ann "Right-click for recent files" 
				craSceneFilePathTextField;
					popupMenu -p "craSceneFilePathTextField" -mm 1 -b 3 -postMenuCommand "buildRecentFileMenu craSceneFilePathPUM;menuItem -d 1 -p \"craSceneFilePathPUM\"; menuItem -p \"craSceneFilePathPUM\" -l \"Open Scene Options\" -c \"OpenSceneOptions\";" craSceneFilePathPUM;
				setParent -m ..;
				button -h 20 -bgc .4 .68 .4 -w 50 -command "craSceneFilePathCmd \"open\"" -label "Open" craSceneFilePathBTN;
				button -h 20 -bgc .88 .3 .3 -w 50 -command "craSceneFilePathCmd \"import\"" -label "Import" craImportFilePathBTN;
				button -h 20 -bgc .47 .7 1 -w 60 -command "craSceneFilePathCmd \"reference\"" -label "Reference" craReferenceFilePathBTN;
			setParent ..;
		setParent ..;
	setParent ..;
	showWindow craSceneFilePathWin;
}

global proc craSceneFilePathCmd( string $mode )
{
	string $path = `textField -q -text craSceneFilePathTextField`;
	string $flag = "-" + $mode;
	
	if ( filetest("-f", $path) ) 
	{ 	
		string $nativePathName = `fromNativePath $path`;
		string $namespace = basenameEx($path);
		if($mode == "open")
		{
			file -f $flag $nativePathName;
			addRecentFile($nativePathName, "Best Guess");
		}
		else
			file -f $flag -ns $namespace $nativePathName;
		
		if($mode == "reference")
			print ($nativePathName + " has been " + $mode + "d.\n");
		else
			print ($nativePathName + " has been " + $mode + "ed.\n");
	}
	else
		warning "File does not exist!\n";
}
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// craSceneFilePath end

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// create XPM icons start
global proc string craXPMDataToString(string $xpmData[])
{
        string $iconData = "";
        int $lines = size($xpmData);

        for($i=0; $i < $lines; $i++)
		$iconData+=($xpmData[$i] + "\n");

        return $iconData;
}
global proc craXPMCreator(string $outputFolder,string $outputFile,string $xpmData[])
{
		int $fileId = `fopen ( $outputFolder + $outputFile) "w"`;
		fprint $fileId (craXPMDataToString($xpmData));
		fclose $fileId;
}
// create XPM icons end
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////