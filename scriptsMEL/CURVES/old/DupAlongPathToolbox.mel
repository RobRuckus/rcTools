// Maya 2012 Version

global proc DupAlongPath()
{
	string $aObj[];
	string $group;
	string $geom = `textField -query -text DAPtextFieldGeom`;
	string $curve = `textField -query -text DAPtextFieldCurve`;
	
	// check options
	
	int $iEndQuantity = `intSliderGrp -query -value DAPintSliderQuantity`;
	
	int $iConstrainRotateX = `checkBoxGrp -q -value1 DUPcheckBoxGroupRotateConstrain`;
	int $iConstrainRotateY = `checkBoxGrp -q -value2 DUPcheckBoxGroupRotateConstrain`;
	int $iConstrainRotateZ = `checkBoxGrp -q -value3 DUPcheckBoxGroupRotateConstrain`;
	int $iRotateBehavior = `radioButtonGrp -q -sl DUPradioButtonBehaviorRotate`;
	
	int $iConstrainScaleX = `checkBoxGrp -q -value1 DUPcheckBoxGroupScaleConstrain`;
	int $iConstrainScaleY = `checkBoxGrp -q -value2 DUPcheckBoxGroupScaleConstrain`;
	int $iConstrainScaleZ = `checkBoxGrp -q -value3 DUPcheckBoxGroupScaleConstrain`;
	int $iScaleBehavior = `radioButtonGrp -q -sl DUPradioButtonBehaviorScale`;
	
	int $iFrontTwistValue = `intSliderGrp -query -value DAPintSliderFrontTwist`;
	int $iFrontTwist = `intSliderGrp -query -value DAPintSliderFrontTwist`;
	int $iUpTwistValue = `intSliderGrp -query -value DAPintSliderUpTwist`;
	int $iUpTwist = `intSliderGrp -query -value DAPintSliderUpTwist`;
	int $iSideTwistValue = `intSliderGrp -query -value DAPintSliderSideTwist`;
	int $iSideTwist = `intSliderGrp -query -value DAPintSliderSideTwist`;
	
	float $scaleX = `floatSliderGrp -query -value DAPfloatSliderScaleX`;
	float $scaleY = `floatSliderGrp -query -value DAPfloatSliderScaleY`;
	float $scaleZ = `floatSliderGrp -query -value DAPfloatSliderScaleZ`;
	
	float $scatter = `floatSliderGrp -query -value DAPfloatSliderScatter`;
	int $iScatterX = `checkBoxGrp -q -value1 DUPcheckBoxGroupScatter`;
	int $iScatterY = `checkBoxGrp -q -value2 DUPcheckBoxGroupScatter`;
	int $iScatterZ = `checkBoxGrp -q -value3 DUPcheckBoxGroupScatter`;
	
	int $iDupType = `radioButtonGrp -q -select DAPdupType`;
	int $iFollowAxis = `radioButtonGrp -q -select DAPfollowAxis`;
	int $iUpAxis = `radioButtonGrp -q -select DAPupAxis`;
	int $iInvertFollow = `radioButtonGrp -q -select DAPinvertFollow`;
	int $iInvertUp = `radioButtonGrp -q -select DAPinvertUp`;
	int $iWorldUpType = `radioButtonGrp -q -select DAPworldUpType`;
	string $followAxis;
	string $upAxis;
	int $invertFollow;
	int $invertUp;
	string $worldUpType;
	
	// update optionVars
	
	optionVar -stringValue DAP_Object $geom;
	optionVar -stringValue DAP_Curve $curve;
	optionVar -intValue DAP_Quantity $iEndQuantity;
	optionVar -intValue DAP_TwistFront $iFrontTwistValue;
	optionVar -intValue DAP_TwistUp $iUpTwistValue;
	optionVar -intValue DAP_TwistSide $iSideTwistValue;
	optionVar -intValue DAP_ConstrainRotateX $iConstrainRotateX;
	optionVar -intValue DAP_ConstrainRotateY $iConstrainRotateY;
	optionVar -intValue DAP_ConstrainRotateZ $iConstrainRotateZ;
	optionVar -floatValue DAP_ScaleX $scaleX;
	optionVar -floatValue DAP_ScaleY $scaleY;
	optionVar -floatValue DAP_ScaleZ $scaleZ;
	optionVar -intValue DAP_ConstrainScaleX $iConstrainScaleX;
	optionVar -intValue DAP_ConstrainScaleY $iConstrainScaleY;
	optionVar -intValue DAP_ConstrainScaleZ $iConstrainScaleZ;
	optionVar -floatValue DAP_Scatter $scatter;
	optionVar -intValue DAP_ScatterX $iScatterX;
	optionVar -intValue DAP_ScatterY $iScatterY;
	optionVar -intValue DAP_ScatterZ $iScatterZ;
	optionVar -intValue DAP_DupType $iDupType;
	optionVar -intValue DAP_FollowAxis $iFollowAxis;
	optionVar -intValue DAP_UpAxis $iUpAxis;
	optionVar -intValue DAP_InvertFollow $iInvertFollow;
	optionVar -intValue DAP_InvertUp $iInvertUp;
	optionVar -intValue DAP_WorldUpType $iWorldUpType;
	optionVar -intValue DAP_RotateBehavior $iRotateBehavior;
	optionVar -intValue DAP_ScaleBehavior $iScaleBehavior;
	
	// setup names for group and motion paths
	
	string $geomNew[];
	string $curveNew[];
	tokenize $geom "|" $geomNew;
	tokenize $curve "|" $curveNew;
	
	int $lastGeomToken = (size ($geomNew) - 1);
	int $lastCurveToken = (size ($curveNew) - 1);
	
	string $group = ($geomNew[$lastGeomToken] + "_on_" + $curveNew[$lastCurveToken]);
	string $motionPathNew = ($group + "Path");
	
	// check for object and curve
	
	if ($geom == "Assign Object")
	{
		warning "No object assigned. Select object you wish to duplicate and click the \"Object\" button to assign it.";
		textField -edit -bgc .86 .81 .53 DAPtextFieldGeom;
		return;
	}
	
	if (`objExists $geom` == 0)
	{
		warning ($geomNew[$lastGeomToken] + " does not exist.  Assign a new object.");
		textField -edit -bgc .86 .81 .53 DAPtextFieldGeom;
		return;
	}
	
	textField -edit -bgc .27 .27 .27 DAPtextFieldGeom;
	
	if ($curve == "Assign Curve")
	{
		warning "No curve assigned. Select curve you wish to duplicate along and click the \"Curve\" button to assign it.";
		textField -edit -bgc .86 .81 .53 DAPtextFieldCurve;
		return;
	}
	
	if (`objExists $curve` == 0)
	{
		warning ($curveNew[$lastCurveToken] + " does not exist. Assign a new curve.");
		textField -edit -bgc .86 .81 .53 DAPtextFieldCurve;
		return;
	}
	
	textField -edit -bgc .27 .27 .27 DAPtextFieldCurve;
	
	// check options
	
	float $scaleLocal[] = `xform -query -relative -scale $geom`;
	float $scaleXvalue = (`floatSliderGrp -query -value DAPfloatSliderScaleX`) * $scaleLocal[0];
	float $scaleX = (`floatSliderGrp -query -value DAPfloatSliderScaleX`) * $scaleLocal[0];
	float $scaleYvalue = (`floatSliderGrp -query -value DAPfloatSliderScaleY`) * $scaleLocal[1];
	float $scaleY = (`floatSliderGrp -query -value DAPfloatSliderScaleY`) * $scaleLocal[1];
	float $scaleZvalue = (`floatSliderGrp -query -value DAPfloatSliderScaleZ`) * $scaleLocal[2];
	float $scaleZ = (`floatSliderGrp -query -value DAPfloatSliderScaleZ`) * $scaleLocal[2];
	
	// setup timer
	
	int $iMotionPathNext = 1;
	int $iStart = 1;
	
	// cleanup old stuff
	
	if (`objExists ($group)` == 1)
	{
		delete ($group);
	}
	
	if (`objExists ($motionPathNew + "*")` == 1)
	{
		cycleCheck -e off;
		delete ($motionPathNew + "*");
		cycleCheck -e on;
	}
	
	// switches from the UI
	
	switch ($iFollowAxis)
	{
		case 1:
			$followAxis = "X";
			break;
		case 2:
			$followAxis = "Y";
			break;
		case 3:
			$followAxis = "Z";
			break;
	}
	
	switch ($iUpAxis)
	{
		case 1:
			$upAxis = "X";
			break;
		case 2:
			$upAxis = "Y";
			break;
		case 3:
			$upAxis = "Z";
			break;
	}
	
	switch ($iWorldUpType)
	{
		case 1:
			$worldUpType = "scene";
			break;
		case 2:
			$worldUpType = "normal";
			break;
	}
	
	switch ($iInvertFollow)
	{
		case 1:
			$invertFollow = 0;
			break;
		case 2:
			$invertFollow = 1;
			break;
	}
	
	switch ($iInvertUp)
	{
		case 1:
			$invertUp = 0;
			break;
		case 2:
			$invertUp = 1;
			break;
	}

	// duplicate object

	group -empty;
	rename $group;

	select $geom;
	
	if ($iDupType == 1)
	{
		duplicate;
	}
	else
	{
		instance;
	}
	
	string $aObj[] = `ls -sl`;
	parent $aObj[0] $group;

	for ($i = 1; $i < $iEndQuantity; ++$i)
	{
		if ($iDupType == 1)
		{
			duplicate;
		}
		else
		{
			instance;
		}
	}
	
	// select children of the group
	
	select $group;
	string $children[] = `listRelatives -children`;
	select $children;

	string $aObj[] = `ls -sl`;
	
	// moving currentTime to number equal to # of duplicates because pathAnimation is tied to it

	currentTime $iEndQuantity;

	// scale constrain options
		
	floatSliderGrp -edit -bgc .27 .27 .27 -enable 1 DAPfloatSliderScaleX;
	floatSliderGrp -edit -bgc .27 .27 .27 -enable 1 DAPfloatSliderScaleY;
	floatSliderGrp -edit -bgc .27 .27 .27 -enable 1 DAPfloatSliderScaleZ;

	// Remember Mayas Animation Preferences
		
	string $tangentInSetting[] = `keyTangent -query -global -itt`;
	string $tangentOutSetting[] = `keyTangent -query -global -ott`;
	
	// Override Mayas Animation Preferences
	
	keyTangent -global -itt linear;
	keyTangent -global -ott linear;
	
	// attach everything to motion path at different progressing start and end points

	for ($obj in $aObj)
	{
		int $iStartNext;
		int $iEndNext;
		
		// random rotate
	
		if ($iRotateBehavior == 3)
		{
			int $randomFrontTwist = `rand $iFrontTwistValue`;
			int $randomUpTwist = `rand $iUpTwistValue`;
			int $randomSideTwist = `rand $iSideTwistValue`;
			
			$iFrontTwist = (`PositiveNegative` + $randomFrontTwist);
			$iUpTwist = (`PositiveNegative` + $randomUpTwist);
			$iSideTwist = (`PositiveNegative` + $randomSideTwist);
		}
		
		// random scale
		
		if ($iScaleBehavior == 3)
		{
			$scaleX = (`rand ($scaleXvalue - 1)` + 1);
			$scaleY = (`rand ($scaleYvalue - 1)` + 1);
			$scaleZ = (`rand ($scaleZvalue - 1)` + 1);
		}
		
		if ($iConstrainScaleX == 1 && $iConstrainScaleY == 1 && $iConstrainScaleZ == 1)
		{
			$scaleZ = $scaleX;
			$scaleY = $scaleX;
			floatSliderGrp -edit -bgc .15 .15 .15 -enable 0 DAPfloatSliderScaleY;
			floatSliderGrp -edit -bgc .15 .15 .15 -enable 0 DAPfloatSliderScaleZ;
		}
		
		if ($iConstrainScaleX == 1 && $iConstrainScaleY == 1)
		{
			$scaleY = $scaleX;
			floatSliderGrp -edit -bgc .15 .15 .15 -enable 0 DAPfloatSliderScaleY;
		}
		
		if ($iConstrainScaleY == 1 && $iConstrainScaleZ == 1)
		{
			$scaleZ = $scaleY;
			floatSliderGrp -edit -bgc .15 .15 .15 -enable 0 DAPfloatSliderScaleZ;
		}
		
		if ($iConstrainScaleX == 1 && $iConstrainScaleZ == 1)
		{
			$scaleZ = $scaleX;
			floatSliderGrp -edit -bgc .15 .15 .15 -enable 0 DAPfloatSliderScaleZ;
		}
		
		select $obj;
		
		scale $scaleX $scaleY $scaleZ;
		
		// attach to path
		
		pathAnimation
		 -fractionMode true
		 -followAxis $followAxis
		 -upAxis $upAxis
		 -worldUpType $worldUpType
		 -inverseUp $invertUp
		 -inverseFront $invertFollow
		 -startTimeU $iStartNext
		 -endTimeU $iEndNext
		 $curve
		 $obj;
		
		// custom renaming of motionPath for safety and deleting animCurve to remove timeline dependancy
		
		string $motionPathOriginal[] = `listConnections -s 1 -t motionPath`;
		select $motionPathOriginal[0];
		string $animCurve[] = `listConnections -s 1 -t animCurve`;
		delete $animCurve;
		rename $motionPathOriginal[0] ($motionPathNew + "1");
		
		// apply twist
		
		setAttr ($motionPathNew + $iMotionPathNext + ".frontTwist") $iFrontTwist;
		setAttr ($motionPathNew + $iMotionPathNext + ".upTwist") $iUpTwist;
		setAttr ($motionPathNew + $iMotionPathNext + ".sideTwist") $iSideTwist;

		// additive rotate
		
		if ($iRotateBehavior == 2)
		{
			$iFrontTwist = $iFrontTwistValue + $iFrontTwist;
			$iUpTwist = $iUpTwistValue + $iUpTwist;
			$iSideTwist = $iSideTwistValue + $iSideTwist;
		}

		// additive scale
		
		if ($iScaleBehavior == 2)
		{
			$scaleX = ($scaleXvalue + $scaleX - 1);
			$scaleY = ($scaleYvalue + $scaleY - 1);
			$scaleZ = ($scaleZvalue + $scaleZ - 1);
		}
		
		// orient constraints
		
		if ($iConstrainRotateX == 1 || $iConstrainRotateY == 1 || $iConstrainRotateZ == 1)
		{
			if ($iConstrainRotateX == 1 && $iConstrainRotateY == 0 && $iConstrainRotateZ == 0)
			{
				orientConstraint -offset 0 0 0 -skip y -skip z -weight 1 $geom $obj;
			}
			
			if ($iConstrainRotateX == 0 && $iConstrainRotateY == 1 && $iConstrainRotateZ == 0)
			{
				orientConstraint -offset 0 0 0 -skip x -skip z -weight 1 $geom $obj;
			}
			
			if ($iConstrainRotateX == 0 && $iConstrainRotateY == 0 && $iConstrainRotateZ == 1)
			{
				orientConstraint -offset 0 0 0 -skip x -skip y -weight 1 $geom $obj;
			}
			
			if ($iConstrainRotateX == 0 && $iConstrainRotateY == 1 && $iConstrainRotateZ == 1)
			{
				orientConstraint -offset 0 0 0 -skip x -weight 1 $geom $obj;
			}
			
			if ($iConstrainRotateX == 1 && $iConstrainRotateY == 0 && $iConstrainRotateZ == 1)
			{
				orientConstraint -offset 0 0 0 -skip y -weight 1 $geom $obj;
			}
			
			if ($iConstrainRotateX == 1 && $iConstrainRotateY == 1 && $iConstrainRotateZ == 0)
			{
				orientConstraint -offset 0 0 0 -skip z -weight 1 $geom $obj;
			}
			
			if ($iConstrainRotateX == 1 && $iConstrainRotateY == 1 && $iConstrainRotateZ == 1)
			{
				orientConstraint -offset 0 0 0 -weight 1 $geom $obj;
			}
		}
		
		// scatter
		
		$randomScatter = `rand $scatter`;
		$randomScatter = (`PositiveNegative` + $randomScatter);
		select $obj;
		
		if ($iScatterX == 1)
		{
			move -r -ws -wd $randomScatter 0 0;
		}
		
		if ($iScatterY == 1)
		{
			move -r -ws -wd 0 $randomScatter 0;
		}
		
		if ($iScatterZ == 1)
		{
			move -r -ws -wd 0 0 $randomScatter;
		}
		
		// add 1 to place next object further along the path
		
		$iMotionPathNext = ++$iMotionPathNext;
		$iStartNext = ++$iStart;
		$iEndNext = ++$iEndQuantity;
	}
	
	currentTime 1;
	
	select $group;
	
	// Return Mayas Animation Preferences to normal
		
	keyTangent -global -itt $tangentInSetting;
	keyTangent -global -ott $tangentOutSetting;
}



// random positive or negative
global proc string PositiveNegative()
{
	string $positiveNegative = "";
	int $posNeg = `rand 2`;

	if ($posNeg == 0)
	{
		$positiveNegative = "-";
	}
	
	return $positiveNegative;
}



// Front and Up axis can not be the same, if they are, switch the other one.

global proc SwitchAxisUp()
{
	if (`radioButtonGrp -q -select DAPupAxis` == `radioButtonGrp -q -select DAPfollowAxis`)
	{
		if (`radioButtonGrp -q -select DAPupAxis` == 1 && `radioButtonGrp -q -select DAPfollowAxis` == 1)
		{
			radioButtonGrp -edit -select 2 DAPfollowAxis;
		}
		
		if (`radioButtonGrp -q -select DAPupAxis` == 2 && `radioButtonGrp -q -select DAPfollowAxis` == 2)
		{
			radioButtonGrp -edit -select 1 DAPfollowAxis;
		}
		
		if (`radioButtonGrp -q -select DAPupAxis` == 3 && `radioButtonGrp -q -select DAPfollowAxis` == 3)
		{
			radioButtonGrp -edit -select 2 DAPfollowAxis;
		}
	}
}

global proc SwitchAxisFollow()
{
	if (`radioButtonGrp -q -select DAPupAxis` == `radioButtonGrp -q -select DAPfollowAxis`)
	{
		if (`radioButtonGrp -q -select DAPupAxis` == 1 && `radioButtonGrp -q -select DAPfollowAxis` == 1)
		{
			radioButtonGrp -edit -select 2 DAPupAxis;
		}
		
		if (`radioButtonGrp -q -select DAPupAxis` == 2 && `radioButtonGrp -q -select DAPfollowAxis` == 2)
		{
			radioButtonGrp -edit -select 1 DAPupAxis;
		}
		
		if (`radioButtonGrp -q -select DAPupAxis` == 3 && `radioButtonGrp -q -select DAPfollowAxis` == 3)
		{
			radioButtonGrp -edit -select 2 DAPupAxis;
		}
	}
}



// update text field in the UI

global proc string AssignGeom()
{
	string $aObj[] = `ls -sl -l`;
	string $geomGroup = $aObj[0];
	
	if (size($aObj) == 0)
	{
		$geomGroup = "Assign Object";
		warning "No object selected. Select object you wish to duplicate and click the \"Object\" button to assign it.";
	}
	else
	{
		textField -edit -bgc .27 .27 .27 DAPtextFieldGeom;
	}
	
	return `textField -edit -text $geomGroup DAPtextFieldGeom`;
}

global proc string AssignCurve()
{
	string $aObj[] = `ls -sl -l`;
	string $geomGroup = $aObj[0];
	
	if (size($aObj) == 0)
	{
		CVCurveTool;
		$geomGroup = "Assign Curve";
		warning "No curve selected, create a curve and press enter.";
	}
	else
	{
		textField -edit -bgc .27 .27 .27 DAPtextFieldCurve;
	}
	
	return `textField -edit -text $geomGroup DAPtextFieldCurve`;
}



global proc DAPfloatStateSwitch()
{
	if ( `optionVar -q DAP_FloatingState` == 1 )
		optionVar -intValue DAP_FloatingState 0;
	else
		optionVar -intValue DAP_FloatingState 1;
}



global proc DAPextrudeAlong()
{
	string $geomNew[];
	string $geom = `textField -query -text DAPtextFieldGeom`;
	string $curve = `textField -query -text DAPtextFieldCurve`;
	
	tokenize $geom "|" $geomNew;
	int $lastGeomToken = (size ($geomNew) - 1);
	$geomName = $geomNew[$lastGeomToken];

	select -hierarchy $geom;
	performFreezeTransformations(0);
	$geomHierarchy = `ls -sl`;
	float $rotatePivot[] = `xform -q -rotatePivot $geom`;
	float $boundingBox[] = `polyEvaluate -boundingBox $geomHierarchy`;
	xform -cp;
	move -x $boundingBox[0] 0 0 ($geom + ".scalePivot") ($geom + ".rotatePivot");
	float $geomLength = `abs $boundingBox[0]` - `abs $boundingBox[1]`;
	$curveLength = `arclen $curve`;
	int $duplicate = ($curveLength / `abs $geomLength`) + .5;
	float $scaleMultiplier = $curveLength / ($duplicate * `abs $geomLength`);
	duplicate $geom;
	$newGeom = `ls -sl`;
	select $newGeom;
	group -name ($geom + "_strip");
	$stripGroup = `ls -sl`;
	
	for ($i = 1; $i < $duplicate; ++$i)
	{
		duplicate $newGeom;
		move -r `abs $geomLength` 0 0 $newGeom;
	}
	
	select -hierarchy $stripGroup;
	select -deselect $stripGroup;
	polyUnite -ch 0 $stripGroup;
	$newGeom = `ls -sl`;
	PolySelectConvert 3;
	polyMergeVertex  -d 0.01 -am 1 -ch 0;
	select $newGeom;
	scale -r $scaleMultiplier 1 1 $newGeom;
	rename ($geom + "_extruded");
	$newGeom = `ls -sl`;
	float $boundingBox[] = `polyEvaluate -boundingBox $newGeom[0]`;
	xform -cp;
	move -x $boundingBox[0] 0 0 ($newGeom[0] + ".scalePivot") ($newGeom[0] + ".rotatePivot");
	select -add $curve;
	pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType "scene" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
	flow -divisions ($duplicate * 3) 2 2 -objectCentered 0 -localCompute 1 -localDivisions 2 2 2 $newGeom;
}



// UI for duplicating along path

global proc DupAlongPathToolbox()
{
	string $geom = "Assign Object";
	string $curve = "Assign Curve";
	int $iQuantity;
	int $fCollapseRotate;
	int $fCollapseScale;
	int $fCollapseScatter;
	int $fCollapseOptions;
	int $fFloatingState;
	int $fTwistFront;
	int $fTwistUp;
	int $fTwistSide;
	int $fConstrainRotateX;
	int $fConstrainRotateY;
	int $fConstrainRotateZ;
	int $iRotateBehavior = 1;
	int $fConstrainScaleX;
	int $fConstrainScaleY;
	int $fConstrainScaleZ;
	int $iScaleBehavior = 1;
	float $scaleX = 1;
	float $scaleY = 1;
	float $scaleZ = 1;
	float $scatter;
	int $scatterX;
	int $scatterY;
	int $scatterZ;
	int $iDupType = 1;
	int $iFollowAxis = 1;
	int $iUpAxis = 2;
	int $iInvertFollow = 1;
	int $iInvertUp = 1;
	int $iWorldUpType = 1;
	
	if ( `optionVar -exists DAP_Object` )
		$geom = `optionVar -q DAP_Object`;
	else
		optionVar -stringValue DAP_Object $geom;
		
	if ( `optionVar -exists DAP_Curve` )
		$curve = `optionVar -q DAP_Curve`;
	else
		optionVar -stringValue DAP_Curve $curve;
		
	if ( `optionVar -exists DAP_Quantity` )
		$iQuantity = `optionVar -q DAP_Quantity`;
	else
		optionVar -intValue DAP_Quantity $iQuantity;
	
	if ( `optionVar -exists DAP_CollapseRotate` )
		$fCollapseRotate = `optionVar -q DAP_CollapseRotate`;
	else
		optionVar -intValue DAP_CollapseRotate $fCollapseRotate;
		
	if ( `optionVar -exists DAP_CollapseScale` )
		$fCollapseScale = `optionVar -q DAP_CollapseScale`;
	else
		optionVar -intValue DAP_CollapseScale $fCollapseScale;
		
	if ( `optionVar -exists DAP_CollapseScatter` )
		$fCollapseScatter = `optionVar -q DAP_CollapseScatter`;
	else
		optionVar -intValue DAP_CollapseScatter $fCollapseScatter;
		
	if ( `optionVar -exists DAP_CollapseOptions` )
		$fCollapseOptions = `optionVar -q DAP_CollapseOptions`;
	else
		optionVar -intValue DAP_CollapseOptions $fCollapseOptions;
	
	if ( `optionVar -exists DAP_FloatingState` )
		$fFloatingState = `optionVar -q DAP_FloatingState`;
	else
		optionVar -intValue DAP_FloatingState $fFloatingState;
		
	if ( `optionVar -exists DAP_TwistFront` )
		$fTwistFront = `optionVar -q DAP_TwistFront`;
	else
		optionVar -intValue DAP_TwistFront $fTwistFront;
		
	if ( `optionVar -exists DAP_TwistUp` )
		$fTwistUp = `optionVar -q DAP_TwistUp`;
	else
		optionVar -intValue DAP_TwistUp $fTwistUp;
		
	if ( `optionVar -exists DAP_TwistSide` )
		$fTwistSide = `optionVar -q DAP_TwistSide`;
	else
		optionVar -intValue DAP_TwistSide $fTwistSide;
		
	if ( `optionVar -exists DAP_ConstrainRotateX` )
		$fConstrainRotateX = `optionVar -q DAP_ConstrainRotateX`;
	else
		optionVar -intValue DAP_ConstrainRotateX $fConstrainRotateX;
		
	if ( `optionVar -exists DAP_ConstrainRotateY` )
		$fConstrainRotateY = `optionVar -q DAP_ConstrainRotateY`;
	else
		optionVar -intValue DAP_ConstrainRotateY $fConstrainRotateY;
		
	if ( `optionVar -exists DAP_ConstrainRotateZ` )
		$fConstrainRotateZ = `optionVar -q DAP_ConstrainRotateZ`;
	else
		optionVar -intValue DAP_ConstrainRotateZ $fConstrainRotateZ;
		
	if ( `optionVar -exists DAP_ConstrainScaleX` )
		$fConstrainScaleX = `optionVar -q DAP_ConstrainScaleX`;
	else
		optionVar -intValue DAP_ConstrainScaleX $fConstrainScaleX;
		
	if ( `optionVar -exists DAP_ConstrainScaleY` )
		$fConstrainScaleY = `optionVar -q DAP_ConstrainScaleY`;
	else
		optionVar -intValue DAP_ConstrainScaleY $fConstrainScaleY;
		
	if ( `optionVar -exists DAP_ConstrainScaleZ` )
		$fConstrainScaleZ = `optionVar -q DAP_ConstrainScaleZ`;
	else
		optionVar -intValue DAP_ConstrainScaleZ $fConstrainScaleZ;
		
	if ( `optionVar -exists DAP_ScaleX` )
		$scaleX = `optionVar -q DAP_ScaleX`;
	else
		optionVar -floatValue DAP_ScaleX $scaleX;
		
	if ( `optionVar -exists DAP_ScaleY` )
		$scaleY = `optionVar -q DAP_ScaleY`;
	else
		optionVar -floatValue DAP_ScaleY $scaleY;
		
	if ( `optionVar -exists DAP_ScaleZ` )
		$scaleZ = `optionVar -q DAP_ScaleZ`;
	else
		optionVar -floatValue DAP_ScaleZ $scaleZ;
		
	if ( `optionVar -exists DAP_RotateBehavior` )
		$iRotateBehavior = `optionVar -q DAP_RotateBehavior`;
	else
		optionVar -floatValue DAP_RotateBehavior $iRotateBehavior;
		
	if ( `optionVar -exists DAP_ScaleBehavior` )
		$iScaleBehavior = `optionVar -q DAP_ScaleBehavior`;
	else
		optionVar -floatValue DAP_ScaleBehavior $iScaleBehavior;
		
	if ( `optionVar -exists DAP_Scatter` )
		$scatter = `optionVar -q DAP_Scatter`;
	else
		optionVar -floatValue DAP_Scatter $scatter;
		
	if ( `optionVar -exists DAP_ScatterX` )
		$scatterX = `optionVar -q DAP_ScatterX`;
	else
		optionVar -intValue DAP_ScatterX $scatterX;
		
	if ( `optionVar -exists DAP_ScatterY` )
		$scatterY = `optionVar -q DAP_ScatterY`;
	else
		optionVar -intValue DAP_ScatterY $scatterY;
		
	if ( `optionVar -exists DAP_ScatterZ` )
		$scatterZ = `optionVar -q DAP_ScatterZ`;
	else
		optionVar -intValue DAP_ScatterZ $scatterZ;
		
	if ( `optionVar -exists DAP_DupType` )
		$iDupType = `optionVar -q DAP_DupType`;
	else
		optionVar -intValue DAP_DupType $iDupType;
		
	if ( `optionVar -exists DAP_FollowAxis` )
		$iFollowAxis = `optionVar -q DAP_FollowAxis`;
	else
		optionVar -intValue DAP_FollowAxis $iFollowAxis;
		
	if ( `optionVar -exists DAP_UpAxis` )
		$iUpAxis = `optionVar -q DAP_UpAxis`;
	else
		optionVar -intValue DAP_UpAxis $iUpAxis;
	
	if ( `optionVar -exists DAP_InvertFollow` )
		$iInvertFollow = `optionVar -q DAP_InvertFollow`;
	else
		optionVar -intValue DAP_InvertFollow $iInvertFollow;
	
	if ( `optionVar -exists DAP_InvertUp` )
		$iInvertUp = `optionVar -q DAP_InvertUp`;
	else
		optionVar -intValue DAP_InvertUp $iInvertUp;
		
	if ( `optionVar -exists DAP_WorldUpType` )
		$iWorldUpType = `optionVar -q DAP_WorldUpType`;
	else
		optionVar -intValue DAP_WorldUpType $iWorldUpType;

	string $window = "JGdupPathWindow";
	string $dock = "JGdupPathDock";
	
	if (`window -exists $window` == 1)
	{ 
		deleteUI $window;
	}
	
	if (`dockControl -exists $dock` == 1)
	{ 
		deleteUI $dock;
	}
	
	window -title "Duplicate Along Path" -s 0 $window;
		columnLayout -adj 0 -rs 4;
			
			rowColumnLayout -numberOfColumns 2 -columnAttach 1 "both" 5 -columnWidth 1 170 -columnWidth 2 70;
				textField -editable 0 -text $geom DAPtextFieldGeom;
				button -label "Object" -command "AssignGeom";
				textField -editable 0 -text $curve DAPtextFieldCurve;
				button -label "Curve" -command "AssignCurve";
				setParent ..;
				
			rowColumnLayout -numberOfColumns 1 -columnWidth 1 245;
				intSliderGrp -field true -label "Quantity" -changeCommand "DupAlongPath" -cw 1 45 -cw 2 30 -minValue 1 -maxValue 25 -fieldMinValue 1 -fieldMaxValue 999 -value $iQuantity DAPintSliderQuantity;
				button -label "Merged Duplicate (align object on X Axis)" -command "DAPextrudeAlong";
				setParent ..;
			
			frameLayout
				-label "ROTATE"
				-labelAlign "center"
				-li 4
				-width 245
				-borderStyle "etchedIn"
				-collapse $fCollapseRotate
				-collapsable 1
				-cc ("optionVar -intValue DAP_CollapseRotate 1")
				-ec ("optionVar -intValue DAP_CollapseRotate 0");
			
				rowColumnLayout -numberOfColumns 1 -columnWidth 1 240;
					intSliderGrp -field true -label "Front" -changeCommand "DupAlongPath" -cw 1 30 -cw 2 30 -minValue 0 -maxValue 360 -fieldMinValue 0 -fieldMaxValue 360 -value $fTwistFront DAPintSliderFrontTwist;
					intSliderGrp -field true -label "Up" -changeCommand "DupAlongPath" -cw 1 30 -cw 2 30 -minValue 0 -maxValue 360 -fieldMinValue 0 -fieldMaxValue 360 -value $fTwistUp DAPintSliderUpTwist;
					intSliderGrp -field true -label "Side" -changeCommand "DupAlongPath" -cw 1 30 -cw 2 30 -minValue 0 -maxValue 360 -fieldMinValue 0 -fieldMaxValue 360 -value $fTwistSide DAPintSliderSideTwist;
				
				rowColumnLayout -numberOfColumns 1 -columnAttach 1 "both" 5 -columnWidth 1 240;
					checkBoxGrp -numberOfCheckBoxes 3 -cw4 70 50 50 50 -label "Constrain" -labelArray3 "X" "Y" "Z" -valueArray3 $fConstrainRotateX $fConstrainRotateY $fConstrainRotateZ -changeCommand "DupAlongPath" DUPcheckBoxGroupRotateConstrain;
					radioButtonGrp -numberOfRadioButtons 3 -cw4 50 50 60 60 -sl $iRotateBehavior -label "Type" -labelArray3 "Fixed" "Additive" "Random" -changeCommand "DupAlongPath" DUPradioButtonBehaviorRotate;
					setParent ..;
				setParent ..;
			setParent ..;
			
			frameLayout
				-label "SCALE"
				-labelAlign "center"
				-li 4
				-width 245
				-borderStyle "etchedIn"
				-collapse $fCollapseScale
				-collapsable 1
				-cc ("optionVar -intValue DAP_CollapseScale 1")
				-ec ("optionVar -intValue DAP_CollapseScale 0");
			
				rowColumnLayout -numberOfColumns 1 -columnWidth 1 240;
					floatSliderGrp -field true -label "X" -changeCommand "DupAlongPath" -cw 1 15 -cw 2 30 -minValue 0 -maxValue 2 -fieldMinValue 0 -fieldMaxValue 10 -pre 2 -value $scaleX DAPfloatSliderScaleX;
					floatSliderGrp -field true -label "Y" -changeCommand "DupAlongPath" -cw 1 15 -cw 2 30 -minValue 0 -maxValue 2 -fieldMinValue 0 -fieldMaxValue 10 -pre 2 -value $scaleY DAPfloatSliderScaleY;
					floatSliderGrp -field true -label "Z" -changeCommand "DupAlongPath" -cw 1 15 -cw 2 30 -minValue 0 -maxValue 2 -fieldMinValue 0 -fieldMaxValue 10 -pre 2 -value $scaleZ DAPfloatSliderScaleZ;
				
				rowColumnLayout -numberOfColumns 1 -columnAttach 1 "both" 5 -columnWidth 1 235;
					checkBoxGrp -numberOfCheckBoxes 3 -cw4 70 50 50 50 -label "Constrain" -labelArray3 "X" "Y" "Z" -valueArray3 $fConstrainScaleX $fConstrainScaleY $fConstrainScaleZ -changeCommand "DupAlongPath" DUPcheckBoxGroupScaleConstrain;
					radioButtonGrp -numberOfRadioButtons 3 -cw4 50 50 60 60 -sl $iScaleBehavior -label "Type" -labelArray3 "Fixed" "Additive" "Random" -changeCommand "DupAlongPath" DUPradioButtonBehaviorScale;
					setParent ..;
				setParent ..;
			setParent ..;
			
			frameLayout
				-label "SCATTER"
				-labelAlign "center"
				-li 4
				-width 245
				-borderStyle "etchedIn"
				-collapse $fCollapseScatter
				-collapsable 1
				-cc ("optionVar -intValue DAP_CollapseScatter 1")
				-ec ("optionVar -intValue DAP_CollapseScatter 0");
			
				rowColumnLayout -numberOfColumns 1 -columnWidth 1 240;
					floatSliderGrp -field true -label "Range" -changeCommand "DupAlongPath" -cw 1 35 -cw 2 30 -minValue 0 -maxValue 100 -fieldMinValue 0 -fieldMaxValue 1000 -value $scatter DAPfloatSliderScatter;
					
				rowColumnLayout -numberOfColumns 1 -columnAttach 1 "both" 5 -columnWidth 1 235;
					checkBoxGrp -numberOfCheckBoxes 3 -cw4 70 50 50 50 -label "Direction" -labelArray3 "X" "Y" "Z" -valueArray3 $scatterX $scatterY $scatterZ -changeCommand "DupAlongPath" DUPcheckBoxGroupScatter;
					setParent ..;
				setParent ..;
			setParent ..;
			
			frameLayout
				-label "OPTIONS"
				-labelAlign "center"
				-li 4
				-width 245
				-borderStyle "etchedIn"
				-collapse $fCollapseOptions
				-collapsable 1
				-cc ("optionVar -intValue DAP_CollapseOptions 1")
				-ec ("optionVar -intValue DAP_CollapseOptions 0");
			
				rowColumnLayout -numberOfColumns 1 -columnAttach 1 "both" 5 -columnWidth 1 245;
					radioButtonGrp -numberOfRadioButtons 2 -cw3 70 50 60 -sl $iDupType -label "Duplicate" -labelArray2 "Copy" "Instance" -changeCommand "DupAlongPath" DAPdupType;
					radioButtonGrp -numberOfRadioButtons 3 -cw4 70 50 50 50 -sl $iFollowAxis -label "Front Axis"  -labelArray3 "X" "Y" "Z" -changeCommand "SwitchAxisFollow; DupAlongPath;" DAPfollowAxis;
					radioButtonGrp -numberOfRadioButtons 3 -cw4 70 50 50 50 -sl $iUpAxis -label "Up Axis" -labelArray3 "X" "Y" "Z" -changeCommand "SwitchAxisUp; DupAlongPath;"  DAPupAxis;
					radioButtonGrp -numberOfRadioButtons 2 -cw3 70 50 50 -sl $iInvertFollow -label "Front Invert" -labelArray2 "No" "Yes" -changeCommand "DupAlongPath" DAPinvertFollow;
					radioButtonGrp -numberOfRadioButtons 2 -cw3 70 50 50 -sl $iInvertUp -label "Up Invert" -labelArray2 "No" "Yes" -changeCommand "DupAlongPath" DAPinvertUp;
					radioButtonGrp -numberOfRadioButtons 2 -cw3 70 60 60 -sl $iWorldUpType -label "World Up" -labelArray2 "Scene" "Normal" -changeCommand "DupAlongPath" DAPworldUpType;
				setParent ..;
			setParent ..;
	
	dockControl
		-label "Duplicate Along Path Toolbox"
		-content $window
		-floating $fFloatingState
		-floatChangeCommand "DAPfloatStateSwitch"
		-area "right"
		-allowedArea "left"
		-allowedArea "right"
		$dock;
}