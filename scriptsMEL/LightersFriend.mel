//HEADER

/*
*********** Part of the Kludge Suite of Tools
*********** www.whetstonevfx.com

This tool creates a dockable window that lists all lights in the scene along with their most commonly-used controls.
    
the Lighter's Friend also contains a rollout for light creation and editing, which will be expanded in later versions.

Vray is not a priority for development, but will be supported in later versions

Copyright Ed Whetstone 2012 - www.whetstonevfx.com

This file is free to modify, distribute, and copy.  Just keep this header intact, and enjoy!

*/

//Spelling and Caps

global proc LightersFriend() {
  lightersFriend 0;
};

global proc lightersfriend() {
  lightersFriend 0;
};

// LAUNCH MAIN UI

global proc lightersFriend(int $isTechCheck){
  string $collapseSnapshot[];
  string $advSnapshot[];
  string $lf_progressUpdate;
  string $allLights[] = `lf_getAllLights`;
  string $allLightNames[];
  for($thisLight in $allLights){
      $allLightNames[size($allLightNames)] = `lf_getLightName $thisLight`;
  }
  string $allLightNameString = `stringArrayToString $allLightNames "+"`;
  int $progress = 0;
  int $lightID;
  int $progressAmt = 0;
  if (size($allLights) > 15) {
      $progress = 1;
      $progressAmt = (100 / size($allLights));
      $lf_progressUpdate = `progressWindow -title "Refreshing" -progress $progressAmt -status "............................................." -isInterruptable false`;
  }
  string $allvRayLights[];
  int $vrayLoaded = 0;
  int $docked = 0;
  int $retain = 0;
  
  //test string for window retention
  
  string $retainSolo = "None";
  
  //GET ALL GROUPS THAT CONTAIN LIGHTS
  
  string $allLightGroups[] = `lf_getAllGroups $allLights`;
  string $allGroupNameString = `stringArrayToString $allLightGroups "+"`;
  
  //CHECK FOR PREVIOUS LF WINDOW OPEN
  
  if ( `window -exists LightersFriendWindow`) {
    $retain = 1;
    $collapseSnapshot = `lf_getCollapsedList`;
    $advSnapshot = `lf_getAdvRolloutList`;
    if(`text -exists LF_SOLOED`){
        $retainSolo = `text -q -l LF_SOLOED`; 
        }
    deleteUI LightersFriendWindow;
  };
  
  //CHECK DOCKED STATUS
  
  if( `dockControl -exists LightersFriendDock`){
    $docked = 1;
    deleteUI LightersFriendDock;
    }
    
  //===================================================================
  //MAIN WINDOW AND UI LOGIC
  //===================================================================
  
  window -rtf 1 -t "Lighter's Friend v1.0 - EdW" -mnb 1 -mxb 1 -w 370 LightersFriendWindow;
    lf_menuBar "LightersFriendWindow" 0;
    scrollLayout -w 365 LF_MAIN_SCROLL;
    columnLayout -adjustableColumn 1 -w 345 -rowSpacing 0 LF_MAINCOLUMN;
    rowLayout -nc 3 -adj 3 -visible 0;
        button -w 100 -l "Refresh" -command "lightersFriend `text -q -l LF_TECHCHECK`" -ann "Rebuild the UI based on changes made in the scene" -ebg 1 -bgc .1 .2 .2;
            popupMenu;
                menuItem -l "dynamic refresh" -command "lf_dynRefresh";
        button -w 100 -l "Collapse All" -command ("lf_collapseAll 1") -ebg 1 -bgc .2 .1 .2 -ann "Collapse/expand all group frames" LF_COLLAPSEEXPAND;
        button -l "Dock This Window" -command ("lf_dockWindow") -ebg 1 -bgc .2 .2 .2 -ann "Dock or undock this window from the Maya UI" LF_DOCKTHIS;
    setParent ..;
    text -l $allLightNameString -visible 0 LF_ALLLIGHTS;
    text -l $allGroupNameString -visible 0 LF_GROUPLIST;
    text -l "" -visible 0 LF_LINKEDLIGHTS;
    text -l "" -visible 0 LF_COPYLINKBIN;
    text -l "" -visible 0 LF_COPYATTRSBIN;
    text -l $isTechCheck -visible 0 LF_TECHCHECK;
    text -l 0 -visible 0 LF_ISRFX;
    frameLayout -cll true -mw 5 -cl true -width 345 -l "CREATE / EDIT LIGHTS" -bv 1 -bs "etchedIn" -ec "lf_changeLFContext" -ebg 1 -bgc .4 .1 0 LF_CREATEMENU_FRAME;
            columnLayout -rowSpacing 0 -height 150 -visible 0 -ebg 1 -bgc .4 .25 .2 -adjustableColumn 1 LF_CREATE_FROM_CAMERA;
                iconTextStaticLabel -st "iconAndTextHorizontal" -i1 "out_lightList.png" -l "Create Lights:";
                rowColumnLayout -nc 2;
                    rowLayout -nc 3 -adj 3;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "render_spotLight.png" -ann "Create a spotlight at the origin" -command "shadingNode -asLight spotLight\; lf_dynRefresh";
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "cameraAim.png" -ann "Create a spotlight based on current camera position" -command "lf_createFromCamera \"spotLight\"";
                        text -width 100 -ebg 1 -bgc .4 .1 0 "Spot";
                    setParent ..;
                    rowLayout -nc 3 -adj 3;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "render_directionalLight.png" -ann "Create a directional light at the origin" -command "shadingNode -asLight directionalLight\; lf_dynRefresh";
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "cameraAim.png" -ann "Create a directional light based on current camera position" -command "lf_createFromCamera \"dirLight\"";
                        text -width 100 -ebg 1 -bgc .4 .1 0 "Directional";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "render_pointLight.png" -ann "Create a point light at the origin"  -command "shadingNode -asLight pointLight\;  lf_dynRefresh";
                        text -width 125 -ebg 1 -bgc .4 .1 0 "Point";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "render_ambientLight.png" -ann "Create an ambient light at the origin" -command "shadingNode -asLight ambientLight\; lf_dynRefresh";
                        text -width 125 -ebg 1 -bgc .4 .1 0 "Ambient";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "render_volumeLight.png" -ann "Create a volume light at the origin" -command "shadingNode -asLight volumeLight\; lf_dynRefresh";
                        text -width 125 -ebg 1 -bgc .4 .1 0 "Volume";
                    setParent ..;
                    rowLayout -nc 3 -adj 3;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "render_areaLight.png" -ann "Create an area light at the origin"  -command "shadingNode -asLight areaLight\; lf_dynRefresh";
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "cameraAim.png" -ann "Create an area light based on current camera position" -command "lf_createFromCamera \"areaLight\"";
                        text -width 100 -ebg 1 -bgc .4 .1 0 "Area";
                    setParent ..;
                setParent ..;
            setParent ..;
            columnLayout -rowSpacing 0 -visible 0 -height 150 -adjustableColumn 1 -ebg 1 -bgc .2 .3 .2 LF_EDITLIGHTS;
                iconTextStaticLabel -st "iconAndTextHorizontal" -i1 "out_lightList.png" -l "Edit Lights";
                rowColumnLayout -nc 2;
                    rowLayout -nc 3 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "frameHierarchy.png" -ann "Parent the current selection to the group on the right" -command "lf_parentTo";
                        text -width 130 -l "Add Selected to Group" -ebg 1 -bgc 0 .25 0;
                        optionMenu -w 150 LF_GROUPSELECT;
                            menuItem -l "New Group";
                            for($thisGroup in $allLightGroups){
                                if($thisGroup != "ungrouped"){
                                    menuItem -l $thisGroup;
                                    }
                            }
                    setParent ..;
                setParent ..;
                rowColumnLayout -nc 2;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "SP_TrashIcon.png" -ann "Delete the currently selected lights"  -command ("for($thisLight in `ls -dag -long -sl -type \"light\"`) delete `firstParentOf $thisLight`\; lf_dynRefresh\;");
                        text -width 130 -ebg 1 -bgc 0 .25 0 "Delete Lights";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -i1 "copyUV.png" -ann "Duplicate the current selection (and upstream connections)" -command "lf_dupeLights";
                        text -width 145 -ebg 1 -bgc 0 .25 0 "Duplicate Lights";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -en 0 -i1 "out_gammaCorrect.png" -ann "Apply a gamma correct node to the swatch of selected lights" -command "lf_gammaCorrectSwatches";
                        text -width 130 -ebg 1 -bgc 0 .25 0 "Gamma Correct";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -en 1 -i1 "out_objectSet.png" -ann "Link the selected lights to a new set of objects" -command "lf_linkToSet";
                        text -width 130 -ebg 1 -bgc 0 .25 0 "Friendly Light Linking";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -en 1 -i1 "out_lightLinker.png" -ann "Temporarily store the light-linking info for the selected light" -command "lf_storeLinks";
                        text -width 130 -ebg 1 -bgc 0 .25 0 "Store Light Links";
                    setParent ..;
                    rowLayout -nc 2 -adj 2;
                        nodeIconButton -h 25 -w 25 -st "iconOnly" -en 1 -i1 "out_lightLinker.png" -ann "Restore all stored light-linking" -command "lf_linkStored";
                        text -width 145 -ebg 1 -bgc 0 .25 0 "Apply ALL Stored Links";
                    setParent ..;
                setParent ..;
            setParent ..;
    setParent ..;
    for ($thisGroup in $allLightGroups){
        string $thisGroupSet[] = `stringToStringArray $thisGroup "|"`;
        string $thisGroupSetName = `stringArrayToString $thisGroupSet "_"`;
        string $thisGroupName = $thisGroupSet[size($thisGroupSet)-1];
      frameLayout -cll true -mw 5 -cl false -width 345 -l $thisGroupName -bv 1 -bs "etchedIn" -ebg 1 -bgc .15 .15 .15 ($thisGroupSetName + "_FRAME");
        columnLayout -rowSpacing 0 -adjustableColumn 0 ($thisGroupSetName + "_GROUP");
          string $lightsInGroup[] = `lf_getLightsInGroup $thisGroup `;
              for ($thisLight in $lightsInGroup){
                  lf_buildLightUI $thisLight $thisGroup $lightID 0;
                  $lightID++;
                  };
            setParent ..;
        setParent ..;
        };
    text -l "None" -visible 0 LF_SOLOED;
    text -l $lightID -visible 0 LF_LIGHTID;
    text -l "None" -visible 0 LF_PREVSEL;
    setParent ..;
    setParent;
    //setParent ..;
        if($docked){
        lf_dockWindow;
        } else { 
            showWindow LightersFriendWindow;
            }
        if($retain){
            frameLayout -e -cl false LF_CREATEMENU_FRAME;
            if($retainSolo != "None"){
                string $thisLight = $retainSolo;
                string $niceNameBuffer[];
                tokenize $thisLight "|" $niceNameBuffer;
                string $groupName;
                if(size($niceNameBuffer) < 3){
                      $groupName = "ungrouped";
                    } else {
                          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
                    };
                string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
                lf_soloThisLight $thisLight ($lightName + "_SOLOBUTTON");
                }
            }
    lf_collapseList $collapseSnapshot;
    lf_changeLFContext;
      if ($progress) {
          progressWindow -endProgress;
      }
    int $contextID = `scriptJob -e SelectionChanged ("lf_changeLFContext")`;
    scriptJob -uiDeleted LightersFriendWindow ("scriptJob -kill " + $contextID);
    
};

//===================================================================
//MENU BAR
//===================================================================

global proc lf_menuBar(string $parent, int $isRFX){
    menuBarLayout -parent $parent LF_MENUBARLAYOUT;
      menu -l "Create";
          menuItem -l "Spot Light" -command "shadingNode -asLight spotLight\; lf_dynRefresh";
          menuItem -l "Spot Light From Camera" -command "lf_createFromCamera \"spotLight\"";
          menuItem -l "Directional Light" -command "shadingNode -asLight directionalLight\; lf_dynRefresh";
          menuItem -l "Directional Light From Camera" -command "lf_createFromCamera \"dirLight\"";
          menuItem -l "Area Light" -command "shadingNode -asLight areaLight\; lf_dynRefresh";
          menuItem -l "Area Light From Camera" -command "lf_createFromCamera \"areaLight\"";
          menuItem -divider 1;
          menuItem -l "Ambient Light" -command "shadingNode -asLight ambientLight\; lf_dynRefresh";
          menuItem -l "Point Light" -command "shadingNode -asLight pointLight\;  lf_dynRefresh";
          menuItem -l "Volume Light" -command "shadingNode -asLight volumeLight\; lf_dynRefresh";
      menu -l "Edit";
          menuItem -l "Duplicate Lights" -command "lf_dupeLights";
          menuItem -l "Delete Lights" -command ("for($thisLight in `ls -dag -long -sl -type \"light\"`) delete `firstParentOf $thisLight`\; lf_dynRefresh\;");
          menuItem -divider 1;
          menuItem -en 0 -l "Gamma Correct Swatches" -command "lf_gammaCorrectSwatches";
          menuItem -divider 1;
          menuItem -l "Select All Linked Lights" -command "lf_selAllLinked";
          menuItem -l "Temporarily Store All Links" -command "lf_linkAll";
          menuItem -l "Restore All Stored Links" -command "lf_linkStored";
          menuItem -l "Copy Links From Light" -command "lf_copyLinksFromSelection";
          menuItem -l "Paste Links To Light" -command "lf_pasteLinksFromSelection";
          menuItem -l "Break All Links on Selected Lights" -command "lf_linker_breakSelLightLinks";
          menuItem -divider 1;
          menuItem -l "Copy This Light's Attributes And Connections" -command "lf_copyAttrs";
          menuItem -l "Paste Attributes and Connections" -command "lf_pasteAttrs";
      setParent -menu;
      menu -l "Window";
          menuItem -l "Dock This Window" -command "lf_dockWindow";
          string $unDockCommand = "evalDeferred \"lf_unDockWindow\"";
          menuItem -l "Float This Window" -command $unDockCommand;
          menuItem -divider 1;
          menuItem -l "Collapse All Groups" -command "lf_collapseAll 1";
          menuItem -l "Expand All Groups" -command "lf_collapseAll 0";
          menuItem -divider 1;
          radioMenuItemCollection;
              menuItem -l "Show Fields" -radioButton off -command "lf_toggleFieldSliders 1";
              menuItem -l "Show Sliders" -radioButton on -command "lf_toggleFieldSliders 0";
          menuItem -divider 1;
          menuItem -divider 1;
          menuItem -l "Open the Friendly Light Linker" -command "lf_linkToSet";
          menuItem -l "Open the Light Link Viewer" -command "lf_linkViewer";
      setParent -menu;
      menu -l "Refresh";
      string $refreshCommand = "\"lightersFriend `text -q -l LF_TECHCHECK`\"";
          menuItem -l "Full Refresh" -command ("evalDeferred " + $refreshCommand);
          menuItem -l "Dynamic Refresh" -command "lf_dynRefresh";
      setParent -menu;
      setParent -menu;
}

//===================================================================
// MAIN LIGHT UI
//===================================================================

global proc lf_buildLightUI(string $thisLight, string $thisGroup, int $lightID, int $refresh){
                string $refreshCommand = ("lf_addRefreshLightUI \\\"" + $thisLight + "\\\" \\\"none\\\" 0");
                int $isTechCheck = `text -q -l LF_TECHCHECK`;
                int $isRFX = 0;
                string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
                string $thisLightTransform = $transformLightArray[0];
                string $connections[] = `listConnections $thisLightTransform`;
                int $isIllumDefault = `stringArrayContains "defaultLightSet" $connections`;
                  string $niceNameBuffer[];
                  tokenize $thisLight "|" $niceNameBuffer;
                  string $groupName;
                      if(size($niceNameBuffer) < 3){
                          $groupName = "ungrouped";
                      } else {
                          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
                          };
                  string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
                  string $lightNameOnly = $niceNameBuffer[size($niceNameBuffer)-2];
                  if(!$refresh) columnLayout ("LIGHTCOLUMN_" + $lightID);
                  if(!$refresh) columnLayout -rowSpacing 5 -adjustableColumn 1 ($lightName + "_MAIN");
                  string $selTextName = $lightNameOnly;
                  if(!$isIllumDefault){
                     $selTextName = ($selTextName + " (linked)"); 
                  } else {
                     $selTextName = ($selTextName + "");
                  }
                  text -l $selTextName -height 15 -width 345 -ebg 1 -bgc .2 .2 .2 ($lightName + "_SELTEXT");
                      popupMenu;
                          string $renameCommand = ("lf_renameLight \\\"" + $thisLight + "\\\"");
                          menuItem -l "Rename this light..." -command ("evalDeferred -lp \"" + $renameCommand + "\"");
                          menuItem -l "Refresh this light" -command ("evalDeferred -lp \"" + $refreshCommand + "\"");
                          menuItem -l ".......";
                          string $deleteCommand = ("delete " + $thisLight + "\\\; lf_dynRefresh\\\;");
                          menuItem -l "DELETE this light" -command ("evalDeferred -lp \"" + $deleteCommand + "\"");
                  rowLayout -nc 9;
                      float $bcm[] = {.26,.26,.26};
                      float $bcs[] = {.26,.26,.26};
                        if (`getAttr ($thisLightTransform + ".visibility")` != 1){
                            $bcm = {1,0,0};
                        }
                        if(size(`listConnections -d true ($thisLightTransform + ".visibility")`) == 0){
                        button -l "M" -ebg 1 -bgc $bcm[0] $bcm[1] $bcm[2] -ann "Mute this light (right-click for more options)" -command ("lf_muteThisLight " + ($lightName + "_MUTEBUTTON " + $thisLight + " " + `getAttr ($thisLightTransform + ".visibility")` + " ") ) ($lightName + "_MUTEBUTTON");
                            popupMenu;
                                menuItem -l "mute group" -command ("lf_muteGroup " + $thisGroup);
                                menuItem -l "un-mute group" -command ("lf_unmuteGroup " + $thisGroup);
                        button -l "S" -ann "Solo this light (hide all other lights)" -ebg 1 -bgc $bcs[0] $bcs[1] $bcs[2] -command ("lf_soloThisLight " + $thisLight + " " + ($lightName + "_SOLOBUTTON")) ($lightName + "_SOLOBUTTON");
                            popupMenu;
                                menuItem -l "solo group (beta)" -command ("lf_soloGroup " + $thisGroup);
                        } else {
                            button -l "C" -ann "this light's visibility is being driven by a connection or key" -ebg 1 -bgc .5 .5 1 -command ("warning \"this light's visibility is being driven by a connection or key\"");
                            button -l "X" -en 0 -ebg 1 -bgc $bcs[0] $bcs[1] $bcs[2];
                        }
                       
                        attrColorSliderGrp -l "C:" -at ($thisLight + ".color") -cw4 15 30 0 20 ($lightName + "_COLORATTR");
                        attrFieldSliderGrp -l "V:" -at ($thisLight + ".intensity") -cw4 15 80 0 20;
                        button -l ("Adv.") -ann "Show Advanced Settings (right-click for more options)" -en 1 -ebg 1 -bgc .18 .18 .18 -command ("lf_toggleShadRow " + $lightName + "_SHADROW " + $lightName + "_ADVBUTT") ($lightName + "_ADVBUTT");
                            popupMenu;
                                menuItem -l "show group adv" -command ("lf_hideGroupAdv 1 " + $thisGroup);
                                menuItem -l "hide group adv" -command ("lf_hideGroupAdv 0 " + $thisGroup);
                                menuItem -l "show all adv" -command "lf_hideAllAdv 1";
                                menuItem -l "hide all adv" -command "lf_hideAllAdv 0";
                                menuItem -l "--------";
                                menuItem -l "show fields" -command "lf_toggleFieldSliders 1";
                                menuItem -l "show sliders" -command "lf_toggleFieldSliders 0";
                        nodeIconButton  -h 20 -w 20 -st "iconOnly" -ann "look through this light (right-click for more options)" -i1 "Camera.png" -command ("if(catch(`lookThru perspView " + $thisLightTransform + "`)) warning \"no viewport panel selected\"");
                            popupMenu;
                                menuItem -l "persp view" -command "lookThru perspView persp"; 
                        nodeIconButton  -h 20 -w 20 -st "iconOnly" -ann "select this light. (right-click for more options)" -i1 "greenSelect.png" -command ("select -r " + $thisLightTransform);
                            popupMenu;
                                menuItem -l "add to selection" -command ("select -add " + $thisLightTransform);
                                if($thisGroup != "ungrouped") menuItem -l "select group" -command ("select -r " + $thisGroup);
                                menuItem -l "select illuminated surfaces" -command ("selectObjectsIlluminatedBy " + $thisLight);
                    setParent ..;
                    int $useRT = 0;
                    int $useDM = 0;
                    int $shadowEnabled = 0;
                    if(`attributeExists "useDepthMapShadows" $thisLight`){
                        $useRT = `getAttr ($thisLight + ".useRayTraceShadows")`;
                        $useDM = `getAttr ($thisLight + ".useDepthMapShadows")`;
                        $shadowEnabled = 1;
                        }
                    columnLayout -visible 0 -ebg 1 -bgc .3 .315 .35 ($lightName + "_SHADROW");
                            columnLayout ..;
                                rowLayout -nc 3;
                                    if((`attributeExists "coneAngle" $thisLight`)){
                                        attrFieldSliderGrp -at ($thisLight + ".coneAngle") -l "Cone:" -cw4 32 0 65 0 ($lightName + "_CONEANGLE");
                                        }
                                    if((`attributeExists "penumbraAngle" $thisLight`)){
                                        attrFieldSliderGrp -at ($thisLight + ".penumbraAngle") -l "Pen:" -cw4 28 0 65 0 ($lightName + "_PENUMANGLE");
                                        }
                                    if((`attributeExists "dropoff" $thisLight`)){
                                        attrFieldSliderGrp -at ($thisLight + ".dropoff") -l "Drop:" -cw4 30 0 65 0 ($lightName + "_DROPOFF");
                                        }
                                    setParent..;
                            setParent ..;
                            separator -w 350 -style "in";
                        rowLayout -nc 3;
                            checkBoxGrp
                            -enable $shadowEnabled
                            -cw2 65 20
                            -ncb 2
                            -l1 "raytrace" 
                            -v1 $useRT
                            -on1 (("checkBoxGrp -e -v2 0 " + $lightName + "_SHADTYPE") + "\; " + ("lf_toggleShadType " + $lightName + " " + $thisLight))
                            -of1 (("checkBoxGrp -e -v2 0 " + $lightName + "_SHADTYPE") + "\; " + ("lf_toggleShadType " + $lightName + " " + $thisLight))
                            -l2 "dmap" 
                            -v2 $useDM
                            -on2 (("checkBoxGrp -e -v1 0 " + $lightName + "_SHADTYPE") + "\; " + ("lf_toggleShadType " + $lightName + " " + $thisLight))
                            -of2 (("checkBoxGrp -e -v1 0 " + $lightName + "_SHADTYPE") + "\; " + ("lf_toggleShadType " + $lightName + " " + $thisLight))
                            ($lightName + "_SHADTYPE");
                            if((`attributeExists "shadowColor" $thisLight`)) attrColorSliderGrp -l "shad:" -at ($thisLight + ".shadowColor") -cw4 40 20 0 20;
                            optionMenu 
                            -changeCommand ("setAttr " + $thisLight + ".decayRate " + "(`optionMenu -q -sl " + $lightName + "_DECAYTYPE` - 1)")
                            ($lightName + "_DECAYTYPE");
                                menuItem -l "no decay";
                                menuItem -l "linear";
                                menuItem -l "quadratic";
                                menuItem -l "cubic";
                            if((`attributeExists "decayRate" $thisLight`)){   
                            optionMenu -e
                            -sl (`getAttr ($thisLight + ".decayRate") $thisLight` + 1)
                            -en (1 - (`nodeType $thisLight` == "directionalLight" || `nodeType $thisLight` == "ambientLight" || `nodeType $thisLight` == "volumeLight"))
                            ($lightName + "_DECAYTYPE");
                            }
                                else {
                                optionMenu -e
                                -sl (1)
                                -en (1 - (`nodeType $thisLight` == "directionalLight" || `nodeType $thisLight` == "ambientLight" || `nodeType $thisLight` == "volumeLight"))
                                ($lightName + "_DECAYTYPE");
                                }
                            setParent ..;
                              columnLayout -visible $useDM ($lightName + "_DMSETTINGS");
                                  rowColumnLayout -nr 1;
                                      text -l "res:";
                                      if(`attributeExists "dmapResolution" $thisLight`){
                                          attrFieldSliderGrp -at ($thisLight + ".dmapResolution") -cw4 0 60 0 0;
                                      } else {
                                          text -l "no attr";
                                      }
                                      text -l " filter:";
                                      if(`attributeExists "dmapFilterSize" $thisLight`){
                                          attrFieldSliderGrp -at ($thisLight + ".dmapFilterSize") -cw4 0 40 0 0;
                                      } else {
                                          text -l "no attr";
                                      }
                                      text -l " bias:";
                                      if(`attributeExists "dmapBias" $thisLight`){
                                          attrFieldSliderGrp -at ($thisLight + ".dmapBias") -cw4 0 60 0 0;
                                      } else {
                                          text -l "no attr";
                                      }
                                  setParent ..;
                              setParent ..;
                              columnLayout -visible $useRT ($lightName + "_RTSETTINGS");
                                  rowColumnLayout -nr 1;
                                      text -l "radius:";
                                      if(`attributeExists "lightAngle" $thisLight`){
                                          attrFieldSliderGrp -at ($thisLight + ".lightAngle") -cw4 0 60 0 0;
                                          } else {
                                              if(`attributeExists "lightRadius" $thisLight`){
                                                  attrFieldSliderGrp -at ($thisLight + ".lightRadius") -cw4 0 60 0 0;
                                          } else {
                                              text -l "no attr";
                                              } 
                                          }
                                      text -l " rays:";
                                      if(`attributeExists "shadowRays" $thisLight`){
                                          attrFieldSliderGrp -at ($thisLight + ".shadowRays") -cw4 0 40 0 0;
                                      } else {
                                          text -l "no attr";
                                      }
                                      text -l " limit:";
                                      if(`attributeExists "rayDepthLimit" $thisLight`){
                                          attrFieldSliderGrp -at ($thisLight + ".rayDepthLimit") -cw4 0 40 0 0;
                                      } else {
                                          text -l "no attr";
                                      }
                                  setParent ..;
                              setParent ..;
                          setParent ..;
                      separator -style "in";
                      text -visible 0 -l "" ($lightName + "_LIGHTLINKS");
                  if(!$refresh) setParent ..;
                  if(!$refresh) setParent ..;
};


//===================================================================
//DOCKING CONTROLS
//===================================================================

//DOCK THE LF UI

global proc lf_dockWindow(){
dockControl -area "left" -content LightersFriendWindow -allowedArea "left" -floating 0 -allowedArea "right" -label "Lighter's Friend v 1.0 - Ed Whetstone" LightersFriendDock;
button -e -l "Un-Dock" -command ("lf_unDockWindow") -ebg 1 -bgc .3 .3 .3 LF_DOCKTHIS;
}

//DELETE DOCKCONTROL

global proc lf_deleteDock(){
if(`dockControl -q -io LightersFriendDock`){
    evalDeferred "deleteUI LightersFriendDock";
    }
}

// UNDOCK WINDOW

global proc lf_unDockWindow(){
    window -rtf 1 -mnb 1 -mxb 1 -w 370 LF_NEW;
      scrollLayout -e -parent LF_NEW LF_MAIN_SCROLL;
      lf_menuBar "LF_NEW" `text -q -l LF_ISRFX`;
      showWindow LF_NEW;
      deleteUI LightersFriendWindow;
      deleteUI LightersFriendDock;
      window -e -t "Lighter's Friend v 1.0 - EdW" LF_NEW;
      renameUI LF_NEW LightersFriendWindow;
      int $contextID = `scriptJob -e SelectionChanged ("lf_changeLFContext")`;
      scriptJob -uiDeleted LightersFriendWindow ("scriptJob -kill " + $contextID);
}


//===================================================================
//REFRESH COMMANDS
//===================================================================

//REFRESH OR ADD LIGHT UI "IN-PLACE"

global proc lf_addRefreshLightUI(string $thisLight, string $parentOverride, int $add){
    string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
    string $thisGroupArray[] = `listRelatives -fullPath -parent $transformLightArray[0]`;
    string $thisGroup = $thisGroupArray[0];
    if($thisGroup == "") $thisGroup = "ungrouped";
    string $lightName = `lf_getLightName $thisLight`;
    int $lightID = (`text -q -l LF_LIGHTID`);
    text -e -l ($lightID + 1.00) LF_LIGHTID;
     if($add){
         string $thisGroupSet[] = `stringToStringArray $thisGroup "|"`;
             if(size($thisGroupSet) < 1) {
                 $thisGroupSet[0] = "ungrouped";
             }
         string $thisGroupSetName = `stringArrayToString $thisGroupSet "_"`;
         string $thisGroupName = $thisGroupSet[size($thisGroupSet)-1];
         int $addGroup = 0;
         if(!`columnLayout -q -exists ($thisGroupSetName + "_GROUP")`){
             frameLayout -cll true -mw 5 -cl false -width 345 -l $thisGroupName -parent LF_MAINCOLUMN -bv 1 -bs "etchedIn" -ebg 1 -bgc .15 .15 .15 ($thisGroupSetName + "_FRAME");
              popupMenu;
               menuItem -l "Collapse All" -command ("lf_collapseAll 1");
               menuItem -l "Expand All" -command ("lf_collapseAll 0");
             columnLayout -rowSpacing 0 -adjustableColumn 1 ($thisGroupSetName + "_GROUP");
             $addGroup = 1;
         }
         columnLayout -parent ($thisGroupSetName + "_GROUP") ("LIGHTCOLUMN_" + $lightID);
         columnLayout -parent ("LIGHTCOLUMN_" + $lightID) -rowSpacing 5 -adjustableColumn 1 ($lightName + "_MAIN");
         evalDeferred -lp (`lf_buildLightUI $thisLight $thisGroup $lightID 1`);
         setParent;
         setParent;
         if($addGroup){
             setParent;
             setParent;
         }
     } else {
         string $removeReturn[];
         string $lightUIParent;
         float $advColor[];
         if(`button -q -exists ($lightName + "_ADVBUTT")`) $advColor = `button -q -bgc ($lightName + "_ADVBUTT")`;
         if(`button -q -exists ($parentOverride + "_ADVBUTT")`) $advColor = `button -q -bgc ($parentOverride + "_ADVBUTT")`;
         int $isAdv = 0;
         if($advColor[0] > .5) $isAdv = 1;
         if(`columnLayout -exists ($lightName + "_MAIN")`){
         $removeReturn = `lf_removeLightUI $lightName 1`;
         $lightUIParent = $removeReturn[0];
         }
         if(`columnLayout -exists ($parentOverride + "_MAIN")`){
         $removeReturn = `lf_removeLightUI $parentOverride 1`;
         $lightUIParent = $removeReturn[0];
         }
         columnLayout -parent $lightUIParent -rowSpacing 5 -adjustableColumn 1 ($lightName + "_MAIN");
         evalDeferred -lp (`lf_buildLightUI $thisLight $thisGroup $lightID 1`);
         setParent;
         if($isAdv) lf_toggleShadRow ($lightName + "_SHADROW") ($lightName + "_ADVBUTT");
         lf_changeLFContext;
     }
}

//REMOVE LIGHT UI PANEL

global proc string[] lf_removeLightUI(string $lightName, int $refresh){
    string $lightUIParent = `columnLayout -q -parent ($lightName + "_MAIN")`;
    string $lightUIParentTop = `columnLayout -q -parent $lightUIParent`;
    if($refresh){
        deleteUI ($lightName + "_MAIN");
        return {$lightUIParent, $lightName};
    } else {
        deleteUI $lightUIParent;
        return {$lightUIParentTop, $lightName};
    }
}

//DYNAMIC REFRESH

global proc lf_dynRefresh(){
    string $allLights[] = `lf_getAllLights`;
    string $allLightGroups[] = `lf_getAllGroups $allLights`;
    string $allLightUIGroups[] = stringToStringArray(`text -q -l LF_GROUPLIST`, "+");
    string $allLightNames[];
    for($thisLight in $allLights){
        $allLightNames[size($allLightNames)] = `lf_getLightName $thisLight`;
    }
    string $UILights = `text -q -l LF_ALLLIGHTS`;
    string $allUILights[] = `stringToStringArray $UILights "+"`;
    //remove missing from UI
    string $removeList[];
    for($thisLight in $allUILights){
        if(!`stringArrayContains $thisLight $allLightNames`){
            lf_removeLightUI $thisLight 0;
            $removeList[size($removeList)] = $thisLight;
        }
    }
    string $newList[] = `stringArrayRemove $removeList $allUILights`;
    text -e -l `stringArrayToString $newList "+"` LF_ALLLIGHTS;
    $allUILights = $newList;
    //add new lights to UI
    string $addList[];
        for($thisLight in $allLights){
        string $compareName = `lf_getLightName $thisLight`;
        if(!`stringArrayContains $compareName $allUILights`){
            lf_addRefreshLightUI $thisLight "none" 1;
            $addList[size($addList)] = $compareName;
            }
        //lf_addRefreshLightUI $thisLight "none" 0;
        }
    $newList = `stringArrayCatenate $addList $allUILights`;
    text -e -l `stringArrayToString $newList "+"` LF_ALLLIGHTS;
    //remove empty groups
    for($thisGroup in $allLightUIGroups){
        string $thisGroupSet[] = `stringToStringArray $thisGroup "|"`;
        string $thisGroupSetName = `stringArrayToString $thisGroupSet "_"`;
        string $childArray[] = `layout -q -childArray ($thisGroupSetName + "_GROUP")`;
        int $empty = 1;
        for($thisArray in $childArray){
        if(size(`layout -q -childArray $thisArray`) > 0){
            $empty = 0;
            }
        }
        if($empty){
            deleteUI ($thisGroupSetName + "_FRAME");
        }
        
    }
    text -e -l `stringArrayToString $allLightGroups "+"` LF_GROUPLIST;
}

// RENAME THE GIVEN LIGHT

global proc lf_renameLight(string $thisLight){
    string $overrideName = `lf_getLightName $thisLight`;
    string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
    string $thisLightTransform = $transformLightArray[0];
 	string $promptResult = `promptDialog -title "rename light" -message "new light name:"`;
 	string $newName = `promptDialog -query -text`;
 	string $newLightTransform = `rename $thisLightTransform $newName`;
 	string $newLight[] = `listRelatives -fullPath -shapes $newLightTransform`;
 	string $lightName = `lf_getLightName $newLight[0]`;
 	lf_addRefreshLightUI $newLight[0] $overrideName 0;
 	string $lightUIList = `text -q -l LF_ALLLIGHTS`;
 	string $allLightUIList[] = `stringToStringArray $lightUIList "+"`;
 	string $newList[] = `stringArrayRemove {$overrideName} $allLightUIList`;
 	$newList[size($newList)] = $lightName;
 	text -e -l `stringArrayToString $newList "+"` LF_ALLLIGHTS;
}

//===================================================================
//CONTEXT TOOLS
//===================================================================

//CHANGE CONTEXT-SENSITIVE PANEL

global proc lf_changeLFContext(){
columnLayout -e -visible 0 LF_CREATE_FROM_CAMERA;
columnLayout -e -visible 0 LF_EDITLIGHTS;
string $LightSelection[] = `ls -sl -fl -l -dag -type "light"`;
if(size($LightSelection) < 1){
    columnLayout -e -visible 1 LF_CREATE_FROM_CAMERA;
    frameLayout -e -bgc .4 .1 0 LF_CREATEMENU_FRAME;
    }
if(size($LightSelection) > 0){
    columnLayout -e -visible 1 LF_EDITLIGHTS;
    frameLayout -e -bgc 0 .25 0 LF_CREATEMENU_FRAME;
    }
string $sel[] = `ls -sl -fl -l -dag -type "light"`;
string $nextSel = `stringArrayToString $sel "+"`;
string $prevSel = `text -q -l LF_PREVSEL`;
text -e -l $nextSel LF_PREVSEL;
if($prevSel != "None"){
    string $prevSelList[] = `stringToStringArray $prevSel "+"`;
    for ($thisLight in $prevSelList){
        string $niceNameBuffer[];
        tokenize $thisLight "|" $niceNameBuffer;
        string $groupName;
          if(size($niceNameBuffer) < 3){
              $groupName = "ungrouped";
          } else {
              $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
              };
        string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
        if(catchQuiet(`text -e -bgc .2 .2 .2 ($lightName + "_SELTEXT")`));
        if(catchQuiet(`columnLayout -e -bgc .26 .26 .26 ($lightName + "_MAIN")`));
        }
    }
for ($thisLight in $sel){
    string $niceNameBuffer[];
    tokenize $thisLight "|" $niceNameBuffer;
    string $groupName;
      if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
      } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
    string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
    if(catch(`text -e -bgc .8 .7 .5 ($lightName + "_SELTEXT")`)) print "The Lighter's Friend might need to be refreshed!";
    if(catch(`columnLayout -e -bgc .385 .35 .3 ($lightName + "_MAIN")`)) print "The Lighter's Friend might need to be refreshed!";
    }
}

//===================================================================
//UI TOGGLES
//===================================================================

// TOGGLE THE ADV SETTINGS LAYER OF GIVEN LIGHT

global proc lf_toggleShadRow(string $shadRow, string $advButton){
    columnLayout -e -visible (1 - `columnLayout -q -visible $shadRow`) $shadRow;
    float $bgcc[] = `button -q -bgc $advButton`;
    float $bgcInv = (1 - $bgcc[0]);
    button -e -bgc $bgcInv $bgcInv $bgcInv $advButton;
}

// TOGGLE THE TYPE OF SHADOW ATTRS TO SHOW IN UI

global proc lf_toggleShadType(string $lightName, string $thisLight) {
    int $useRTUI = `checkBoxGrp -q -v1 ($lightName + "_SHADTYPE")`;
    setAttr ($thisLight + ".useRayTraceShadows") $useRTUI;
    int $useDMUI = `checkBoxGrp -q -v2 ($lightName + "_SHADTYPE")`;
    setAttr ($thisLight + ".useDepthMapShadows") $useDMUI;
    columnLayout -e -visible 0 ($lightName + "_DMSETTINGS");
    columnLayout -e -visible 0 ($lightName + "_RTSETTINGS");
    if(!$useRTUI && !$useDMUI){
            
        } else {
        columnLayout -e -visible (1-$useRTUI) ($lightName + "_DMSETTINGS");
        columnLayout -e -visible (1-$useDMUI) ($lightName + "_RTSETTINGS");
        }
}

//HIDE OR SHOW ALL ADV LAYERS

global proc lf_hideAllAdv(int $hide){
  string $allLights[] = `lf_getAllLights`;
  for ($thisLight in $allLights){
      string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
      string $thisLightTransform = $transformLightArray[0];
      string $niceNameBuffer[];
      tokenize $thisLight "|" $niceNameBuffer;
      string $groupName;
      if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
          } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
      string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
      columnLayout -e -visible $hide ($lightName + "_SHADROW");
      float $bgcc = .18;
      if($hide) $bgcc = .82;
      button -e -bgc $bgcc $bgcc $bgcc ($lightName + "_ADVBUTT");
      if($hide && (size($allLights) < 50)) refresh;
      }
}

// TOGGLE THE ADV ROW FOR A GROUP OF LIGHTS

global proc lf_hideGroupAdv(int $hide, string $thisGroup){
string $lightsInGroup[] = `lf_getLightsInGroup $thisGroup`;
for ($thisLight in $lightsInGroup){
      string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
      string $thisLightTransform = $transformLightArray[0];
      string $niceNameBuffer[];
      tokenize $thisLight "|" $niceNameBuffer;
      string $groupName;
      if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
          } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
      string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
      columnLayout -e -visible $hide ($lightName + "_SHADROW");
      float $bgcc = .18;
      if($hide){$bgcc = .82;}
      button -e -bgc $bgcc $bgcc $bgcc ($lightName + "_ADVBUTT");
      if($hide) refresh;
      }  
}

//CHANGE BETWEEN FIELDS AND SLIDERS FOR ADV SETTINGS

global proc lf_toggleFieldSliders(int $fields){
  string $allLights[] = `lf_getAllLights`;
    if((`pluginInfo -query -registered vrayformaya` && `pluginInfo -query -loaded vrayformaya`)){
       $allvRayLights = `lf_getAllvRayLights`;
       $vrayLoaded = 1;
       appendStringArray($allLights, $allvRayLights, size($allvRayLights));
      }
  for ($thisLight in $allLights){
      string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
      string $thisLightTransform = $transformLightArray[0];
      string $niceNameBuffer[];
      tokenize $thisLight "|" $niceNameBuffer;
      string $groupName;
      if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
          } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
      string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
      if(`attributeExists "coneAngle" $thisLight`) {
          if($fields){
               attrFieldSliderGrp -e -cw4 32 65 0 0 ($lightName + "_CONEANGLE");
               } else {
                  attrFieldSliderGrp -e -cw4 32 0 65 0 ($lightName + "_CONEANGLE"); 
               }
          }
      if(`attributeExists "penumbraAngle" $thisLight`) {
          if($fields){
               attrFieldSliderGrp -e -cw4 28 65 0 0 ($lightName + "_PENUMANGLE");
               } else {
                  attrFieldSliderGrp -e -cw4 28 0 65 0 ($lightName + "_PENUMANGLE"); 
               }
          }
      if(`attributeExists "dropoff" $thisLight`) {
          if($fields){
               attrFieldSliderGrp -e -cw4 30 65 0 0 ($lightName + "_DROPOFF");
               } else {
                  attrFieldSliderGrp -e -cw4 30 0 65 0 ($lightName + "_DROPOFF"); 
               }
          }
      }
}

//===================================================================
//GROUPING
//===================================================================

//PARENT THE SPECIFIED LIGHT UNDER A GROUP

global proc lf_parentTo(){
    string $lightSelection[] = `ls -sl -fl -l -dag -type "light"`;
    string $thisGroup = `optionMenu -q -value LF_GROUPSELECT`;
    if($thisGroup == "New Group"){
        string $promptResult = `promptDialog -title "New Group" -message "New Group Name:"`;
        string $newName = `promptDialog -query -text`;
        $thisGroup = `group -em -name $newName`;
    }
    for($thisLight in $lightSelection){
        string $lightTransform[] = `listRelatives -p $thisLight`;
        parent $lightTransform[0] $thisGroup;
    }
    lf_dynRefresh;
}


//COLLAPSE OR EXPAND LIGHT GROUPS

global proc lf_collapseAll(int $clex){
  string $allLights[] = `lf_getAllLights`;
    if((`pluginInfo -query -registered vrayformaya` && `pluginInfo -query -loaded vrayformaya`)){
       $allvRayLights = `lf_getAllvRayLights`;
       $vrayLoaded = 1;
       appendStringArray($allLights, $allvRayLights, size($allvRayLights));
      }
  string $allLightGroups[] = `lf_getAllGroups $allLights`;
  string $buttonLabel;
  if($clex == 0){
      $buttonLabel = "Collapse All";
  }
  else {
      $buttonLabel = "Expand All";
  }
  for ($thisGroup in $allLightGroups){
  string $thisGroupArray[] = `stringToStringArray $thisGroup "|"`;
  string $thisGroupName = `stringArrayToString $thisGroupArray "_"`;
  frameLayout -e -cl $clex ($thisGroupName + "_FRAME");
  }
  button -e
  -l $buttonLabel
  -command ("lf_collapseAll " + (1 - $clex)) 
  LF_COLLAPSEEXPAND;
}

//GET LIST OF ALL COLLAPSED GROUP FRAMES

global proc string[] lf_getCollapsedList(){
string $allLights[] = `lf_getAllLights`;
if((`pluginInfo -query -registered vrayformaya` && `pluginInfo -query -loaded vrayformaya`)){
       $allvRayLights = `lf_getAllvRayLights`;
       $vrayLoaded = 1;
       appendStringArray($allLights, $allvRayLights, size($allvRayLights));
      }
string $allLightGroups[] = `lf_getAllGroups $allLights`;
string $collapsedList[];
  for ($thisGroup in $allLightGroups){
      if(`frameLayout -q -exists ($thisGroup + "_FRAME")`){
          if(`frameLayout -q -cl ($thisGroup + "_FRAME")`){
              $collapsedList[(size($collapsedList))] = $thisGroup;
              }
          }
    }
if(`frameLayout -q -cl LF_CREATEMENU_FRAME`){
    $collapsedList[(size($collapsedList))] = "LF_CREATEMENU";
    }
    return $collapsedList;
}

global proc string[] lf_getAdvRolloutList(){
  return {};  
}

//COLLAPSE ALL GROUP FRAMES BASED ON SPECIFIED LIST

global proc lf_collapseList(string $list[]){
for ($thisGroup in $list){
    if(`frameLayout -q -exists ($thisGroup + "_FRAME")`){
        frameLayout -e -cl true ($thisGroup + "_FRAME");
        }
    }
}


//===================================================================
//UI INFO
//===================================================================

//GET UI-FRIENDLY LIGHT NAME OF LIGHT SHAPE

global proc string lf_getLightName(string $thisLight){
    string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
    string $thisLightTransform = $transformLightArray[0];
    string $niceNameBuffer[];
    tokenize $thisLight "|" $niceNameBuffer;
    string $groupName;
      if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
      } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
    string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
    return $lightName;
}

//===================================================================
//EDIT COMMANDS
//===================================================================

//DUPLICATE LIGHTS WITH INPUT CONNECTIONS

global proc lf_dupeLights(){
string $allLights[] = `ls -sl -fl -l -dag -type "light"`;
string $curCopyBin = `text -q -l LF_COPYLINKBIN`;
for($thisLight in $allLights){
    string $newLight[] = `duplicate -un $thisLight`;
    lf_copyLinksToBin `firstParentOf $thisLight`;
    lf_pasteStoredLinks $newLight[0];
    }
text -e -l $curCopyBin LF_COPYLINKBIN;
lf_dynRefresh;
}


//===================================================================
//GET LISTS
//===================================================================

//GET A LIST OF ALL LIGHT OBJECTS
global proc string[] lf_getAllLights(){
  string $lightList[] = `ls -type "light" -long`;
  return $lightList;
};


//GET LIST OF ALL VRAY LIGHT OBJECTS
global proc string[] lf_getAllvRayLights(){
  string $lightList[];
  string $sphereList[] = `ls -type "VRayLightSphereShape" -long`;
  string $rectList[] = `ls -type "VRayLightRectShape" -long`;
  string $domeList[] = `ls -type "VRayLightDomeShape" -long`;
  string $iesList[] = `ls -type "VRayLightIESShape" -long`;
  appendStringArray($lightList, $sphereList, size($sphereList));
  appendStringArray($lightList, $rectList, size($rectList));
  appendStringArray($lightList, $domeList, size($domeList));
  appendStringArray($lightList, $iesList, size($iesList));
  return $lightList;
};


//GET A LIST OF ALL GROUPS THAT CONTAIN LIGHTS

global proc string[] lf_getAllGroups(string $allLights[]){
    string $buffer[];
    for ($thisLight in $allLights){
        string $niceNameBuffer[];
        tokenize $thisLight "|" $niceNameBuffer;
          string $groupName = "";
          if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
          } else {
                  for($i = size($niceNameBuffer) ; $i > 2; $i--){
                    if($i == 3){
                      $groupName = ($groupName + ($niceNameBuffer[size($niceNameBuffer) - $i]));
                      } else {
                          $groupName = ($groupName + ($niceNameBuffer[size($niceNameBuffer) - $i] + "|"));
                          }
                  }
                  //error "test";
              }
        $buffer[size($buffer)] = $groupName;
    };
    string $lightGroupList[] = stringArrayRemoveDuplicates($buffer);
    return $lightGroupList;
}

//GET LIST OF REGULAR LIGHTS IN GROUP

global proc string[] lf_getLightsInGroup(string $thisGroup){
if ($thisGroup != "ungrouped"){
    string $allLightsInGroup[];
    string $allTransInGroup[] = `listRelatives -f -c -type "transform" $thisGroup`;
    for($thisLight in $allTransInGroup){
        string $listRel[] = `listRelatives -f -c -type "light" $thisLight`;
        if($listRel[0] != ""){
            $allLightsInGroup[(size($allLightsInGroup))] = $listRel[0];
            }
        }
    return $allLightsInGroup;
    } else {
        string $mainSelection[] = `ls -sl -fl`;
        select `ls -assemblies`;
        select `listRelatives -f -s`;
        string $allLightsInWorld[] = `ls -l -sl -type "light"`;
        select -cl;
        select -r $mainSelection;
        return $allLightsInWorld;
    }
};

//GET LIST OF VRAY LIGHTS IN GROUP

global proc string[] lf_getvRayLightsInGroup(string $thisGroup){
if ($thisGroup != "ungrouped"){
  string $allLightsInGroup[];
  string $sphereList[] = `listRelatives -f -ad -type "VRayLightSphereShape" $thisGroup`;
  string $rectList[] = `listRelatives -f -ad -type "VRayLightRectShape" $thisGroup`;
  string $domeList[] = `listRelatives -f -ad -type "VRayLightDomeShape" $thisGroup`;
  string $iesList[] = `listRelatives -f -ad -type "VRayLightIESShape" $thisGroup`;
  appendStringArray($allLightsInGroup, $sphereList, size($sphereList));
  appendStringArray($allLightsInGroup, $rectList, size($rectList));
  appendStringArray($allLightsInGroup, $domeList, size($domeList));
  appendStringArray($allLightsInGroup, $iesList, size($iesList));
return $allLightsInGroup;
} else {
    string $mainSelection[] = `ls -sl -fl`;
    select `ls -assemblies`;
    select `listRelatives -f -s`;
    string $lightList[];
    string $sphereList[] = `ls -l -sl -type "VRayLightSphereShape"`;
    string $rectList[] = `ls -l -sl -type "VRayLightRectShape"`;
    string $domeList[] = `ls -l -sl -type "VRayLightDomeShape"`;
    string $iesList[] = `ls -l -sl -type "VRayLightIESShape"`;
    appendStringArray($lightList, $sphereList, size($sphereList));
    appendStringArray($lightList, $rectList, size($rectList));
    appendStringArray($lightList, $domeList, size($domeList));
    appendStringArray($lightList, $iesList, size($iesList));
    select -cl;
    select -r $mainSelection;
    return $lightList;
}
};


//===================================================================
//MUTE AND SOLO
//===================================================================

//MUTE THIS LIGHT
 
global proc lf_muteThisLight(string $muteButton, string $thisLight, int $muteStatus){
    string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
    string $thisLightTransform = $transformLightArray[0];
    string $lightName = `lf_getLightName $thisLight`;
    if ($muteStatus){
    button -e -command ("lf_muteThisLight " + ($lightName + "_MUTEBUTTON " + $thisLight + " 0 ") ) -bgc 1 0 0 $muteButton;
    setAttr ($thisLightTransform + ".visibility") 0;
    } else {
        button -e -command ("lf_muteThisLight " + ($lightName + "_MUTEBUTTON " + $thisLight + " 1 ") ) -bgc .26 .26 .26 $muteButton;
        setAttr ($thisLightTransform + ".visibility") 1;
    }    
}

//MUTE THIS GROUP OF LIGHTS

global proc lf_muteGroup(string $thisGroup){
string $lightsInGroup[] = `lf_getLightsInGroup $thisGroup`;
for ($thisLight in $lightsInGroup){
      string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
      string $thisLightTransform = $transformLightArray[0];
      string $niceNameBuffer[];
      tokenize $thisLight "|" $niceNameBuffer;
      string $groupName;
      if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
          } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
      string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
      lf_muteThisLight ($lightName + "_MUTEBUTTON") $thisLight 1;
      }   
}

//UN-MUTE THIS GROUP OF LIGHTS

global proc lf_unmuteGroup(string $thisGroup){
string $lightsInGroup[] = `lf_getLightsInGroup $thisGroup`;
for ($thisLight in $lightsInGroup){
      string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
      string $thisLightTransform = $transformLightArray[0];
      string $niceNameBuffer[];
      tokenize $thisLight "|" $niceNameBuffer;
      string $groupName;
      if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
          } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
      string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
      lf_muteThisLight ($lightName + "_MUTEBUTTON") $thisLight 0;
      }   
}

//SOLO THIS GROUP OF LIGHTS

global proc lf_soloGroup(string $thisGroup){
lf_muteAllLights "mute" {};
lf_unmuteGroup $thisGroup;
}

//SOLO THIS LIGHT

global proc lf_soloThisLight(string $thisLight, string $soloButton){
    float $colorReturn[] = `button -q -bgc $soloButton`;
    string $exceptionList[] = `lf_getMuteLightList`;
    $exceptionList[size($exceptionList)] = $thisLight;
    if ($colorReturn[0] != 1){
    lf_muteAllLights "mute" {$thisLight};
    button -e -bgc 1 1 0 $soloButton;
    text -e -l $thisLight LF_SOLOED;
    } else {
        lf_muteAllLights "unmute" {$thisLight};
        button -e -bgc .26 .26 .26 $soloButton;
        text -e -l "None" LF_SOLOED;
    }
    
}

//GET LIST OF MUTED LIGHTS

global proc string[] lf_getMuteLightList(){
    
    string $muteLightList[];
    string $allLights[] = `lf_getAllLights`;
    int $vrayLoaded = 0;
    string $allvRayLights[];
      if((`pluginInfo -query -registered vrayformaya` && `pluginInfo -query -loaded vrayformaya`)){
       $allvRayLights = `lf_getAllvRayLights`;
       $vrayLoaded = 1;
       appendStringArray($allLights, $allvRayLights, size($allvRayLights));
  }
    string $allLightGroups[] = `lf_getAllGroups $allLights`;
    for ($thisGroup in $allLightGroups){
        string $lightsInGroup[] = `lf_getLightsInGroup $thisGroup`;
            if($vrayLoaded){
               string $vRayLightsInGroup[] = `lf_getvRayLightsInGroup $thisGroup`;
               appendStringArray($lightsInGroup, $vRayLightsInGroup, size($vRayLightsInGroup));
            }
          for ($thisLight in $lightsInGroup){
          string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
          string $thisLightTransform = $transformLightArray[0];
          string $niceNameBuffer[];
          tokenize $thisLight "|" $niceNameBuffer;
          string $muteStatus = $niceNameBuffer[size($niceNameBuffer)-2] + "_MUTESTATUS";
          }
     }
     return $muteLightList;
}

// MUTE ALL LIGHTS
global proc lf_muteAllLights(string $muteFunction, string $exceptionList[]){
    string $allLights[] = `lf_getAllLights`;
    int $vrayLoaded = 0;
    string $allvRayLights[];
      if((`pluginInfo -query -registered vrayformaya` && `pluginInfo -query -loaded vrayformaya`)){
       $allvRayLights = `lf_getAllvRayLights`;
       $vrayLoaded = 1;
       appendStringArray($allLights, $allvRayLights, size($allvRayLights));
      }
    string $allLightGroups[] = `lf_getAllGroups $allLights`;
    for ($thisGroup in $allLightGroups){
        string $lightsInGroup[] = `lf_getLightsInGroup $thisGroup`;
       if($vrayLoaded){
       string $vRayLightsInGroup[] = `lf_getvRayLightsInGroup $thisGroup`;
       appendStringArray($lightsInGroup, $vRayLightsInGroup, size($vRayLightsInGroup));
        }
          for ($thisLight in $lightsInGroup){
          string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
          string $thisLightTransform = $transformLightArray[0];
          string $niceNameBuffer[];
          tokenize $thisLight "|" $niceNameBuffer;
          string $groupName;
          if(size($niceNameBuffer) < 3){
          $groupName = "ungrouped";
          } else {
          $groupName = $niceNameBuffer[size($niceNameBuffer)-3];
          };
          string $lightName = $groupName + "_" + $niceNameBuffer[size($niceNameBuffer)-2];
          string $lightNameOnly = $niceNameBuffer[size($niceNameBuffer)-2];
          string $muteButton = $lightName + "_MUTEBUTTON";
          string $soloButton = $lightName + "_SOLOBUTTON";
          string $muteStatus = $lightName + "_MUTESTATUS";
        if (`button -exists $muteButton`){
            if ($muteFunction == "mute"){
                button -e -bgc .26 .26 .26 $soloButton;
                button -e -bgc 1 0 0 $muteButton;
                setAttr ($thisLightTransform + ".visibility") 0;
                //text -e -visible 1 $muteStatus;
                } else {
                button -e -bgc .26 .26 .26 $soloButton;
                button -e -bgc .26 .26 .26 $muteButton;
                setAttr ($thisLightTransform + ".visibility") 1;
                //text -e -visible 0 $muteStatus;
                }
                if (stringArrayContains($thisLight, $exceptionList)){
                button -e -bgc .26 .26 .26 $muteButton;
                setAttr ($thisLightTransform + ".visibility") 1;
                //text -e -visible 0 $muteStatus;
                }
            }
        }
    }  
}



//===================================================================
//CREATE COMMANDS
//===================================================================

//CREATE LIGHT FROM CAMERA

global proc lf_createFromCamera(string $type){
string $camera = "";
string $panel = `getPanel -wf`;
if (`getPanel -to $panel` == "modelPanel"){
    $camera = `modelEditor -q -camera $panel`;
    }
if($camera == ""){
    warning "no panel detected -- click in a perspective view before using this tool";
    } else {
        if(`nodeType $camera` == "camera"){
            string $rels[] = `listRelatives -p $camera`;
            $camera = $rels[0];
            }
        }
if($camera == ""){
    warning "no panel detected -- click in a perspective view before using this tool";
    } else {
        float $position[3] = `xform -worldSpace -query -translation $camera`;
    	float $orientation[3] = `xform -worldSpace -query -rotation $camera`;
    	float $scale[3] = {25, 25, 25};
    	string $thisNode;
    	if ($type == "spotLight"){
    	    $thisNode = `shadingNode -asLight spotLight`;
    	    }
    	if ($type == "dirLight"){
    	    $thisNode = `shadingNode -asLight directionalLight`;
    	    }
    	if ($type == "areaLight"){
    	    $thisNode = `shadingNode -asLight areaLight`;
    	    $scale = {10, 10, 10};
    	    }    	    
    	lf_dynRefresh;
        setAttr ($thisNode + ".translateX") $position[0];
        setAttr ($thisNode + ".translateY") $position[1];
        setAttr ($thisNode + ".translateZ") $position[2];
        setAttr ($thisNode + ".rotateX") $orientation[0];
        setAttr ($thisNode + ".rotateY") $orientation[1];
        setAttr ($thisNode + ".rotateZ") $orientation[2];
        setAttr ($thisNode + ".scaleX") $scale[0];
        setAttr ($thisNode + ".scaleY") $scale[1];
        setAttr ($thisNode + ".scaleZ") $scale[2];
        setAttr ($thisNode + ".centerOfIllumination") 300;
    }
}

global proc string lf_getCurrentCamera()
{
  string $camera;

  // First get the panel that currently has focus
  string $panel = `getPanel -wf`;

  // Compare the panel's type to confirm it is a "modelPanel"
  if ( "modelPanel" == `getPanel -to $panel` )
  {
    // Get the name of the camera using the ‘modelEditor’ command
    $camera = `modelEditor -q -camera $panel`;
  }
  if($camera == "")
      return "";
  if(`nodeType $camera` == "camera")
  {
       string $rels[] = `listRelatives -p $camera`;
       $camera = $rels[0];
       }
  return $camera;
}

//===================================================================
//LINKING
//===================================================================

//STORE LIGHT LINKS

global proc lf_storeLinks(){
waitCursor -state on;
string $allLights[] = `ls -sl -fl -l -dag -type "light"`;
    for($thisLight in $allLights) {
        string $thisLightLinks[] = `lightlink -q -shapes false -transforms true -hierarchy false -sets false -light $thisLight`;
        string $lightLinkString = `stringArrayToString $thisLightLinks "+"`;
        string $lightName = `lf_getLightName $thisLight`;
        text -e -fn "obliqueLabelFont" ($lightName + "_SELTEXT");
        text -e -l $lightLinkString ($lightName + "_LIGHTLINKS");
    }
string $lightListString = (`text -q -l LF_LINKEDLIGHTS` + "+" + `stringArrayToString $allLights "+"`);
text -e -l $lightListString LF_LINKEDLIGHTS;
waitCursor -state off;
}

//STORE ALL LIGHT LINKS

global proc lf_linkAll(){
    string $allLights[] = `ls -fl -l -dag -type "light"`;
    string $origSel[] = `ls -sl`;
    for($thisLight in $allLights){
        string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
        string $thisLightTransform = $transformLightArray[0];
        string $connections[] = `listConnections $thisLightTransform`;
        int $isIllumDefault = `stringArrayContains "defaultLightSet" $connections`;
        if(!$isIllumDefault) {select $thisLightTransform; lf_storeLinks;}
    }
    select -r $origSel;
}

//SELECT ALL LINKED LIGHTS

global proc lf_selAllLinked(){
    string $allLights[] = `ls -fl -l -dag -type "light"`;
    select -cl;
    for($thisLight in $allLights){
        string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
        string $thisLightTransform = $transformLightArray[0];
        string $connections[] = `listConnections $thisLightTransform`;
        int $isIllumDefault = `stringArrayContains "defaultLightSet" $connections`;
        if(!$isIllumDefault) {select -add $thisLightTransform;}
    }
}

//APPLY ALL STORED LINKS

global proc lf_linkStored(){
    waitCursor -state on;
    string $linkedLights = `text -q -l LF_LINKEDLIGHTS`;
    text -e -l "" LF_LINKEDLIGHTS;
    string $linkedArray[] = `stringToStringArray $linkedLights "+"`;
    for($thisLight in $linkedArray) {
      string $lightName = `lf_getLightName $thisLight`;
      text -e -fn "plainLabelFont" ($lightName + "_SELTEXT");
      string $lightLinks = `text -q -l ($lightName + "_LIGHTLINKS")`;
      string $objectArray[] = `stringToStringArray $lightLinks "+"`;
      lf_linker_breakLinks $thisLight;
      string $finalCommand = ("lightlink -l " + $thisLight); 
          for($thisObj in $objectArray){
              $finalCommand = $finalCommand + (" -o " + $thisObj);
          }
      eval $finalCommand;
    }
    waitCursor -state off;
}

//COPY LINKS FROM SELECTION
global proc lf_copyLinksFromSelection(){
    string $allLights[] = `ls -sl -fl -l -dag -type "light"`;
    if(size($allLights) > 1) error "More than one light selected.  Aborting operation. Oh the humanity.";
    if(size($allLights) < 1) error "No Lights Selected.  Aborting operation. Oh the humanity.";
    string $thisLight = $allLights[0];
    lf_copyLinksToBin $thisLight;
}

//COPY LINKS FROM SPECIFIED LIGHT
global proc lf_copyLinksToBin(string $thisLight){
string $thisLightLinks[] = `lightlink -q -shapes false -transforms true -hierarchy false -sets false -light $thisLight`;
string $lightLinkString = `stringArrayToString $thisLightLinks " -o "`;
text -e -l $lightLinkString LF_COPYLINKBIN;
}

//PASTE LINKS ONTO SELECTION
global proc lf_pasteLinksFromSelection(){
    string $allLights[] = `ls -sl -fl -l -dag -type "light"`;
    for($thisLight in $allLights){
        string $thisLightTransform = `firstParentOf $thisLight`;
        lf_pasteStoredLinks $thisLightTransform;
    }
}

//PASTE LINKS ONTO SPECIFIED LIGHT
global proc lf_pasteStoredLinks(string $thisLight){
    if(size(`text -q -l LF_COPYLINKBIN`) < 1) error "No links copied.  Sorry about that.  Copy some links and try again!";
    string $linkCommand = ("lightlink -l " + $thisLight + " - o " + `text -q -l LF_COPYLINKBIN`  + ";");
    lf_linker_breakLinks $thisLight;
    eval $linkCommand;
}

//*********LINKER WINDOW***********
// LINK LIGHTS TO OBJECTS THROUGH SET

global proc lf_linkToSet(){
    if(`window -exists LightersFriendlyLinkerWindow`){
        deleteUI LightersFriendlyLinkerWindow;
    }
    window -rtf 1 -t "Lighter's Friend - The Friendly Light Linker!" -mnb 1 -mxb 1 -w 1000 LightersFriendlyLinkerWindow;
    columnLayout;
        rowColumnLayout -nc 2;
            text -fn "boldLabelFont" -width 500 -ebg 1 -bgc .2 .2 .2 -l "Link These Lights...";
            text -fn "boldLabelFont" -width 500 -ebg 1 -bgc .2 .2 .2 -l "To a Set Containing These Objects:";
            textScrollList -height 500 -ams true LF_LINKER_LIGHTLIST;
            textScrollList -height 500 -ams true LF_LINKER_GEOLIST;
            textScrollList -h 1 -visible 0 -ams true LF_LINKER_LIGHTLIST_ACTUAL;
            textScrollList -h 1 -visible 0 -ams true LF_LINKER_GEOLIST_ACTUAL;
            button -width 500 -label "Add Light" -command "lf_linker_addLights";
            button -width 500 -label "Add Objects" -command "lf_linker_addObjects";
            button -l "Remove Selected" -command "lf_linker_removeLights";
            button -l "Remove Selected" -command "lf_linker_removeObj";
            button -l "Remove All" -command "textScrollList -e -ra LF_LINKER_LIGHTLIST_ACTUAL\; textScrollList -e -ra LF_LINKER_LIGHTLIST\;";
            button -l "Remove All" -command "textScrollList -e -ra LF_LINKER_GEOLIST_ACTUAL\; textScrollList -e -ra LF_LINKER_GEOLIST\;";
            button -l "Select ALL In Maya" -command "select -r `textScrollList -q -allItems LF_LINKER_LIGHTLIST_ACTUAL`";
            button -l "Select ALL In Maya" -command "select -r `textScrollList -q -allItems LF_LINKER_GEOLIST_ACTUAL`";
        setParent ..;
        columnLayout;
            button -w 1000 -l "Create New Links (breaks old links)" -ebg 1 -bgc .3 .5 .3 -command "lf_linker_makeLinks";
    setParent;
    showWindow LightersFriendlyLinkerWindow;
    lf_linker_addLights;
}

//*********LINKER WINDOW***********
//ADD SELECTED LIGHTS TO LEFT WINDOW

global proc lf_linker_addLights(){
    string $selectedLights[] = `ls -sl -dag -long -type "light"`;
    string $selectedLightTransforms[];
        for($thisLight in $selectedLights){
            string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
            string $thisLightTransform = $transformLightArray[0];
            $selectedLightTransforms[size($selectedLightTransforms)] = $thisLightTransform;
        }
    string $linkerList[] = `textScrollList -q -allItems LF_LINKER_LIGHTLIST_ACTUAL`;
    for($thisLightTransform in $selectedLightTransforms){
        if(!`stringArrayContains $thisLightTransform $linkerList`){
            textScrollList -e -append `shortNameOf $thisLightTransform` LF_LINKER_LIGHTLIST;
            textScrollList -e -append $thisLightTransform LF_LINKER_LIGHTLIST_ACTUAL;
        }
    }
}

//*********LINKER WINDOW***********
//REMOVE LIGHTS FROM LEFT WINDOW

global proc lf_linker_removeLights(){
    int $selectedLightsIndex[] = `textScrollList -q -sii LF_LINKER_LIGHTLIST`;
        string $removeListShort[];
        string $removeListLong[];
        for($thisIndex in $selectedLightsIndex){
            textScrollList -e -da LF_LINKER_LIGHTLIST;
            textScrollList -e -sii $thisIndex LF_LINKER_LIGHTLIST;
            textScrollList -e -da LF_LINKER_LIGHTLIST_ACTUAL;
            textScrollList -e -sii $thisIndex LF_LINKER_LIGHTLIST_ACTUAL;
            string $thisShort[] = `textScrollList -q -si LF_LINKER_LIGHTLIST`;
            $removeListShort[size($removeListShort)] = $thisShort[0];
            string $thisLong[] = `textScrollList -q -si LF_LINKER_LIGHTLIST_ACTUAL`;
            $removeListLong[size($removeListLong)] = $thisLong[0];
        }
        for($thisShort in $removeListShort){
            textScrollList -e -ri $thisShort LF_LINKER_LIGHTLIST;
        }
        for($thisLong in $removeListLong){
            textScrollList -e -ri $thisLong LF_LINKER_LIGHTLIST_ACTUAL;
        }
        
}

//*********LINKER WINDOW***********
//ADD OBJECTS TO RIGHT WINDOW

global proc lf_linker_addObjects(){
    string $selectedLights[] = `ls -sl -dag -long -type "light"`;
    string $selectedObjects[] = `ls -sl -dag -ni -long -type "transform"`;
    string $selectedSets[] = `ls -sl -sets`;
    string $selectedLightTransforms[];
        for($thisLight in $selectedLights){
            string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
            string $thisLightTransform = $transformLightArray[0];
            $selectedLightTransforms[size($selectedLightTransforms)] = $thisLightTransform;
        }
    string $addObjects[] = `stringArrayRemove $selectedLightTransforms $selectedObjects`;
    string $linkerList[] = `textScrollList -q -allItems LF_LINKER_GEOLIST_ACTUAL`;
    for($thisObj in $addObjects){
        if(!`stringArrayContains $thisObj $linkerList`){
            textScrollList -e -append `shortNameOf $thisObj` LF_LINKER_GEOLIST;
            textScrollList -e -append $thisObj LF_LINKER_GEOLIST_ACTUAL;
        }
    }
    for($thisSet in $selectedSets){
        if(!`stringArrayContains $thisSet $linkerList`){
            textScrollList -e -append `shortNameOf $thisSet` LF_LINKER_GEOLIST;
            textScrollList -e -append $thisSet LF_LINKER_GEOLIST_ACTUAL;
        }
    }
}

//*********LINKER WINDOW***********
//REMOVE OBJECTS FROM RIGHT WINDOW

global proc lf_linker_removeObj(){
    int $selectedLightsIndex[] = `textScrollList -q -sii LF_LINKER_GEOLIST`;
        string $removeListShort[];
        string $removeListLong[];
        for($thisIndex in $selectedLightsIndex){
            textScrollList -e -da LF_LINKER_GEOLIST;
            textScrollList -e -sii $thisIndex LF_LINKER_GEOLIST;
            textScrollList -e -da LF_LINKER_GEOLIST_ACTUAL;
            textScrollList -e -sii $thisIndex LF_LINKER_GEOLIST_ACTUAL;
            string $thisShort[] = `textScrollList -q -si LF_LINKER_GEOLIST`;
            $removeListShort[size($removeListShort)] = $thisShort[0];
            string $thisLong[] = `textScrollList -q -si LF_LINKER_GEOLIST_ACTUAL`;
            $removeListLong[size($removeListLong)] = $thisLong[0];
        }
        for($thisShort in $removeListShort){
            textScrollList -e -ri $thisShort LF_LINKER_GEOLIST;
        }
        for($thisLong in $removeListLong){
            textScrollList -e -ri $thisLong LF_LINKER_GEOLIST_ACTUAL;
        }
        
}

//*********LINKER WINDOW***********
//BUILD LIGHT LINKS

global proc lf_linker_makeLinks(){
    string $linkerLightList[] = `textScrollList -q -allItems LF_LINKER_LIGHTLIST_ACTUAL`;
    string $linkerObjList[] = `textScrollList -q -allItems LF_LINKER_GEOLIST_ACTUAL`;
    string $promptResult = `promptDialog -title "Set Name" -message "name of the linked set:" -text "linked_to_"`;
 	string $setName = `promptDialog -query -text`;
 	string $newSet = `sets -em -name $setName`;
 	string $origSel[] = `ls -sl`;
 	select -r $linkerObjList;
 	string $linkerSelList[] = `ls -sl`;
 	sets -e -add $newSet $linkerSelList;
 	for($thisLight in $linkerLightList){
        string $connections[] = `listConnections $thisLight`;
        int $isIllumDefault = `stringArrayContains "defaultLightSet" $connections`;
        if($isIllumDefault){
          string $lightSet[] = `listConnections -s 0 -d 1 -p 1 -t "objectSet" $thisLight`;
          disconnectAttr ($thisLight + ".instObjGroups[0]") $lightSet[0];  
        }
        string $shapeOf[] = `listRelatives -fullPath -shapes $thisLight`;
        lf_linker_breakLinks $thisLight;
 	    lightlink -l $thisLight -o $newSet;
 	    lf_addRefreshLightUI $shapeOf[0] "none" 0;
 	}
 	select -r $origSel;
}

//*********LINKER WINDOW***********
//BREAK ALL LIGHTS LINKS ON SPECIFIED LIGHT

global proc lf_linker_breakLinks(string $thisLight){
    string $linkSets[] = `lightlink -q -l $thisLight -hierarchy false -sets true -shapes false -transforms false`;
    if(size($linkSets) > 0){
        string $linkCommandSets[] = {("lightlink -break -l " + $thisLight)};
        stringArrayAppend $linkCommandSets $linkSets;
        string $linkSetCommand = (`stringArrayToString $linkCommandSets " -o "` + "\;");
        eval $linkSetCommand;
    }
    string $linkList[] = `lightlink -q -l $thisLight -hierarchy false -sets false -shapes false -transforms true`;
    if(size($linkList) > 0){
        string $linkCommandList[] = {("lightlink -break -l " + $thisLight)};
        stringArrayAppend $linkCommandList $linkList;
        string $linkCommand = (`stringArrayToString $linkCommandList " -o "` + "\;");
        eval $linkCommand;
    }
}

//*********LINKER WINDOW***********
//BREAK ALL LIGHTS LINKS ON SELECTED LIGHTS

global proc lf_linker_breakSelLightLinks(){
    string $selLights[] = `ls -sl -dag -long -type "light"`;
    for($thisLight in $selLights){
        string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
        string $thisLightTransform = $transformLightArray[0];
        string $connections[] = `listConnections $thisLightTransform`;
        int $isIllumDefault = `stringArrayContains "defaultLightSet" $connections`;
        if($isIllumDefault){
          string $lightSet[] = `listConnections -s 0 -d 1 -p 1 -t "objectSet" $thisLightTransform`;
          print $lightSet;
          disconnectAttr ($thisLightTransform + ".instObjGroups[0]") $lightSet[0];  
        } else {
        lf_linker_breakLinks $thisLightTransform;
        }
    lf_addRefreshLightUI $thisLight "none" 0;
    }
}

//*********LINK VIEWER WINDOW***********
//BUILD THE LINK VIEWER UI

global proc lf_linkViewer(){
    if(`window -exists LightersFriendLinkViewerWindow`){
        deleteUI LightersFriendLinkViewerWindow;
    }
    window -rtf 1 -t "Lighter's Friend - View Light Links" -mnb 1 -mxb 1 -w 1000 LightersFriendLinkViewerWindow;
    columnLayout;
        rowColumnLayout -nc 2;
            text -fn "boldLabelFont" -width 500 -ebg 1 -bgc .2 .2 .2 -l "Your Linked Lights (Illuminates by Default OFF)";
            text -fn "boldLabelFont" -width 500 -ebg 1 -bgc .2 .2 .2 -l "Linked Objects";
            textScrollList -height 500 -ams false -sc "lf_linkviewer_update" LF_LINKVIEWER_LIGHTLIST;
            textScrollList -height 500 -ams false LF_LINKVIEWER_GEOLIST;
            textScrollList -h 1 -visible 0 -ams false LF_LINKVIEWER_LIGHTLIST_ACTUAL;
            textScrollList -h 1 -visible 0 -ams false LF_LINKVIEWER_GEOLIST_ACTUAL;
        setParent ..;
        columnLayout;
            button -w 1000 -l "print selected links" -ebg 1 -bgc .3 .5 .3 -command "lf_linkviewer_printer";
            button -w 1000 -l "print ALL links" -ebg 1 -bgc .3 .5 .3 -command "lf_linkviewer_printAll";
            scrollField -w 1000 -h 200 LF_LINKVIEWER_PRINTAREA;
            button -w 1000 -l "clear the print area" -ebg 1 -bgc .3 .5 .3 -command "scrollField -e -text \"\" LF_LINKVIEWER_PRINTAREA";
    setParent;
    showWindow LightersFriendLinkViewerWindow;
    lf_linkviewer_addLights;
}

//*********LINK VIEWER WINDOW***********
//ADD LIGHTS TO LEFT WINDOW

global proc lf_linkviewer_addLights(){
    string $allLights[] = `ls -dag -long -type "light"`;
    string $allLightTransforms[];
        for($thisLight in $allLights){
            string $transformLightArray[] = `listRelatives -fullPath -parent $thisLight`;
            string $thisLightTransform = $transformLightArray[0];
            string $connections[] = `listConnections $thisLightTransform`;
            int $isIllumDefault = `stringArrayContains "defaultLightSet" $connections`;
            if(!$isIllumDefault) $allLightTransforms[size($allLightTransforms)] = $thisLightTransform;
        }
    for($thisLightTransform in $allLightTransforms){
        textScrollList -e -append (`firstParentOf $thisLightTransform` + ":  " + `shortNameOf $thisLightTransform`) LF_LINKVIEWER_LIGHTLIST;
        textScrollList -e -append $thisLightTransform LF_LINKVIEWER_LIGHTLIST_ACTUAL;
    }
}


//*********LINK VIEWER WINDOW***********
//ADD OBJECTS TO RIGHT WINDOW

global proc lf_linkviewer_addObjects(){
    int $index[] = `textScrollList -q -sii LF_LINKVIEWER_LIGHTLIST`;
    textScrollList -e -sii $index[0] LF_LINKVIEWER_LIGHTLIST_ACTUAL;
    string $thisLight[] = `textScrollList -q -si LF_LINKVIEWER_LIGHTLIST_ACTUAL`;
    string $linkSets[] = `lightlink -q -l $thisLight[0] -hierarchy false -sets true -shapes false -transforms false`;
    string $linkedGeo[] = `lightlink -q -l $thisLight[0] -hierarchy false -sets false -shapes false -transforms true`;
    if(`stringArrayContains "defaultObjectSet" $linkSets`){
        textScrollList -e -append "defaultObjectSet" LF_LINKVIEWER_GEOLIST;
        textScrollList -e -append "defaultObjectSet" LF_LINKVIEWER_GEOLIST_ACTUAL;
    } else {
        for($thisObj in $linkedGeo){
                textScrollList -e -append `shortNameOf $thisObj` LF_LINKVIEWER_GEOLIST;
                textScrollList -e -append $thisObj LF_LINKVIEWER_GEOLIST_ACTUAL;
        }
    }
}

//*********LINK VIEWER WINDOW***********
//UPDATE LIST OF LINKED OBJECTS

global proc lf_linkviewer_update(){
    textScrollList -e -ra LF_LINKVIEWER_GEOLIST;
    textScrollList -e -ra LF_LINKVIEWER_GEOLIST_ACTUAL;
    lf_linkviewer_addObjects;
}

//*********LINK VIEWER WINDOW***********
//PRINT LIGHT LINKS ON SELECTED LIGHT

global proc string lf_linkviewer_printer(){
    int $index[] = `textScrollList -q -sii LF_LINKVIEWER_LIGHTLIST`;
    textScrollList -e -sii $index[0] LF_LINKVIEWER_LIGHTLIST_ACTUAL;
    string $thisLight[] = `textScrollList -q -si LF_LINKVIEWER_LIGHTLIST_ACTUAL`;
    string $linkCommand[] = {("lightlink -l " + $thisLight[0])};
    string $linkList[] = `lightlink -q -l $thisLight[0] -hierarchy false -sets false -shapes false -transforms true`;
    appendStringArray $linkCommand $linkList `size $linkList`;
    string $printLinks = `stringArrayToString $linkCommand " -o "`;
    $printLinks = $printLinks + ";";
    scrollField -e -text $printLinks LF_LINKVIEWER_PRINTAREA;
    return $printLinks;
}

//*********LINK VIEWER WINDOW***********
//PRINT LIGHT LINKS ON ALL LIGHTS

global proc lf_linkviewer_printAll(){
    string $allItems[] = `textScrollList -q -ai LF_LINKVIEWER_LIGHTLIST`;
    string $printList;
        for($thisLight in $allItems) {
            textScrollList -e -si $thisLight LF_LINKVIEWER_LIGHTLIST;
            refresh;
            $printList = ($printList + `lf_linkviewer_printer` + "\n");
        }
    scrollField -e -text $printList LF_LINKVIEWER_PRINTAREA;
}


//=================
// create a layout dialog
//=================

global proc string lf_customDialog(string $uiScript){
	string $return = `layoutDialog -ui $uiScript`;
	return $return;
}


//=================
// dialog for copy attribues building
//=================

global proc lf_copyDialog(string $context){
	string $procedure;
	string $form = `setParent -q`;
	formLayout -e -w 400 -h 100 $form;
	string $col = `columnLayout -adj 1 -cat "both" 2 -ebg 1 -bgc .4 .4 .4`;
		text -fn "boldLabelFont" -l ("Copy Attrs: " + $context) -ebg 1 -bgc .2 .2 .2;
		rowColumnLayout -nc 2 LF_LIGHTATTRSLIST;
			checkBoxGrp -v1 1 -l "color" -cc "lf_constructAttrList";
			checkBoxGrp -v1 1 -l "intensity" -cc "lf_constructAttrList";
			checkBoxGrp -v1 1 -l "coneAngle" -cc "lf_constructAttrList";
			checkBoxGrp -v1 1 -l "penumbraAngle" -cc "lf_constructAttrList";
			checkBoxGrp -v1 1 -l "dropoff" -cc "lf_constructAttrList";
			setParent ..;
		text -l " ";
		text -l " " lf_customDialogReturn;
	setParent ..;
	string $row = `rowLayout -adj 2 -nc 2 -ct2 "both" "both" -ebg 1 -bgc .6 .6 .6 LF_DIALOGROW`;
		string $b1 = `button -l "Cancel" -c "layoutDialog -dismiss \"dismiss\""`;
	    button -l "Confirm" -c ("layoutDialog -dismiss \"dismiss\"") lf_customDialogConfirm;
	setParent ..;
    int $buffer = 2;
    formLayout -e
    	-attachForm		$col "top" 		$buffer
    	-attachForm		$col "left" 	$buffer
    	-attachForm		$col "right"	$buffer
    	
    	-attachForm		$row "bottom"	$buffer
    	-attachForm		$row "left"		$buffer
    	-attachForm 	$row "right"	$buffer
    	
    	-attachControl	$col "bottom" 	$buffer $row
    	
    $form;
    lf_constructAttrList;
}

global proc string lf_constructAttrList(){
	string $checks[] = `layout -q -ca LF_LIGHTATTRSLIST`;
	string $checkedAttrs[];
		for($check in $checks){
			if(`checkBoxGrp -q -v1 $check`) $checkedAttrs[size($checkedAttrs)] = `checkBoxGrp -q -l $check`;
		}
	button -e -c ("layoutDialog -dismiss \"" + `stringArrayToString $checkedAttrs "+"` + "\"") lf_customDialogConfirm;
	return `stringArrayToString $checkedAttrs "+"`;
}

global proc string lf_copyAttrs(){
	string $selLights[] = `ls -sl -dag -type "light"`;
	if(size($selLights) > 1) error "more than one light selected";
	string $copyAttrs = lf_customDialog("lf_copyDialog \"Copy These Attributes\"");
	text -e -l ($selLights[0] + "+" + $copyAttrs) LF_COPYATTRSBIN;
	return $copyAttrs;
}

global proc lf_pasteAttrs(){
	string $selLights[] = `ls -sl -dag -type "light"`;
	string $copyAttrList = `text -q -l LF_COPYATTRSBIN`;
	string $attrs[] = `stringToStringArray $copyAttrList "+"`;
	if(size($copyAttrList) < 1) error "no values copied";
	string $copyFromLight = $attrs[0];
	
	for($attr in $attrs){
		for($thisLight in $selLights){
			if(`attributeExists $attr $thisLight`){
				string $attrConnections[] = `listConnections -p true -d false -c true ($copyFromLight + "." + $attr)`;
				if(size($attrConnections) > 0){
					connectAttr -f $attrConnections[1] ($thisLight + "." + $attr);
				} else {
					if($attr == "color"){
						for($rgb in {"R", "G", "B"}){
							setAttr ($thisLight + "." + $attr + $rgb) `getAttr ($copyFromLight + "." + $attr + $rgb)`;
						}
					} else {
						setAttr ($thisLight + "." + $attr) `getAttr ($copyFromLight + "." + $attr)`;
					}
				}
			}
		}
	}
}