//Nail_Element_to_Point, by the guy who runs crgreen.com//An After Effects script for quickly moving Element3D world transform and Groups to a logical 3D origin point in a comp.//(Element3D plugin from videocopilot.net)//v2 to work with Element3D v1.5//v3 to work with Element3D 1.62 (480) updatevar cancelFlag = false;var badSelection = false;var badVersion = false;main();function buildUI(win) {    if (win != null) {        xtraY = 0;                cancButton = "Cancel";        explainText = ' The World Transform of the selected instance of Element3D will be nailed to the selected point.' +        '\r\r The World Transform\'s Anchor Point will be zeroed.' +        '\r\r The Groups selected below will have their positions zeroed (thus placing them at the point).';                if (badSelection) {            explainText = "Please select one instance of Element 3D on one layer, " +            "and the position property of another layer."+"\r\rFirst_Layer___________"+            "\r_____Element   <---selected\rSecond_Layer________\r_____Position   <---selected"+"\r\rClose this window and try again.";                        cancButton = "Close";        }                if (badVersion) {            explainText = "Your Element3D plugin needs updating.";                        cancButton = "Close";        }                win.mainButton = win.add('button', [203,311,287,369], 'Nail It');        win.mainButton.onClick = function () { this.parent.close(1) };                win.cancButton = win.add('button', [203,211,287,233], cancButton);        win.cancButton.onClick = function () {cancelFlag = true; this.parent.close(0)};                win.checkGroup = win.add('panel', [14,211,156,370], 'Group Inclusion:', {borderStyle: "raised"});        win.ctl_label7 = win.add('statictext', [14,11,290,181], explainText, {multiline:true});        win.ctl_label7.justify = 'left';                win.check1 = win.checkGroup.add('checkbox', [26,17,134,39], '1st Group');        win.check1.value = true;        win.check2 = win.checkGroup.add('checkbox', [26,42,134,64], '2nd Group');        win.check2.value = true;        win.check3 = win.checkGroup.add('checkbox', [26,67,134,89], '3rd Group');        win.check3.value = true;        win.check4 = win.checkGroup.add('checkbox', [26,91,134,113], '4th Group');        win.check4.value = true;        win.check5 = win.checkGroup.add('checkbox', [26,117,134,139], '5th Group');        win.check5.value = true;                if (badSelection || badVersion) {            win.checkGroup.visible = false;            win.mainButton.visible = false;        }            }    return win}function checkSelectedProps(sel1, sel2) {    var weGood = false;    if ((sel1 == 0 || sel2 == 0)) {        //yeah, it's still false    } else {        if ( (sel1.length == 1) && (sel2.length == 1) ) {                        if ( (sel1[0].matchName == "VIDEOCOPILOT 3DArray") && (sel2[0].matchName == "ADBE Position") ) {                weGood = true;            }                        if ( (sel2[0].matchName == "VIDEOCOPILOT 3DArray")  && (sel1[0].matchName == "ADBE Position") ) {                weGood = true;            }        }    }    return weGood;}function main() {        var genericSelectionFail = "You need to select one instance of Element 3D on one layer, and one position property on another layer.";        var activeItem = app.project.activeItem;        if (activeItem == null || !(activeItem instanceof CompItem)){                badSelection = true;            } else {        var layersSelected = activeItem.selectedLayers;        var layersSelNum = layersSelected.length;        var elProp = null;        var posProp = null;        //pattern of group xyz indeces (NOTE: FUTURE MAJOR UPDATES OF PLUGIN WILL PROBABLY        //     CHANGE THIS, SO I'LL NEED TO CHECK FOR THIS !!!! )        //need new version for E1.62:        var forEachGroupArray = [[23, 24], [164, 165], [305, 306], [446, 447], [587, 588]];                //need new version for E1.62:        //       world transfer xy,   z    apxy, apz        var worldTrPattern = [ [766, 767], [768, 769] ];                var verzhn = 3;                app.beginUndoGroup("Nail Element to 3D Point");                if (layersSelNum == 2) {            // we're looking for two properties selected: instance of Element and 3D position array                        propSel1 = layersSelected[0].selectedProperties;            propSel2 = layersSelected[1].selectedProperties;                        badSelection = !checkSelectedProps(propSel1, propSel2);                    } else {            badSelection = true;           }                if (!badSelection) {            if (propSel1[0].matchName == "VIDEOCOPILOT 3DArray") {                elProp = propSel1[0];                posProp = propSel2[0];            } else {                elProp = propSel2[0];                posProp = propSel1[0];            }                        if ( elProp(592).name != "5. Y Scale") {                badVersion = true;            }                        badSelection = !checkFor3DPoint(posProp);        }        var lessY = 0;                if (badSelection || badVersion) {lessY = 130;}                var win = new Window('dialog', 'Nail Element to Point (v.'+verzhn+')',[432,249,737,632-lessY]);        var w = buildUI(win);        fromWin = null;        if (w != null) {            w.center();            fromWin=w.show();                                    if (fromWin == 2) {cancelFlag = true;}//if esc (same as ... or should be ... or this makes it ... same as cancel)        }                //canceling is forced on the user if there's a wrong selection, etc., so the following should never happen unless everything works                if (!cancelFlag) {            var groupIncluArray = [ win.check1.value, win.check2.value, win.check3.value, win.check4.value, win.check5.value ];                        if (propSel1[0].matchName == "VIDEOCOPILOT 3DArray") {                elProp = propSel1[0];                posProp = propSel2[0];            } else {                elProp = propSel2[0];                posProp = propSel1[0];            }                        // CHECK FOR KEYFRAMES HERE                        //////////////keyframe check            //////////////            var noKeys = true;                        if ( !checkForKeyframes1(elProp, [ worldTrPattern[0][0], worldTrPattern[0][1] ]) ) {noKeys = false;}                        //now check world transform anchor points:            if ( !checkForKeyframes2(elProp, [ worldTrPattern[1][0], worldTrPattern[1][1] ]) ) {noKeys = false;}                        //now check all (selected) groups of element:            var x = 0;            var maxGroupProps = forEachGroupArray.length;                        while (x <= maxGroupProps) {                if (groupIncluArray[x]) {//booleans from UI                    if ( !checkForKeyframes1(elProp, [ forEachGroupArray[x][0], forEachGroupArray[x][1] ]) ) {noKeys = false;}                }                x++;            }            /////////////////////////////            /////////////////////////////                                    if (noKeys) {                                //set new world transform:                setFrom3DValues(elProp, [ worldTrPattern[0][0], worldTrPattern[0][1] ], posProp);                //zero world transform anchor points:                zeroOut(elProp, [ worldTrPattern[1][0], worldTrPattern[1][1] ]);                                //loop through forEachGroupArray to zero out appropriate group positions                x = 0;                maxGroupProps = forEachGroupArray.length;                                while (x <= maxGroupProps) {                    if (groupIncluArray[x]) {//booleans from UI                        zeroOut(elProp, [ forEachGroupArray[x][0], forEachGroupArray[x][1] ]);                    }                    x++;                }            } else {//if noKeys                alert("Sorry, this is not designed to change the values of properties with keyframes!");            }//if noKeys        }        ////////                app.endUndoGroup();    }}function checkForKeyframes1(proprT, xyAndZArray) {    // modified clone of setFrom3DValues    var b = true;    if (proprT(xyAndZArray[0]).numKeys > 0) {b = false;}    if (proprT(xyAndZArray[1]).numKeys > 0) {b = false;}    return b;}function checkForKeyframes2(proprT, xyAndZArray) {    // modified clone of zeroOut    var b = true;    if ( proprT(xyAndZArray[0]).numKeys > 0 ) {b = false;}    if ( proprT(xyAndZArray[1]).numKeys > 0) {b = false;}    return b;}function setFrom3DValues(proprT, xyAndZArray, newXYZArray) {    proprT(xyAndZArray[0]).setValue( [newXYZArray.value[0], newXYZArray.value[1] ] );    proprT(xyAndZArray[1]).setValue(newXYZArray.value[2]);}function zeroOut(proprT, xyAndZArray) {    proprT(xyAndZArray[0]).setValue([0, 0]);    proprT(xyAndZArray[1]).setValue(0);}function checkFor3DPoint(seldProp) {    var boolToReturn = false;    if (seldProp.constructor.name != "PropertyGroup") {//should never happen now        if (seldProp.value.constructor == Array) {            boolToReturn = true;            if (seldProp.value.length != 3) {                boolToReturn = false            }        }    }    return boolToReturn;}