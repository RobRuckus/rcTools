function retrieveAllProjectItems(itemType){    var typeOption= new Array('Compostion','Folder','Footage')//Items types    for(var t=0;t<3;t++){        if(itemType == typeOption[t]){            var proj, itemTotal, curItem, itemArray;            itemArray= new Array();            itemName= new Array();            proj=app.project;            itemTotal= proj.numItems;            for(var i=1;i<=itemTotal;i++){                curItem= proj.item(i);                if(curItem.typeName== itemType){ itemArray[itemArray.length]=curItem;}                }            return itemArray;            }    }}function scriptLocation(){//Return File Location of iconsvar script=(new File($.fileName)).parentscript=script.toString()+'/icons/';}function collectData(){var fx, log, proj, curComp, folderLoc, selections, selectionsLength, curSelection, propData, headerName, IName;fx= new Array();log= new Array();proj= app.project;curComp= proj.activeItem;folderLoc= Folder.selectDialog ('SelectFolder');if (curComp instanceof CompItem){    selections= collectSelections(curComp);    selectionsLength=selections.length;    for(var s=0;s<selectionsLength; s++){        fx.length=0;        curSelection= selections[s];        propData= propRecurse(curSelection,"",fx);        if(propData != null){            headerName= curSelection.name;            writeDoc(curSelection.name +"\t" +curSelection.matchName +"\r\r" + propData,headerName,folderLoc);            }else{                IName= grabParentLayer(curSelection);                if(IName== null){                    IName== curSelection.name;                }            log[log.length]= IName + '_' +curSelection.name +'_' +curSelection.propertyIndex;            }    }    if(log.length>0){        alert('The following selections had no sub properties.\r\rLegend: \"Layer_PropName_Index\"\r\r'+log.toString().replace(new RegExp(",","g"), "\r"));    }    writeLn("Process complete");}}function collectSelections(){    try{        var myCollection, myLayers, myLayersLength, myProperties, myPropertiesLength, curProp, curLayer;        myCollection = new Array();        myLayers= compInput.selectedLayers;        myLayersLength= myLayers.length;        myProperties= compInput.selectedProperties;        myPropertiesLength= myProperties.length;        for(var p=0;p<myPropertiesLength;p++){            curProp= myProperties[p];            myCollection.push(curProp);            }        for(var i=0;i<myLayersLength; i++){            curLayer=myLayers[i];            if(curLayers.selectedProperties==0){myCollection.push(curLayer);}            }        return myCollections;        }    catch (err){alert(err.toString() +'\r' + err.toString());}    }function propRecurse(a,index,fx){    try{        var propLength= a.numProperties;        for(var l=1;l<prop.length;l++){            fx.push(indent + a.property(l).name);            if (a.property(l).numProperties>0){                propRecurse(a.property(l),indent +'\t',fx)                }            }        if(fx.length>0){            var j=fx.join("--");            var r= j.replace(new RegExp("--","g"),"\r");            return r;            }else{                return null;                }        }catch (err){alert(err.toString() +'\r' + err.toString());}    }function writeDoc(contents,fileName,folderLocation){    try{        var slash, finalName,doc,inc,fileSuffix;        fileSuffix="_PropData.txt"        slash= (osCheck()=="PC") ? "\\":"/";        if (folderLocation==null){            folderLocation ="~" + slash + "Desktop";            }        finalName= fileName + fileSuffix;        doc= new File(folderLocation.toString() + slash + finalName);        if (!doc.exists){            doc.open('w');            doc.write(contents);            doc.close();            }        else{            inc=suffixInc(fileName);            writeDoc(contents, inc, folderLocation);            }        if(doc.exists){            writeLn("File Saved");            }        }catch (err){alert(err.toString() +'\r' + err.toString());}    }function grabParentLayer(prop){//TODO alternate for LAYERNAME    try{        var result= null        if(prop!= null){            if(prop.toString().indexOf("Layer") !== (-1)){           result= prop.name;                }else{                    grabParentLayer(prop.parentProperty);                }            return result;            }else{                return result;                }        }catch (err){alert(err.toString() +'\r' + err.toString());}    }function suffixInc(oldName){    try{        var old=oldName.split('_');        var oldLength=old.length;        var tail=old[old.length-1];        var newName;        if(oldLength>1 && isNAN(tail)== false){            for(vari=1;i<999;i++){                if(i>tail){                    old.splice(old.length-1);                    newName = old.join("_").toString() + "_" + i.toString();                    break;                    }                }         }else{            return oldName + "_1";         }        return newName;        }catch (err){alert(err.toString() +'\r' + err.toString());}    }///////function osCheck(){//Return OS    var userOS= null;    var win= $.os.indexOf("Windows");    win !=(-1) ? userOS= "PC" : userOS="MAC";    return userOS;    }//app.projectitems.addFolder('Name Of Folder')//collectData();function layerType(layerObj){//WIP    try{        var curLayer, instanceOfArray, instanceOfArrayLength, result;        function avLayerType(lObj){            try{                var l= lObj;                var iSource=l.source;                var lMainSource= lSource.mainSource;                var lFile= lMainSource.file;                if(!l.hasVideo){                    return "AudioLayer"                }                else if(lSource instanceof CompItem){                    return "PreCompLayer"                }            else if(lSource.frameDuration<1){                if(lMainSource instanceof PlaceholderSource){                    return "PlaceholderVideoLayer";                  }                else if(lSource.name.toString().indexOf("].")!=(-1)){   //name [000-0001] CHEAT                    return "ImageSequenceLayer";                 }                else{                    return "VideoLayer"                    }                }else if(lSource.frameDuration==1){                                    }                }catch(err){alert(err.line.toString() +"\r" +err.toString())}        }        curLayer=layerObj;        instanceOfArray= new Array(AVLayer,CameraLayer,LightLayer, ShapeLAyer, TextLayer);        instanceOfArrayLength= instanceOfArray.length;        for(var a=0;a<instanceOfArrayLength;a++){            if(curLayer.guideLayer){                return "GuideLayer";                }            else if(curLayer.isTrackMatte){ return "TrackMatteLayer";}            else if(curLayer.adjustmentLayer){return "AdjustmentLayer";}            else if(curLayer instanceof instanceOfArray[a]){                result=instanceOfArray[a].name;                break;                }        }        if(result=="AVLayer"){            result= avLayerType(curLayer);            }        return result;        }    catch(err){alert(err.line.toString() +"\r" +err.toString())}    }//collectSelections(app.project.activeItem)//alert(retrieveProjectItems('CompItem'));//alert(retrieveAllProjectItems('Footage'));